---
title: "waste-simulation"
author: "Nikola Kovačević"
format: html
editor: visual
---

# Setup

```{r}
library(simmer)
library(simmer.plot)
library(simmer.bricks)
library(parallel)
library(dplyr)
library(ggplot2)
library(paletteer)
library(lpSolve)

# Function to check if a global variable exists
exists_global <- function(name) {
  tryCatch({
    get_global(env, name)
    TRUE
  }, error = function(e) {
    FALSE
  })
}

# Define regions with capacities
regions <- data.frame(
  name = c("Pomurska", "Podravska", "Koroška", "Savinjska", 
           "Zasavska", "Posavska", "Jugovzhodna Slovenija", 
           "Osrednjeslovenska", "Gorenjska", "Primorsko-notranjska", 
           "Goriška", "Obalno-kraška"),
  waste_generation_rate = c(1.2, 1.5, 0.8, 1.3, 0.7, 0.9, 1.1, 1.6, 1.4, 1, 1.3, 1.2),
  waste_collection_rate = c(1.1, 1.3, 0.9, 1.2, 0.8, 1.0, 1.0, 1.5, 1.3, 0.9, 1.2, 1.1),
  waste_handling_rate = c(1.0, 1.2, 0.8, 1.1, 0.7, 0.9, 1.0, 1.4, 1.2, 0.8, 1.1, 1.0),
  storage_capacity = rep(10, 12)  # Not directly used in simulation; example capacities
)
```

# Define resources (assuming central facility)

## Generation - this process involves generating wood waste in each region

## Collection - this process involves transporting wood waste from each region to a central handling facility

## Handling - this process involves handling the wood waste at the central facility

# Test Framework 1

```{r}

env <- simmer("WoodWasteManagement")

# Assume each region generates between 1 to 5 units of wood waste randomly every 1 to 10 minutes
# This is a simplification, using test data
generate_wood_waste <- function(region) {
  trajectory(paste(region, "wood waste process")) |>
    log_(paste("Generating wood waste in", region)) |>
    timeout(function() runif(1, 1, 5)) |>
    log_(paste("Wood waste ready for collection in", region))
}

# Define a trajectory for transportation to a central handling facility
# This is simplified; distances and transport times would affect this in a real model
transport_to_facility <- trajectory("transportation") |>
  log_("Transporting to facility") |>
  timeout(5)  # Simplified transport time

# Handling trajectory
handle_wood_waste <- trajectory("handling") |>
  log_("Handling wood waste") |>
  timeout(3)  # Simplified processing time

# Regions
regions <- c("Pomurska", "Podravska", "Koroška", "Savinjska", "Zasavska", "Posavska", 
             "Jugovzhodna Slovenija", "Osrednjeslovenska", "Gorenjska", 
             "Primorsko-notranjska", "Goriška", "Obalno-kraška")

# Adding generators for each region
for(region in regions) {
  env <- env |>
    add_generator(paste(region, "generator"), generate_wood_waste(region), function() rexp(1, 0.1)) |>
    add_generator(paste(region, "transport"), transport_to_facility, function() rexp(1, 0.1)) |>
    add_generator("Handling facility", handle_wood_waste, function() rexp(1, 0.2))
}

# Run the simulation
env |> run(until = 100) |> now()  # Run for 100 time units as a demonstration

# monitoring
env |> get_mon_arrivals() |> head()

# amount of generated
env |> get_mon_resources() |> head()
```

# Test Framework 2

```{r}
env <- simmer("SloveniaWoodWasteManagement")

# Create a resource for each region with its storage capacity
for (region_name in regions$name) {
  env <- env |> add_resource(region_name, capacity = 10)
}

# Initialize a data frame to store the results
results <- data.frame(
  time = numeric(),
  region = character(),
  event = character(),
  total_amount = numeric(),
  stringsAsFactors = FALSE
)

waste_handling_trajectory <- function(region_name, initial_capacity, waste_collection_rate, waste_handling_rate) {
  trajectory(region_name) |>
    # Generate waste
    timeout(function() runif(1, 0.5, 1.5)) |>
    # Seize waste amount from the resource
    seize(region_name, amount = function() {
      waste_amount <- runif(1, 0.1, 0.5)
      # Log the waste generation
      results <<- rbind(results, data.frame(
        time = now(env),
        region = region_name,
        event = "generated",
        amount = waste_amount,
        stringsAsFactors = FALSE
      ))
      waste_amount
    }) |>
    # Simulate waste collection time
    timeout(function() rexp(1, rate = waste_collection_rate)) |>
    # Release the seized amount and log the waste collection
    release(region_name, amount = function() {
      seized_amount <- get_seized(env, region_name)
      # Log the waste collection
      results <<- rbind(results, data.frame(
        time = now(env),
        region = region_name,
        event = "collected",
        amount = seized_amount,
        stringsAsFactors = FALSE
      ))
      seized_amount
    }) |>
    # Simulate waste handling time
    timeout(function() rexp(1, rate = waste_handling_rate)) |>
    # Release the seized amount and log the waste handling
    release(region_name, amount = function() {
      seized_amount <- get_seized(env, region_name)
      # Log the waste handling
      results <<- rbind(results, data.frame(
        time = now(env),
        region = region_name,
        event = "handled",
        amount = seized_amount,
        stringsAsFactors = FALSE
      ))
      seized_amount
    })
}


# Add waste handling generators for each region
for (i in 1:nrow(regions)) {
  region <- regions[i, ]
  env <- env |> add_generator(
    paste(region$name, "Waste Generator"),
    waste_handling_trajectory(region$name, region$storage_capacity, region$waste_collection_rate, region$waste_handling_rate), 
    function() rexp(1, rate = region$waste_generation_rate)
  )
}

# Run the simulation
env |> run(until = 100)

print(results)

# show the results of Goriska for generated waste
# sum the amount
sum(results[results$region == "Primorsko-notranjska" & results$event == "generated", ]$amount)

```

# Test Framework 3

## TO FIX COLLECTION AND HANDLING

```{r}

env <- simmer("SloveniaWoodWasteManagement")

# Define regions with storage capacities
regions <- data.frame(
  name = c("Pomurska", "Podravska", "Koroška", "Savinjska", 
           "Zasavska", "Posavska", "Jugovzhodna Slovenija", 
           "Osrednjeslovenska", "Gorenjska", "Primorsko-notranjska", 
           "Goriška", "Obalno-kraška"),
  waste_generation_rate = c(1.2, 1.5, 0.8, 1.3, 0.7, 0.9, 1.1, 1.6, 1.4, 1, 1.3, 1.2),
  waste_collection_rate = c(1.1, 1.3, 0.9, 1.2, 0.8, 1.0, 1.0, 1.5, 1.3, 0.9, 1.2, 1.1),  # Example rates for simplicity
  waste_handling_rate = c(1.0, 1.2, 0.8, 1.1, 0.7, 0.9, 1.0, 1.4, 1.2, 0.8, 1.1, 1.0),  # Example rates for simplicity
  storage_capacity = rep(10, 12)  # Example capacities for simplicity
)

num_vehicles <- 5

# Create a resource for each region with its storage capacity
for (region_name in regions$name) {
  env <- env |> add_resource(region_name, capacity = 10)
}

# Initialize a data frame to store the results
results <- data.frame(
  time = numeric(),
  region = character(),
  event = character(),
  total_amount = numeric(),
  stringsAsFactors = FALSE
)

# Define the waste trajectory
waste_trajectory <- function(region_name, waste_collection_rate, waste_handling_rate) {
  trajectory(region_name) |>
    # Generate waste
    timeout(function() rnorm(1, 15)) |>
    # Seize waste amount from the resource
    seize(region_name, amount = function() {
      waste_amount <- runif(1, 0.1, 0.5)
      # Log the waste generation
      results <<- rbind(results, data.frame(
        time = now(env),
        region = region_name,
        event = "generated",
        amount = waste_amount,
        stringsAsFactors = FALSE
      ))
      waste_amount
    }) |>
    # Wait for some time before starting the collection
    # timeout(function() runif(1, 1, 2)) |>
    # Simulate waste collection time
    timeout(function() rnorm(1, 20)) |>
    # Seize a vehicle
    seize(paste(region_name, "Vehicles"), amount = 1) |>
    # Release the seized amount and log the waste collection
    release(region_name, amount = function() {
      seized_amount <- get_seized(env, region_name)
      # Log the waste collection
      results <<- rbind(results, data.frame(
        time = now(env),
        region = region_name,
        event = "collected",
        amount = seized_amount,
        stringsAsFactors = FALSE
      ))
      seized_amount
    }) |>
    # Release the vehicle
    release(paste(region_name, "Vehicles"), amount = 1) |>
    # Wait for some time before starting the handling
    # timeout(function() runif(1, 2, 3)) |>
    # Simulate waste handling time
    timeout(function() rnorm(1, 5)) |>
    # Release the remaining seized amount and log the waste handling
    release(region_name, amount = function() {
      waste_amount <- get_seized(env, region_name)
      # Log the waste handling
      results <<- rbind(results, data.frame(
        time = now(env),
        region = region_name,
        event = "handled",
        amount = waste_amount,
        stringsAsFactors = FALSE
      ))
      waste_amount
    })
}

# Add waste handling generators for each region
for (i in 1:nrow(regions)) {
  region <- regions[i, ]
  env <- env |> 
    add_resource(paste(region$name, "Vehicles"), capacity = num_vehicles) |> 
    add_generator(
      paste(region$name, "Waste Generator"),
      waste_trajectory(region$name, region$waste_collection_rate, region$waste_handling_rate), 
      function() rexp(1, rate = region$waste_generation_rate)
    )
}
# Run the simulation
env |> run(until = 500)

get_mon_arrivals(env)
get_mon_resources(env)
```

# Test Framework 4 - small working version

```{r}

env <- simmer("SloveniaWoodWasteManagement")

some_waste <- trajectory("some waste's path") |> 
  ## add a generation activity
  seize("generator", amount = 1) |>
  timeout(function() rnorm(1, 25)) |>
  release("generator", amount = 1) |>
  ## add a collection activity
  seize("collector", amount = 1) |>
  timeout(function() rnorm(1, 15)) |>
  release("collector", amount = 1) |>
  ## add a handling activity
  seize("handler", amount = 1) |>
  timeout(function() rnorm(1, 5)) |>
  release("handler", amount = 1)

env |> 
  add_resource("generator", capacity = 10) |> 
  add_resource("collector", capacity = 5) |> 
  add_resource("handler", capacity = 2) |> 
  add_generator("some waste", some_waste, function() rexp(1, rate = 1)) 

env |> 
  run(100) |> 
  get_mon_arrivals()

env |> peek(3)

env |> 
  stepn() |> 
  print() |> 
  stepn(5)


envs <- mclapply(1:100, function(i) {
  simmer("SuperDuperSim") |>
    add_resource("generator", 1) |>
    add_resource("collector", 2) |>
    add_resource("handler", 1) |>
    add_generator("some waste", some_waste, function() rnorm(1, 10, 2)) |>
    run(80) |>
    wrap()
})

resources <- get_mon_resources(envs)
plot(resources, metric = "utilization")

plot(resources, metric = "usage", c("generator", "collector"), items = "server")

arrivals <- get_mon_arrivals(envs)
plot(arrivals, metric = "flow_time")

plot(arrivals, metric = "activity_time")

plot(arrivals, metric = "waiting_time")

get_palette <- scales::brewer_pal(type = "qual", palette = 1)
plot(some_waste, fill = get_palette)

```

## Test Framework 4a

```{r}

# Create the main simulation environment
env <- simmer("SloveniaWoodWasteManagement")

# Define trajectories with attribute modifications
generation <- trajectory("generation") |>
  seize("generator", amount = 1) |>
  timeout(function() rnorm(1, 25)) |>
  set_attribute("generated", function() rnorm(1, 25)) |>
  release("generator", amount = 1)

collection <- trajectory("collection") |>
  seize("collector", amount = 1) |>
  timeout(function() rnorm(1, 15)) |>
  set_attribute("collected", function() rnorm(1, 15)) |>
  release("collector", amount = 1)

handling <- trajectory("handling") |>
  seize("handler", amount = 1) |>
  timeout(function() rnorm(1, 5)) |>
  set_attribute("handled", function() rnorm(1, 5)) |>
  release("handler", amount = 1)

# Main trajectory combining all activities
main_trajectory <- trajectory("main trajectory") |>
  join(generation) |>
  join(collection) |>
  join(handling)

# Add resources and generator
env |>
  add_resource("generator", capacity = 10) |>
  add_resource("collector", capacity = 5) |>
  add_resource("handler", capacity = 2) |>
  add_generator("some waste", main_trajectory, function() rexp(1, rate = 1))

# Run the simulation
env |>
  run(100) |> 
  get_mon_attributes()

  # Extract the monitored data
attributes <- get_mon_attributes(env)
waste_flow <- attributes |>
  filter(name == "some waste") |>
  group_by(replication) |>
  summarize(
    total_generated = max(generated, na.rm = TRUE),
    total_collected = max(collected, na.rm = TRUE),
    total_handled = max(handled, na.rm = TRUE)
  )

# Display the dataframe
print(waste_flow)


```

# Test Framework 5

```{r}

# Initialize the simulation environment
env <- simmer("Enhanced Waste Management")

# Define regions and their waste generation characteristics
regions <- data.frame(
  name = c("Region1", "Region2"),
  waste_type = c("Organic", "Plastic"),
  gen_rate = c(1, 0.8),  # Waste generation rates
  col_rate = c(0.9, 0.7), # Collection rates
  han_rate = c(0.5, 0.3)  # Handling rates
)

# Create an empty dataframe to store results
results <- data.frame(time = numeric(), region = character(), type = character(), event = character(), stringsAsFactors = FALSE)

# Initialize resources
env |>
  add_resource("generator", capacity = 10) |>
  add_resource("collector", capacity = 5) |>
  add_resource("handler", capacity = 2)

# Define the trajectory function
waste_trajectory <- function(region, waste_type, gen_rate, col_rate, han_rate) {
  trajectory(paste("manage", waste_type, "in", region)) |>
    seize("generator", 1) |>
    timeout(function() rnorm(1, mean = 15)) |>
    release("generator", 1) |>
    log_("generated") |>
    seize("collector", 1) |>
    timeout(function() rnorm(1, mean = 20)) |>
    release("collector", 1) |>
    log_("collected") |>
    seize("handler", 1) |>
    timeout(function() rnorm(1, mean = 5)) |>
    release("handler", 1) |>
    log_("handled")
    
}

# Add generators for each region and waste type
for (i in seq_along(regions$name)) {
  region <- regions$name[i]
  waste_type <- regions$waste_type[i]
  gen_rate <- regions$gen_rate[i]
  col_rate <- regions$col_rate[i]
  han_rate <- regions$han_rate[i]

  env |>
    add_generator(paste(region, waste_type, "waste generator"),
                  waste_trajectory(region, waste_type, gen_rate, col_rate, han_rate),
                  function() rexp(1, rate = gen_rate))
}

# Run the simulation
env |> 
  run(100) |> 
  now()

# Output the results
#print(results)

```

# Test Framework 6 - WORKS

```{r}

# Define the trajectory for waste flow
waste_trajectory <- trajectory("waste management process") |>
  log_("starting...") |> 
  # Waste generation stage
  seize("generator", 1) |>
  set_attribute("amount_generated", function() rnorm(1, mean = 10, sd = 1)) |>
  # log_("generating...") |>
  timeout(function() rnorm(1, mean = 3, sd = 1)) |>
  release("generator", 1) |>
  # log_("generated.") |>
  # Waste collection stage
  seize("collector", 1) |>
  set_attribute("amount_collected", function() rnorm(1, mean = 7, sd = 1.5)) |>
  # log_("collecting...") |>
  timeout(function() rnorm(1, mean = 10, sd = 2)) |>
  release("collector", 1) |>
  # log_("collected.") |>
  # Waste handling stage
  seize("handling facility", 1) |>
  set_attribute("amount_handled", function() rnorm(1, mean = 5, sd = 1)) |>
  # log_("handling...") |>
  timeout(function() rnorm(1, mean = 7, sd = 1.5)) |>
  release("handling facility", 1) |> 
  # log_("handled.") |>
  # log_(function() paste0("Current simulation time: ", now(env))) |> 
  log_(function() paste0("Generated: ", get_attribute(env, "amount_generated"))) |> 
  log_(function() paste0("Collected: ", get_attribute(env, "amount_collected"))) |>
  log_(function() paste0("Handled: ", get_attribute(env, "amount_handled"))) |>
  log_("completed.")

# Set up the simulation environment
env <- simmer("Waste Management Simulation")

# Add resources with their capacities-
env |>
  add_resource("generator", capacity = 1, mon = T) |>
  add_resource("collector", capacity = 2, mon = T) |>
  add_resource("handling facility", capacity = 3, mon = T)

# Add a generator for waste generation
# Assuming waste is generated every day of the year
env |>
  add_generator("waste", waste_trajectory, function() rexp(1, 1/24)) # exponential distribution with mean inter-arrival time of 24 hours

# Run the simulation for a year (365 days)
# Convert days to hours since our time unit in this example is hours
env |>
  run(until = 365 * 24) |> 
  now()

get_palette <- scales::brewer_pal(type = "qual", palette = 1)
plot(waste_trajectory, fill = get_palette)

resources <- get_mon_resources(env)
plot(resources, metric = "utilization")

plot(resources, metric = "usage", c("generator", "collector", "handling facility"), items = "server")

plot(get_mon_resources(env), metric = "usage", "generator", items = "server", steps = TRUE)
plot(get_mon_resources(env), metric = "usage", "collector", items = "server", steps = TRUE)
plot(get_mon_resources(env), metric = "usage", "handling facility", items = "server", steps = TRUE)

arrivals <- get_mon_arrivals(env)
plot(arrivals, metric = "flow_time")
plot(arrivals, metric = "activity_time")
plot(arrivals, metric = "waiting_time")

```

# Test Framework 7 - WORKS

```{r}

# Initialize the simulation environment
env <- simmer("Waste Flow Simulation")

# Define global attributes for tracking total waste
env |>
  add_global("total_waste_generated", 0) |>
  add_global("total_waste_collected", 0) |>
  add_global("total_waste_handled", 0)

# Define resources
env <- env |>
  add_resource("storage", capacity = Inf) |>
  add_resource("collection_truck", capacity = 1) |>
  add_resource("waste_processor", capacity = 1)

# Define the trajectory for generating waste
generate_waste <- trajectory("Generate Waste") |>
  seize("storage", 1) |>
  set_global("total_waste_generated", function() get_global(env, "total_waste_generated") + runif(1, 10, 50)) |>
  log_(function() paste("Waste generated:", get_global(env, "total_waste_generated"), "kg")) |>
  timeout(function() rexp(1, rate = 0.5)) |>
  release("storage", 1)

# Define the trajectory for collecting waste from storage
collect_waste <- trajectory("Collect Waste") |>
  seize("collection_truck") |>
  seize("storage", 1) |>
  set_global("total_waste_collected", function() get_global(env, "total_waste_collected") + runif(1, 5, 25)) |>
  log_(function() paste("Waste collected:", get_global(env, "total_waste_collected"), "kg")) |>
  timeout(function() rexp(1, rate = 1)) |>
  release("storage", 1) |>
  release("collection_truck")

# Define the trajectory for handling waste
handle_waste <- trajectory("Handle Waste") |>
  seize("collection_truck") |>
  seize("waste_processor") |>
  set_global("total_waste_handled", function() get_global(env, "total_waste_handled") + runif(1, 2, 15)) |>
  log_(function() paste("Waste handled:", get_global(env, "total_waste_handled"), "kg")) |>
  timeout(function() rexp(1, rate = 0.7)) |>
  release("waste_processor") |>
  release("collection_truck")

# Add generators for the trajectories
env <- env |>
  add_generator("waste_gen", generate_waste, function() rexp(1, rate = 0.5)) |>
  add_generator("waste_collector", collect_waste, function() rexp(1, rate = 1.5)) |>
  add_generator("waste_handler", handle_waste, function() rexp(1, rate = 1))

# Run the simulation
env |>
  run(until = 100)

# Display results
get_mon_arrivals(env)
get_mon_resources(env)

# Print final amounts of waste generated, collected, and handled
# As the variables are global now we can access them directly
cat("Total waste generated (kg):", get_global(env, "total_waste_generated"), "\n")
cat("Total waste collected (kg):", get_global(env, "total_waste_collected"), "\n")
cat("Total waste handled (kg):", get_global(env, "total_waste_handled"), "\n")


```

# Test Framework 8 - WORKS

Waste collecting happens at the first location (Loc1)
Waste handling happens at the second location (Loc2)

We determine this location based on the number of people living in each region.

```{r}

# Initialize the simulation environment
env <- simmer("Waste Flow Simulation")

# Define regions
regions <- c("North", "South", "East", "West")

# Initialize global attributes for each region
for (region in regions) {
  env <- env |>
    add_global(paste0("total_waste_generated_", region), 0) |>
    add_global(paste0("total_waste_collected_", region), 0) |>
    add_global(paste0("total_waste_handled_", region), 0) |>
    add_global(paste0("total_waste_stored_", region), 0) |>
    add_global(paste0("total_waste_recycled_", region), 0)
}

# Define resources and their capacities
storage_capacity <- 10000  # Example storage capacity for each region
storage_cost_per_unit <- 0.5  # Example cost per unit of storage

env <- env |>
  add_resource("storage", capacity = storage_capacity * length(regions)) |>
  add_resource("collection_truck", capacity = length(regions)) |>
  add_resource("waste_processor", capacity = length(regions))

# Function to create trajectories for each region
create_trajectories <- function(region) {
  # Generate Waste Trajectory
  generate_waste <- trajectory(paste("Generate Waste -", region)) |>
    seize("storage", 1) |>
    set_global(paste0("total_waste_generated_", region), function() get_global(env, paste0("total_waste_generated_", region)) + runif(1, 10, 50)) |>
    set_global(paste0("total_waste_stored_", region), function() get_global(env, paste0("total_waste_stored_", region)) + runif(1, 10, 50)) |>
    log_(function() paste("Waste generated in", region, ":", get_global(env, paste0("total_waste_generated_", region)), "kg")) |>
    timeout(function() rexp(1, rate = 0.5)) |>
    release("storage", 1)

  # Collect Waste Trajectory (Loc1)
  collect_waste <- trajectory(paste("Collect Waste -", region)) |>
    seize("collection_truck") |>
    seize("storage", 1) |>
    set_global(paste0("total_waste_collected_", region), function() get_global(env, paste0("total_waste_collected_", region)) + runif(1, 5, 25)) |>
    set_global(paste0("total_waste_stored_", region), function() get_global(env, paste0("total_waste_stored_", region)) - runif(1, 5, 25)) |>
    log_(function() paste("Waste collected in", region, ":", get_global(env, paste0("total_waste_collected_", region)), "kg")) |>
    timeout(function() rexp(1, rate = 1.5)) |>
    release("storage", 1) |>
    release("collection_truck")

  # Handle Waste Trajectory (Loc2)
  handle_waste <- trajectory(paste("Handle Waste -", region)) |>
    seize("collection_truck") |>
    seize("waste_processor") |>
    set_global(paste0("total_waste_handled_", region), function() get_global(env, paste0("total_waste_handled_", region)) + runif(1, 2, 15)) |>
    set_global(paste0("total_waste_recycled_", region), function() get_global(env, paste0("total_waste_recycled_", region)) + runif(1, 1, 7)) |>
    log_(function() paste("Waste handled in", region, ":", get_global(env, paste0("total_waste_handled_", region)), "kg")) |>
    log_(function() paste("Waste recycled in", region, ":", get_global(env, paste0("total_waste_recycled_", region)), "kg")) |>
    timeout(function() rexp(1, rate = 0.7)) |>
    release("waste_processor") |>
    release("collection_truck")

  return(list(generate_waste = generate_waste, collect_waste = collect_waste, handle_waste = handle_waste))
}

# Add trajectories and generators for each region
for (region in regions) {
  trajs <- create_trajectories(region)
  env <- env |>
    add_generator(paste0("waste_gen_", region), trajs$generate_waste, function() rexp(1, rate = 0.5)) |>
    add_generator(paste0("waste_collector_", region), trajs$collect_waste, function() rexp(1, rate = 1.5)) |>
    add_generator(paste0("waste_handler_", region), trajs$handle_waste, function() rexp(1, rate = 1))
}

# Run the simulation
env |>
  run(until = 100) 

# Display results
get_mon_arrivals(env)
get_mon_resources(env)

# Print the rates of generation, collection, and processing
cat("Rates of waste generation, collection, and processing:\n")
cat("Generation rate: 0.5 per time unit\n")
cat("Collection rate: 1.5 per time unit\n")
cat("Processing rate: 1 per time unit\n\n")

# Print final amounts of waste generated, collected, handled, stored, and recycled per region
for (region in regions) {
  cat("Region:", region, "\n")
  cat("  Total waste generated (kg):", get_global(env, paste0("total_waste_generated_", region)), "\n")
  cat("  Total waste collected (kg):", get_global(env, paste0("total_waste_collected_", region)), "\n")
  cat("  Total waste handled (kg):", get_global(env, paste0("total_waste_handled_", region)), "\n")
  cat("  Total waste stored (kg):", get_global(env, paste0("total_waste_stored_", region)), "\n")
  cat("  Total waste recycled (kg):", get_global(env, paste0("total_waste_recycled_", region)), "\n")
  cat("\n")
}

# Print storage details
cat("Storage Details:\n")
cat("Storage capacity per region:", storage_capacity, "kg\n")
cat("Cost per unit of storage:", storage_cost_per_unit, "\n")
cat("Total storage cost for all regions (current stored waste):\n")

total_storage_cost <- 0
for (region in regions) {
  total_storage_cost <- total_storage_cost + get_global(env, paste0("total_waste_stored_", region)) * storage_cost_per_unit
}
cat("Total storage cost:", total_storage_cost, "\n")

```

# Test Framework 9 - WORKS

testing out when the storage is being overflowed/being over the capacity/trying to store more than the capacity

trying to increase the storage size during the simulation


```{r}

# Initialize the simulation environment
env <- simmer("Waste Flow Simulation")

# Define regions
regions <- c("North", "South", "East", "West")

# Initialize global attributes for each region
for (region in regions) {
  env <- env |>
    add_global(paste0("total_waste_generated_", region), 0) |>
    add_global(paste0("total_waste_collected_", region), 0) |>
    add_global(paste0("total_waste_handled_", region), 0) |>
    add_global(paste0("total_waste_stored_", region), 0) |>
    add_global(paste0("total_waste_recycled_", region), 0) |>
    add_global(paste0("overflow_penalty_", region), 0) # Penalty for overflow
}

# Define resources and their capacities
storage_capacity <- 500  # Example storage capacity for each region
storage_cost_per_unit <- 0.5  # Example cost per unit of storage
overflow_penalty_per_unit <- 2  # Penalty cost per unit of overflow

env <- env |>
  add_resource("storage", capacity = storage_capacity * length(regions)) |>
  add_resource("collection_truck", capacity = length(regions)) |>
  add_resource("waste_processor", capacity = length(regions))

# Function to handle storage overflow
handle_overflow <- function(region, waste_amount) {
  current_storage <- get_global(env, paste0("total_waste_stored_", region))
  new_storage <- current_storage + waste_amount
  overflow_penalty <- 0
  if (new_storage > storage_capacity) {
    overflow_amount <- new_storage - storage_capacity
    overflow_penalty <- overflow_amount * overflow_penalty_per_unit
    new_storage <- storage_capacity
  }
  list(new_storage = new_storage, overflow_penalty = overflow_penalty)
}

# Function to create trajectories for each region
create_trajectories <- function(region) {
  # Generate Waste Trajectory
  generate_waste <- trajectory(paste("Generate Waste -", region)) |>
    seize("storage", 1) |>
    set_attribute("waste_amount", function() runif(1, 10, 50)) |>
    set_global(paste0("total_waste_generated_", region), function() {
      get_global(env, paste0("total_waste_generated_", region)) + get_attribute(env, "waste_amount")
    }) |>
    set_global(paste0("overflow_penalty_", region), function() {
      waste_amount <- get_attribute(env, "waste_amount")
      result <- handle_overflow(region, waste_amount)
      get_global(env, paste0("overflow_penalty_", region)) + result$overflow_penalty
    }) |>
    set_global(paste0("total_waste_stored_", region), function() {
      waste_amount <- get_attribute(env, "waste_amount")
      result <- handle_overflow(region, waste_amount)
      result$new_storage
    }) |>
    log_(function() paste("Waste generated in", region, ":", get_global(env, paste0("total_waste_generated_", region)), "kg")) |>
    timeout(function() rexp(1, rate = 0.5)) |>
    release("storage", 1)

  # Collect Waste Trajectory (Loc1)
  collect_waste <- trajectory(paste("Collect Waste -", region)) |>
    seize("collection_truck") |>
    seize("storage", 1) |>
    set_attribute("waste_amount", function() runif(1, 5, 25)) |>
    set_global(paste0("total_waste_collected_", region), function() {
      get_global(env, paste0("total_waste_collected_", region)) + get_attribute(env, "waste_amount")
    }) |>
    set_global(paste0("total_waste_stored_", region), function() {
      current_storage <- get_global(env, paste0("total_waste_stored_", region))
      waste_amount <- get_attribute(env, "waste_amount")
      max(current_storage - waste_amount, 0)
    }) |>
    log_(function() paste("Waste collected in", region, ":", get_global(env, paste0("total_waste_collected_", region)), "kg")) |>
    timeout(function() rexp(1, rate = 1.5)) |>
    release("storage", 1) |>
    release("collection_truck")

  # Handle Waste Trajectory (Loc2)
  handle_waste <- trajectory(paste("Handle Waste -", region)) |>
    seize("collection_truck") |>
    seize("waste_processor") |>
    set_attribute("waste_amount", function() runif(1, 2, 15)) |>
    set_global(paste0("total_waste_handled_", region), function() {
      get_global(env, paste0("total_waste_handled_", region)) + get_attribute(env, "waste_amount")
    }) |>
    set_global(paste0("total_waste_recycled_", region), function() {
      recycled_amount <- runif(1, 1, 7)
      get_global(env, paste0("total_waste_recycled_", region)) + recycled_amount
    }) |>
    log_(function() paste("Waste handled in", region, ":", get_global(env, paste0("total_waste_handled_", region)), "kg")) |>
    log_(function() paste("Waste recycled in", region, ":", get_global(env, paste0("total_waste_recycled_", region)), "kg")) |>
    timeout(function() rexp(1, rate = 0.7)) |>
    release("waste_processor") |>
    release("collection_truck")

  return(list(generate_waste = generate_waste, collect_waste = collect_waste, handle_waste = handle_waste))
}

# Add trajectories and generators for each region
trajectories <- list()
for (region in regions) {
  trajs <- create_trajectories(region)
  trajectories[[region]] <- trajs
  env <- env |>
    add_generator(paste0("waste_gen_", region), trajs$generate_waste, function() rexp(1, rate = 0.5)) |>
    add_generator(paste0("waste_collector_", region), trajs$collect_waste, function() rexp(1, rate = 1.5)) |>
    add_generator(paste0("waste_handler_", region), trajs$handle_waste, function() rexp(1, rate = 1))
}

# Run the simulation
env <- env |>
  run(until = 100)

# Display results
arrivals <- get_mon_arrivals(env)
resources <- get_mon_resources(env)

# Print the rates of generation, collection, and processing
cat("Rates of waste generation, collection, and processing:\n")
cat("Generation rate: 0.5 per time unit\n")
cat("Collection rate: 1.5 per time unit\n")
cat("Processing rate: 1 per time unit\n\n")

# Print final amounts of waste generated, collected, handled, stored, and recycled per region
for (region in regions) {
  cat("Region:", region, "\n")
  cat("  Total waste generated (kg):", get_global(env, paste0("total_waste_generated_", region)), "\n")
  cat("  Total waste collected (kg):", get_global(env, paste0("total_waste_collected_", region)), "\n")
  cat("  Total waste handled (kg):", get_global(env, paste0("total_waste_handled_", region)), "\n")
  cat("  Total waste stored (kg):", get_global(env, paste0("total_waste_stored_", region)), "\n")
  cat("  Total waste recycled (kg):", get_global(env, paste0("total_waste_recycled_", region)), "\n")
  cat("  Overflow penalty:", get_global(env, paste0("overflow_penalty_", region)), "\n")
  cat("\n")
}

# Print storage details
cat("Storage Details:\n")
cat("Storage capacity per region:", storage_capacity, "kg\n")
cat("Cost per unit of storage:", storage_cost_per_unit, "\n")
cat("Total storage cost for all regions (current stored waste):\n")

total_storage_cost <- 0
for (region in regions) {
  total_storage_cost <- total_storage_cost + get_global(env, paste0("total_waste_stored_", region)) * storage_cost_per_unit
}
cat("Total storage cost:", total_storage_cost, "\n")

# Define color palette
# get_palette <- scales::brewer_pal(type = "qual", palette = 1)

# Plotting
# for (region in regions) {
#   print(plot(trajectories[[region]]$generate_waste, fill = get_palette))
#   print(plot(trajectories[[region]]$collect_waste, fill = get_palette))
#   print(plot(trajectories[[region]]$handle_waste, fill = get_palette))
# }


```

# Test Framework 10 - WORKS

added wood waste types and plotting

```{r}

# Initialize the simulation environment
env <- simmer("Wood Waste Flow Simulation")

# Define regions
regions <- c("North", "South", "East", "West")

# Define wood waste types
wood_waste_types <- c("Construction", "Demolition", "Packaging")

# Initialize global attributes for each region and wood waste type
for (region in regions) {
  for (waste_type in wood_waste_types) {
    env <- env |>
      add_global(paste0("total_waste_generated_", region, "_", waste_type), 0) |>
      add_global(paste0("total_waste_collected_", region, "_", waste_type), 0) |>
      add_global(paste0("total_waste_handled_", region, "_", waste_type), 0) |>
      add_global(paste0("total_waste_stored_", region, "_", waste_type), 0) |>
      add_global(paste0("total_waste_recycled_", region, "_", waste_type), 0) |>
      add_global(paste0("overflow_penalty_", region, "_", waste_type), 0) # Penalty for overflow
  }
}

# Define resources and their capacities
storage_capacity <- 700  # Example storage capacity for each region
storage_cost_per_unit <- 0.5  # Example cost per unit of storage
overflow_penalty_per_unit <- 2  # Penalty cost per unit of overflow

env <- env |>
  add_resource("storage", capacity = storage_capacity * length(regions) * length(wood_waste_types)) |>
  add_resource("collection_truck", capacity = length(regions)) |>
  add_resource("waste_processor", capacity = length(regions))

# Function to handle storage overflow
handle_overflow <- function(region, waste_type, waste_amount) {
  current_storage <- get_global(env, paste0("total_waste_stored_", region, "_", waste_type))
  new_storage <- current_storage + waste_amount
  overflow_penalty <- 0
  if (new_storage > storage_capacity) {
    overflow_amount <- new_storage - storage_capacity
    overflow_penalty <- overflow_amount * overflow_penalty_per_unit
    new_storage <- storage_capacity
  }
  list(new_storage = new_storage, overflow_penalty = overflow_penalty)
}

# Function to create trajectories for each region
create_trajectories <- function(region, waste_type) {
  # Generate Waste Trajectory
  generate_waste <- trajectory(paste("Generate Waste -", region, "-", waste_type)) |>
    seize("storage", 1) |>
    set_attribute("waste_amount", function() runif(1, 10, 30)) |>
    set_global(paste0("total_waste_generated_", region, "_", waste_type), function() {
      get_global(env, paste0("total_waste_generated_", region, "_", waste_type)) + get_attribute(env, "waste_amount")
    }) |>
    set_global(paste0("overflow_penalty_", region, "_", waste_type), function() {
      waste_amount <- get_attribute(env, "waste_amount")
      result <- handle_overflow(region, waste_type, waste_amount)
      get_global(env, paste0("overflow_penalty_", region, "_", waste_type)) + result$overflow_penalty
    }) |>
    set_global(paste0("total_waste_stored_", region, "_", waste_type), function() {
      waste_amount <- get_attribute(env, "waste_amount")
      result <- handle_overflow(region, waste_type, waste_amount)
      result$new_storage
    }) |>
    log_(function() paste("Waste generated in", region, "(", waste_type, "):", get_global(env, paste0("total_waste_generated_", region, "_", waste_type)), "kg")) |>
    timeout(function() rexp(1, rate = 0.5)) |>
    release("storage", 1)

  # Collect Waste Trajectory (Loc1)
  collect_waste <- trajectory(paste("Collect Waste -", region, "-", waste_type)) |>
    seize("collection_truck") |>
    seize("storage", 1) |>
    set_attribute("waste_amount", function() runif(1, 5, 25)) |>
    set_global(paste0("total_waste_collected_", region, "_", waste_type), function() {
      get_global(env, paste0("total_waste_collected_", region, "_", waste_type)) + get_attribute(env, "waste_amount")
    }) |>
    set_global(paste0("total_waste_stored_", region, "_", waste_type), function() {
      current_storage <- get_global(env, paste0("total_waste_stored_", region, "_", waste_type))
      waste_amount <- get_attribute(env, "waste_amount")
      max(current_storage - waste_amount, 0)
    }) |>
    log_(function() paste("Waste collected in", region, "(", waste_type, "):", get_global(env, paste0("total_waste_collected_", region, "_", waste_type)), "kg")) |>
    timeout(function() rexp(1, rate = 1.5)) |>
    release("storage", 1) |>
    release("collection_truck")

  # Handle Waste Trajectory (Loc2)
  handle_waste <- trajectory(paste("Handle Waste -", region, "-", waste_type)) |>
    seize("collection_truck") |>
    seize("waste_processor") |>
    set_attribute("waste_amount", function() runif(1, 2, 15)) |>
    set_global(paste0("total_waste_handled_", region, "_", waste_type), function() {
      get_global(env, paste0("total_waste_handled_", region, "_", waste_type)) + get_attribute(env, "waste_amount")
    }) |>
    set_global(paste0("total_waste_recycled_", region, "_", waste_type), function() {
      recycled_amount <- runif(1, 1, 7)
      get_global(env, paste0("total_waste_recycled_", region, "_", waste_type)) + recycled_amount
    }) |>
    log_(function() paste("Waste handled in", region, "(", waste_type, "):", get_global(env, paste0("total_waste_handled_", region, "_", waste_type)), "kg")) |>
    log_(function() paste("Waste recycled in", region, "(", waste_type, "):", get_global(env, paste0("total_waste_recycled_", region, "_", waste_type)), "kg")) |>
    timeout(function() rexp(1, rate = 0.7)) |>
    release("waste_processor") |>
    release("collection_truck")

  return(list(generate_waste = generate_waste, collect_waste = collect_waste, handle_waste = handle_waste))
}

# Add trajectories and generators for each region and wood waste type
trajectories <- list()
for (region in regions) {
  for (waste_type in wood_waste_types) {
    trajs <- create_trajectories(region, waste_type)
    trajectories[[paste(region, waste_type, sep = "_")]] <- trajs
    env <- env |>
      add_generator(paste0("waste_gen_", region, "_", waste_type), trajs$generate_waste, function() rexp(1, rate = 0.5)) |>
      add_generator(paste0("waste_collector_", region, "_", waste_type), trajs$collect_waste, function() rexp(1, rate = 1.5)) |>
      add_generator(paste0("waste_handler_", region, "_", waste_type), trajs$handle_waste, function() rexp(1, rate = 1))
  }
}

# Run the simulation
env <- env |>
  run(until = 100)

# Display results
arrivals <- get_mon_arrivals(env)
resources <- get_mon_resources(env)

# Print the rates of generation, collection, and processing
cat("Rates of waste generation, collection, and processing:\n")
cat("Generation rate: 0.5 per time unit\n")
cat("Collection rate: 1.5 per time unit\n")
cat("Processing rate: 1 per time unit\n\n")

# Print final amounts of waste generated, collected, handled, stored, and recycled per region and wood waste type
for (region in regions) {
  for (waste_type in wood_waste_types) {
    cat("Region:", region, "Waste Type:", waste_type, "\n")
    cat("  Total waste generated (kg):", get_global(env, paste0("total_waste_generated_", region, "_", waste_type)), "\n")
    cat("  Total waste collected (kg):", get_global(env, paste0("total_waste_collected_", region, "_", waste_type)), "\n")
    cat("  Total waste handled (kg):", get_global(env, paste0("total_waste_handled_", region, "_", waste_type)), "\n")
    cat("  Total waste stored (kg):", get_global(env, paste0("total_waste_stored_", region, "_", waste_type)), "\n")
    cat("  Total waste recycled (kg):", get_global(env, paste0("total_waste_recycled_", region, "_", waste_type)), "\n")
    cat("  Overflow penalty:", get_global(env, paste0("overflow_penalty_", region, "_", waste_type)), "\n")
    cat("\n")
  }
}

# Print storage details
cat("Storage Details:\n")
cat("Storage capacity per region and waste type:", storage_capacity, "kg\n")
cat("Cost per unit of storage:", storage_cost_per_unit, "\n")
cat("Total storage cost for all regions and waste types (current stored waste):\n")

total_storage_cost <- 0
for (region in regions) {
  for (waste_type in wood_waste_types) {
    total_storage_cost <- total_storage_cost + get_global(env, paste0("total_waste_stored_", region, "_", waste_type)) * storage_cost_per_unit
  }
}
cat("Total storage cost:", total_storage_cost, "\n")

# Manually extract global attributes
metrics <- c("Generated", "Collected", "Handled", "Stored", "Recycled", "Overflow Penalty")
waste_data_list <- list()

for (region in regions) {
  for (waste_type in wood_waste_types) {
    waste_data_list <- c(waste_data_list,
                         list(data.frame(
                           Region = region,
                           # Waste_Type = waste_type,
                           Metric = metrics[1],
                           Value = get_global(env, paste0("total_waste_generated_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           # Waste_Type = waste_type,
                           Metric = metrics[2],
                           Value = get_global(env, paste0("total_waste_collected_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           # Waste_Type = waste_type,
                           Metric = metrics[3],
                           Value = get_global(env, paste0("total_waste_handled_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           # Waste_Type = waste_type,
                           Metric = metrics[4],
                           Value = get_global(env, paste0("total_waste_stored_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           # Waste_Type = waste_type,
                           Metric = metrics[5],
                           Value = get_global(env, paste0("total_waste_recycled_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           # Waste_Type = waste_type,
                           Metric = metrics[6],
                           Value = get_global(env, paste0("overflow_penalty_", region, "_", waste_type))
                         ))
    )
  }
}

waste_data <- do.call(rbind, waste_data_list)
# Define the color palette
color_palette <- "Paired"  # You can choose a different palette from ColorBrewer

# Plotting
ggplot(waste_data, aes(x = Region, y = Value, fill = Metric)) +
  geom_bar(stat = "identity", position = "dodge") +
  # labs(title = "Wood Waste Management Metrics by Region and Waste Type", x = "Region", y = "Value (kg or penalty units)") +
  labs(title = "Wood Waste Management Metrics by Region", x = "Region", y = "Value (kg or penalty units)") +
  # facet_wrap(~ Waste_Type) +  # Separate plots for each waste type
  theme_minimal() +
  scale_fill_brewer(palette = color_palette) +
  geom_hline(yintercept = 500, linetype = "dashed", color = "red")

# Get the colors from the vapoRwave palette
  vaporwave_colors <- paletteer_d("vapoRwave::vapoRwave")
  
  # Define custom colors with specific colors for "Stored" and "Overflow Penalty"
  custom_colors <- c(
    "Generated" = vaporwave_colors[1],
    "Collected" = vaporwave_colors[2],
    "Handled" = vaporwave_colors[3],
    "Stored" = vaporwave_colors[11],
    "Recycled" = vaporwave_colors[8],
    "Overflow Penalty" = vaporwave_colors[5]  
  )
  
  # Plotting
  ggplot(waste_data, aes(x = Region, y = Value, fill = Metric)) +
    geom_bar(stat = "identity", position = "dodge") +
    labs(title = "Wood Waste Management Metrics by Region", x = "Region", y = "Value (kg or penalty units)") +
    theme_minimal() +
    scale_fill_manual(values = custom_colors) +  # Use custom colors
    geom_hline(yintercept = 700, linetype = "dashed", color = "red")



```

# Test Framework 11 - WORKS

establish communication between the agents (in our case between trajectories)

```{r}

# Initialize the simulation environment
env <- simmer("Wood Waste Flow Simulation")

# Define regions
regions <- c("North", "South", "East", "West")

# Define wood waste types
wood_waste_types <- c("Construction", "Demolition", "Packaging")

# Cost parameters
storage_cost_per_unit <- 0.5  # Cost per unit of storage
collection_cost_per_unit <- 1  # Cost per unit of collection
processing_cost_per_unit <- 2  # Cost per unit of processing
transportation_cost_per_unit <- 0.3  # Cost per unit of transportation
recycling_revenue_per_unit <- 3  # Revenue per unit of recycling
avoided_disposal_cost_per_unit <- 1  # Avoided disposal cost per unit of recycling

# Initialize global attributes for each region and wood waste type
for (region in regions) {
  for (waste_type in wood_waste_types) {
    env <- env |>
      add_global(paste0("total_waste_generated_", region, "_", waste_type), 0) |>
      add_global(paste0("total_waste_collected_", region, "_", waste_type), 0) |>
      add_global(paste0("total_waste_handled_", region, "_", waste_type), 0) |>
      add_global(paste0("total_waste_stored_", region, "_", waste_type), 0) |>
      add_global(paste0("total_waste_recycled_", region, "_", waste_type), 0) |>
      add_global(paste0("overflow_penalty_", region, "_", waste_type), 0) |>
      add_global(paste0("waste_to_collect_", region, "_", waste_type), 0) |>
      add_global(paste0("total_storage_cost_", region, "_", waste_type), 0) |>
      add_global(paste0("total_collection_cost_", region, "_", waste_type), 0) |>
      add_global(paste0("total_processing_cost_", region, "_", waste_type), 0) |>
      add_global(paste0("total_transportation_cost_", region, "_", waste_type), 0) |>
      add_global(paste0("total_recycling_revenue_", region, "_", waste_type), 0) |>
      add_global(paste0("total_avoided_disposal_cost_", region, "_", waste_type), 0)
  }
}

# Define resources and their capacities
storage_capacity <- 700  # Example storage capacity for each region
overflow_penalty_per_unit <- 2  # Penalty cost per unit of overflow

env <- env |>
  add_resource("storage", capacity = storage_capacity * length(regions) * length(wood_waste_types)) |>
  add_resource("collection_truck", capacity = length(regions)) |>
  add_resource("waste_processor", capacity = length(regions))

# Function to handle storage overflow
handle_overflow <- function(region, waste_type, waste_amount) {
  current_storage <- get_global(env, paste0("total_waste_stored_", region, "_", waste_type))
  new_storage <- current_storage + waste_amount
  overflow_penalty <- 0
  if (new_storage > storage_capacity) {
    overflow_amount <- new_storage - storage_capacity
    overflow_penalty <- overflow_amount * overflow_penalty_per_unit
    new_storage <- storage_capacity
  }
  list(new_storage = new_storage, overflow_penalty = overflow_penalty)
}

# Function to create trajectories for each region
create_trajectories <- function(region, waste_type) {
  # Generate Waste Trajectory
  generate_waste <- trajectory(paste("Generate Waste -", region, "-", waste_type)) |>
    seize("storage", 1) |>
    set_attribute("waste_amount", function() runif(1, 10, 30)) |>
    set_global(paste0("total_waste_generated_", region, "_", waste_type), function() {
      waste_generated <- get_attribute(env, "waste_amount")
      get_global(env, paste0("total_waste_generated_", region, "_", waste_type)) + waste_generated
    }) |>
    set_global(paste0("waste_to_collect_", region, "_", waste_type), function() {
      waste_generated <- get_attribute(env, "waste_amount")
      get_global(env, paste0("waste_to_collect_", region, "_", waste_type)) + waste_generated
    }) |>
    set_global(paste0("overflow_penalty_", region, "_", waste_type), function() {
      waste_amount <- get_attribute(env, "waste_amount")
      result <- handle_overflow(region, waste_type, waste_amount)
      get_global(env, paste0("overflow_penalty_", region, "_", waste_type)) + result$overflow_penalty
    }) |>
    set_global(paste0("total_waste_stored_", region, "_", waste_type), function() {
      waste_amount <- get_attribute(env, "waste_amount")
      result <- handle_overflow(region, waste_type, waste_amount)
      result$new_storage
    }) |>
    set_global(paste0("total_storage_cost_", region, "_", waste_type), function() {
      waste_amount <- get_attribute(env, "waste_amount")
      get_global(env, paste0("total_storage_cost_", region, "_", waste_type)) + waste_amount * storage_cost_per_unit
    }) |>
    log_(function() paste("Waste generated in", region, "(", waste_type, "):", get_global(env, paste0("total_waste_generated_", region, "_", waste_type)), "kg")) |>
    timeout(function() rexp(1, rate = 0.5)) |>
    release("storage", 1)

  # Collect Waste Trajectory (Loc1)
  collect_waste <- trajectory(paste("Collect Waste -", region, "-", waste_type)) |>
    seize("collection_truck") |>
    seize("storage", 1) |>
    set_attribute("waste_amount", function() {
      waste_to_collect <- get_global(env, paste0("waste_to_collect_", region, "_", waste_type))
      waste_amount <- ifelse(waste_to_collect > 0, runif(1, 5, min(25, waste_to_collect)), 0)
      waste_amount
    }) |>
    set_global(paste0("waste_to_collect_", region, "_", waste_type), function() {
      waste_to_collect <- get_global(env, paste0("waste_to_collect_", region, "_", waste_type))
      waste_amount <- get_attribute(env, "waste_amount")
      waste_to_collect - waste_amount
    }) |>
    set_global(paste0("total_waste_collected_", region, "_", waste_type), function() {
      get_global(env, paste0("total_waste_collected_", region, "_", waste_type)) + get_attribute(env, "waste_amount")
    }) |>
    set_global(paste0("total_collection_cost_", region, "_", waste_type), function() {
      waste_amount <- get_attribute(env, "waste_amount")
      get_global(env, paste0("total_collection_cost_", region, "_", waste_type)) + waste_amount * collection_cost_per_unit
    }) |>
    set_global(paste0("total_transportation_cost_", region, "_", waste_type), function() {
      waste_amount <- get_attribute(env, "waste_amount")
      get_global(env, paste0("total_transportation_cost_", region, "_", waste_type)) + waste_amount * transportation_cost_per_unit
    }) |>
    set_global(paste0("total_waste_stored_", region, "_", waste_type), function() {
      current_storage <- get_global(env, paste0("total_waste_stored_", region, "_", waste_type))
      waste_amount <- get_attribute(env, "waste_amount")
      max(current_storage - waste_amount, 0)
    }) |>
    log_(function() paste("Waste collected in", region, "(", waste_type, "):", get_global(env, paste0("total_waste_collected_", region, "_", waste_type)), "kg")) |>
    timeout(function() rexp(1, rate = 1.5)) |>
    release("storage", 1) |>
    release("collection_truck")

  # Handle Waste Trajectory (Loc2)
  handle_waste <- trajectory(paste("Handle Waste -", region, "-", waste_type)) |>
    seize("collection_truck") |>
    seize("waste_processor") |>
    set_attribute("waste_amount", function() runif(1, 2, 15)) |>
    set_global(paste0("total_waste_handled_", region, "_", waste_type), function() {
      get_global(env, paste0("total_waste_handled_", region, "_", waste_type)) + get_attribute(env, "waste_amount")
    }) |>
    set_global(paste0("total_processing_cost_", region, "_", waste_type), function() {
      waste_amount <- get_attribute(env, "waste_amount")
      get_global(env, paste0("total_processing_cost_", region, "_", waste_type)) + waste_amount * processing_cost_per_unit
    }) |>
    set_global(paste0("total_waste_recycled_", region, "_", waste_type), function() {
      recycled_amount <- runif(1, 1, 7)
      get_global(env, paste0("total_waste_recycled_", region, "_", waste_type)) + recycled_amount
    }) |>
    set_global(paste0("total_recycling_revenue_", region, "_", waste_type), function() {
      recycled_amount <- get_attribute(env, "waste_amount")
      get_global(env, paste0("total_recycling_revenue_", region, "_", waste_type)) + recycled_amount * recycling_revenue_per_unit
    }) |>
    set_global(paste0("total_avoided_disposal_cost_", region, "_", waste_type), function() {
      recycled_amount <- get_attribute(env, "waste_amount")
      get_global(env, paste0("total_avoided_disposal_cost_", region, "_", waste_type)) + recycled_amount * avoided_disposal_cost_per_unit
    }) |>
    log_(function() paste("Waste handled in", region, "(", waste_type, "):", get_global(env, paste0("total_waste_handled_", region, "_", waste_type)), "kg")) |>
    log_(function() paste("Waste recycled in", region, "(", waste_type, "):", get_global(env, paste0("total_waste_recycled_", region, "_", waste_type)), "kg")) |>
    timeout(function() rexp(1, rate = 0.7)) |>
    release("waste_processor") |>
    release("collection_truck")

  return(list(generate_waste = generate_waste, collect_waste = collect_waste, handle_waste = handle_waste))
}

# Add trajectories and generators for each region and wood waste type
trajectories <- list()
for (region in regions) {
  for (waste_type in wood_waste_types) {
    trajs <- create_trajectories(region, waste_type)
    trajectories[[paste(region, waste_type, sep = "_")]] <- trajs
    env <- env |>
      add_generator(paste0("waste_gen_", region, "_", waste_type), trajs$generate_waste, function() rexp(1, rate = 0.5)) |>
      add_generator(paste0("waste_collector_", region, "_", waste_type), trajs$collect_waste, function() rexp(1, rate = 1.5)) |>
      add_generator(paste0("waste_handler_", region, "_", waste_type), trajs$handle_waste, function() rexp(1, rate = 1))
  }
}

# Run the simulation
env <- env |>
  run(until = 100)

# Display results
arrivals <- get_mon_arrivals(env)
resources <- get_mon_resources(env)

# Print the rates of generation, collection, and processing
cat("Rates of waste generation, collection, and processing:\n")
cat("Generation rate: 0.5 per time unit\n")
cat("Collection rate: 1.5 per time unit\n")
cat("Processing rate: 1 per time unit\n\n")

# Print final amounts of waste generated, collected, handled, stored, and recycled per region and wood waste type
for (region in regions) {
  for (waste_type in wood_waste_types) {
    cat("Region:", region, "Waste Type:", waste_type, "\n")
    cat("  Total waste generated (kg):", get_global(env, paste0("total_waste_generated_", region, "_", waste_type)), "\n")
    cat("  Total waste collected (kg):", get_global(env, paste0("total_waste_collected_", region, "_", waste_type)), "\n")
    cat("  Total waste handled (kg):", get_global(env, paste0("total_waste_handled_", region, "_", waste_type)), "\n")
    cat("  Total waste stored (kg):", get_global(env, paste0("total_waste_stored_", region, "_", waste_type)), "\n")
    cat("  Total waste recycled (kg):", get_global(env, paste0("total_waste_recycled_", region, "_", waste_type)), "\n")
    cat("  Overflow penalty:", get_global(env, paste0("overflow_penalty_", region, "_", waste_type)), "\n")
    cat("  Total storage cost:", get_global(env, paste0("total_storage_cost_", region, "_", waste_type)), "\n")
    cat("  Total collection cost:", get_global(env, paste0("total_collection_cost_", region, "_", waste_type)), "\n")
    cat("  Total processing cost:", get_global(env, paste0("total_processing_cost_", region, "_", waste_type)), "\n")
    cat("  Total transportation cost:", get_global(env, paste0("total_transportation_cost_", region, "_", waste_type)), "\n")
    cat("  Total recycling revenue:", get_global(env, paste0("total_recycling_revenue_", region, "_", waste_type)), "\n")
    cat("  Total avoided disposal cost:", get_global(env, paste0("total_avoided_disposal_cost_", region, "_", waste_type)), "\n")
    cat("\n")
  }
}

# Print storage details
cat("Storage Details:\n")
cat("Storage capacity per region and waste type:", storage_capacity, "kg\n")
cat("Cost per unit of storage:", storage_cost_per_unit, "\n")
cat("Total storage cost for all regions and waste types (current stored waste):\n")

total_storage_cost <- 0
for (region in regions) {
  for (waste_type in wood_waste_types) {
    total_storage_cost <- total_storage_cost + get_global(env, paste0("total_waste_stored_", region, "_", waste_type)) * storage_cost_per_unit
  }
}
cat("Total storage cost:", total_storage_cost, "\n")

# Manually extract global attributes
metrics <- c("Generated", "Collected", "Handled", "Stored", "Recycled", "Overflow Penalty", "Storage Cost", "Collection Cost", "Processing Cost", "Transportation Cost", "Recycling Revenue", "Avoided Disposal Cost")
waste_data_list <- list()

for (region in regions) {
  for (waste_type in wood_waste_types) {
    waste_data_list <- c(waste_data_list,
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[1],
                           Value = get_global(env, paste0("total_waste_generated_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[2],
                           Value = get_global(env, paste0("total_waste_collected_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[3],
                           Value = get_global(env, paste0("total_waste_handled_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[4],
                           Value = get_global(env, paste0("total_waste_stored_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[5],
                           Value = get_global(env, paste0("total_waste_recycled_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[6],
                           Value = get_global(env, paste0("overflow_penalty_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[7],
                           Value = get_global(env, paste0("total_storage_cost_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[8],
                           Value = get_global(env, paste0("total_collection_cost_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[9],
                           Value = get_global(env, paste0("total_processing_cost_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[10],
                           Value = get_global(env, paste0("total_transportation_cost_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[11],
                           Value = get_global(env, paste0("total_recycling_revenue_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[12],
                           Value = get_global(env, paste0("total_avoided_disposal_cost_", region, "_", waste_type))
                         ))
    )
  }
}

waste_data <- do.call(rbind, waste_data_list)
# Define the color palette
color_palette <- "Paired"  # You can choose a different palette from ColorBrewer

# Plotting
ggplot(waste_data, aes(x = Region, y = Value, fill = Metric)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Wood Waste Management Metrics by Region and Waste Type", x = "Region", y = "Value (kg or cost units)") +
  facet_wrap(~ Waste_Type) +  # Separate plots for each waste type
  theme_minimal() +
  scale_fill_brewer(palette = color_palette) +
  geom_hline(yintercept = storage_capacity, linetype = "dashed", color = "red")

```

# Test Framework 12 - WORKS

recycling revenue, avoided disposal cost calculations, tracking costs and the properties in the system

```{r}

# Initialize the simulation environment
env <- simmer("Wood Waste Flow Simulation")

# Define regions
regions <- c("North", "South", "East", "West")

# Define wood waste types
wood_waste_types <- c("Construction", "Demolition", "Packaging")

# Cost parameters
storage_cost_per_unit <- 0.5  # Cost per unit of storage
collection_cost_per_unit <- 1  # Cost per unit of collection
processing_cost_per_unit <- 2  # Cost per unit of processing
transportation_cost_per_unit <- 0.3  # Cost per unit of transportation
overflow_penalty_per_unit <- 2  # Penalty cost per unit of overflow
recycling_revenue_per_unit <- 3  # Revenue per unit of recycling
avoided_disposal_cost_per_unit <- 1  # Avoided disposal cost per unit of recycling

# Initialize global attributes for each region and wood waste type
for (region in regions) {
  for (waste_type in wood_waste_types) {
    env <- env |>
      add_global(paste0("total_waste_generated_", region, "_", waste_type), 0) |>
      add_global(paste0("total_waste_collected_", region, "_", waste_type), 0) |>
      add_global(paste0("total_waste_handled_", region, "_", waste_type), 0) |>
      add_global(paste0("total_waste_stored_", region, "_", waste_type), 0) |>
      add_global(paste0("total_waste_recycled_", region, "_", waste_type), 0) |>
      add_global(paste0("overflow_penalty_", region, "_", waste_type), 0) |>
      add_global(paste0("waste_to_collect_", region, "_", waste_type), 0) |>
      add_global(paste0("total_storage_cost_", region, "_", waste_type), 0) |>
      add_global(paste0("total_collection_cost_", region, "_", waste_type), 0) |>
      add_global(paste0("total_processing_cost_", region, "_", waste_type), 0) |>
      add_global(paste0("total_transportation_cost_", region, "_", waste_type), 0) |>
      add_global(paste0("total_recycling_revenue_", region, "_", waste_type), 0) |>
      add_global(paste0("total_avoided_disposal_cost_", region, "_", waste_type), 0)
  }
}

# Define resources and their capacities
storage_capacity <- 700  # Example storage capacity for each region

env <- env |>
  add_resource("storage", capacity = storage_capacity * length(regions) * length(wood_waste_types)) |>
  add_resource("collection_truck", capacity = length(regions)) |>
  add_resource("waste_processor", capacity = length(regions))

# Function to handle storage overflow
handle_overflow <- function(region, waste_type, waste_amount) {
  current_storage <- get_global(env, paste0("total_waste_stored_", region, "_", waste_type))
  new_storage <- current_storage + waste_amount
  overflow_penalty <- 0
  if (new_storage > storage_capacity) {
    overflow_amount <- new_storage - storage_capacity
    overflow_penalty <- overflow_amount * overflow_penalty_per_unit
    new_storage <- storage_capacity
  } else {
    overflow_penalty <- 0
  }
  list(new_storage = new_storage, overflow_penalty = overflow_penalty)
}

# Function to create trajectories for each region
create_trajectories <- function(region, waste_type) {
  # Generate Waste Trajectory
  generate_waste <- trajectory(paste("Generate Waste -", region, "-", waste_type)) |>
    seize("storage", 1) |>
    set_attribute("waste_amount", function() runif(1, 10, 30)) |>
    set_global(paste0("total_waste_generated_", region, "_", waste_type), function() {
      waste_generated <- get_attribute(env, "waste_amount")
      get_global(env, paste0("total_waste_generated_", region, "_", waste_type)) + waste_generated
    }) |>
    set_global(paste0("waste_to_collect_", region, "_", waste_type), function() {
      waste_generated <- get_attribute(env, "waste_amount")
      get_global(env, paste0("waste_to_collect_", region, "_", waste_type)) + waste_generated
    }) |>
    set_global(paste0("overflow_penalty_", region, "_", waste_type), function() {
      waste_amount <- get_attribute(env, "waste_amount")
      result <- handle_overflow(region, waste_type, waste_amount)
      get_global(env, paste0("overflow_penalty_", region, "_", waste_type)) + result$overflow_penalty
    }) |>
    set_global(paste0("total_waste_stored_", region, "_", waste_type), function() {
      waste_amount <- get_attribute(env, "waste_amount")
      result <- handle_overflow(region, waste_type, waste_amount)
      result$new_storage
    }) |>
    set_global(paste0("total_storage_cost_", region, "_", waste_type), function() {
      waste_amount <- get_attribute(env, "waste_amount")
      get_global(env, paste0("total_storage_cost_", region, "_", waste_type)) + waste_amount * storage_cost_per_unit
    }) |>
    log_(function() paste("Waste generated in", region, "(", waste_type, "):", get_global(env, paste0("total_waste_generated_", region, "_", waste_type)), "kg")) |>
    timeout(function() rexp(1, rate = 0.5)) |>
    release("storage", 1)

  # Collect Waste Trajectory (Loc1)
  collect_waste <- trajectory(paste("Collect Waste -", region, "-", waste_type)) |>
    seize("collection_truck") |>
    seize("storage", 1) |>
    set_attribute("waste_amount", function() {
      waste_to_collect <- get_global(env, paste0("waste_to_collect_", region, "_", waste_type))
      waste_amount <- ifelse(waste_to_collect > 0, runif(1, 5, min(25, waste_to_collect)), 0)
      waste_amount
    }) |>
    set_global(paste0("waste_to_collect_", region, "_", waste_type), function() {
      waste_to_collect <- get_global(env, paste0("waste_to_collect_", region, "_", waste_type))
      waste_amount <- get_attribute(env, "waste_amount")
      waste_to_collect - waste_amount
    }) |>
    set_global(paste0("total_waste_collected_", region, "_", waste_type), function() {
      get_global(env, paste0("total_waste_collected_", region, "_", waste_type)) + get_attribute(env, "waste_amount")
    }) |>
    set_global(paste0("total_collection_cost_", region, "_", waste_type), function() {
      waste_amount <- get_attribute(env, "waste_amount")
      get_global(env, paste0("total_collection_cost_", region, "_", waste_type)) + waste_amount * collection_cost_per_unit
    }) |>
    set_global(paste0("total_transportation_cost_", region, "_", waste_type), function() {
      waste_amount <- get_attribute(env, "waste_amount")
      get_global(env, paste0("total_transportation_cost_", region, "_", waste_type)) + waste_amount * transportation_cost_per_unit
    }) |>
    set_global(paste0("total_waste_stored_", region, "_", waste_type), function() {
      current_storage <- get_global(env, paste0("total_waste_stored_", region, "_", waste_type))
      waste_amount <- get_attribute(env, "waste_amount")
      max(current_storage - waste_amount, 0)
    }) |>
    log_(function() paste("Waste collected in", region, "(", waste_type, "):", get_global(env, paste0("total_waste_collected_", region, "_", waste_type)), "kg")) |>
    timeout(function() rexp(1, rate = 1.5)) |>
    release("storage", 1) |>
    release("collection_truck")

  # Handle Waste Trajectory (Loc2)
  handle_waste <- trajectory(paste("Handle Waste -", region, "-", waste_type)) |>
    seize("collection_truck") |>
    seize("waste_processor") |>
    set_attribute("waste_amount", function() runif(1, 2, 15)) |>
    set_global(paste0("total_waste_handled_", region, "_", waste_type), function() {
      get_global(env, paste0("total_waste_handled_", region, "_", waste_type)) + get_attribute(env, "waste_amount")
    }) |>
    set_global(paste0("total_processing_cost_", region, "_", waste_type), function() {
      waste_amount <- get_attribute(env, "waste_amount")
      get_global(env, paste0("total_processing_cost_", region, "_", waste_type)) + waste_amount * processing_cost_per_unit
    }) |>
    set_global(paste0("total_waste_recycled_", region, "_", waste_type), function() {
      recycled_amount <- runif(1, 1, 7)
      get_global(env, paste0("total_waste_recycled_", region, "_", waste_type)) + recycled_amount
    }) |>
    set_global(paste0("total_recycling_revenue_", region, "_", waste_type), function() {
      recycled_amount <- get_attribute(env, "waste_amount")
      get_global(env, paste0("total_recycling_revenue_", region, "_", waste_type)) + recycled_amount * recycling_revenue_per_unit
    }) |>
    set_global(paste0("total_avoided_disposal_cost_", region, "_", waste_type), function() {
      recycled_amount <- get_attribute(env, "waste_amount")
      get_global(env, paste0("total_avoided_disposal_cost_", region, "_", waste_type)) + recycled_amount * avoided_disposal_cost_per_unit
    }) |>
    log_(function() paste("Waste handled in", region, "(", waste_type, "):", get_global(env, paste0("total_waste_handled_", region, "_", waste_type)), "kg")) |>
    log_(function() paste("Waste recycled in", region, "(", waste_type, "):", get_global(env, paste0("total_waste_recycled_", region, "_", waste_type)), "kg")) |>
    timeout(function() rexp(1, rate = 0.7)) |>
    release("waste_processor") |>
    release("collection_truck")

  return(list(generate_waste = generate_waste, collect_waste = collect_waste, handle_waste = handle_waste))
}

# Add trajectories and generators for each region and wood waste type
trajectories <- list()
for (region in regions) {
  for (waste_type in wood_waste_types) {
    trajs <- create_trajectories(region, waste_type)
    trajectories[[paste(region, waste_type, sep = "_")]] <- trajs
    env <- env |>
      add_generator(paste0("waste_gen_", region, "_", waste_type), trajs$generate_waste, function() rexp(1, rate = 0.5)) |>
      add_generator(paste0("waste_collector_", region, "_", waste_type), trajs$collect_waste, function() rexp(1, rate = 1.5)) |>
      add_generator(paste0("waste_handler_", region, "_", waste_type), trajs$handle_waste, function() rexp(1, rate = 1))
  }
}

# Run the simulation
env <- env |>
  run(until = 100)

# Display results
arrivals <- get_mon_arrivals(env)
resources <- get_mon_resources(env)

# Print the rates of generation, collection, and processing
cat("Rates of waste generation, collection, and processing:\n")
cat("Generation rate: 0.5 per time unit\n")
cat("Collection rate: 1.5 per time unit\n")
cat("Processing rate: 1 per time unit\n\n")

# Print final amounts of waste generated, collected, handled, stored, and recycled per region and wood waste type
for (region in regions) {
  for (waste_type in wood_waste_types) {
    cat("Region:", region, "Waste Type:", waste_type, "\n")
    cat("  Total waste generated (kg):", get_global(env, paste0("total_waste_generated_", region, "_", waste_type)), "\n")
    cat("  Total waste collected (kg):", get_global(env, paste0("total_waste_collected_", region, "_", waste_type)), "\n")
    cat("  Total waste handled (kg):", get_global(env, paste0("total_waste_handled_", region, "_", waste_type)), "\n")
    cat("  Total waste stored (kg):", get_global(env, paste0("total_waste_stored_", region, "_", waste_type)), "\n")
    cat("  Total waste recycled (kg):", get_global(env, paste0("total_waste_recycled_", region, "_", waste_type)), "\n")
    cat("  Overflow penalty:", get_global(env, paste0("overflow_penalty_", region, "_", waste_type)), "\n")
    cat("  Total storage cost:", get_global(env, paste0("total_storage_cost_", region, "_", waste_type)), "\n")
    cat("  Total collection cost:", get_global(env, paste0("total_collection_cost_", region, "_", waste_type)), "\n")
    cat("  Total processing cost:", get_global(env, paste0("total_processing_cost_", region, "_", waste_type)), "\n")
    cat("  Total transportation cost:", get_global(env, paste0("total_transportation_cost_", region, "_", waste_type)), "\n")
    cat("  Total recycling revenue:", get_global(env, paste0("total_recycling_revenue_", region, "_", waste_type)), "\n")
    cat("  Total avoided disposal cost:", get_global(env, paste0("total_avoided_disposal_cost_", region, "_", waste_type)), "\n")
    cat("\n")
  }
}

# Print storage details
cat("Storage Details:\n")
cat("Storage capacity per region and waste type:", storage_capacity, "kg\n")
cat("Cost per unit of storage:", storage_cost_per_unit, "\n")
cat("Total storage cost for all regions and waste types (current stored waste):\n")

total_storage_cost <- 0
for (region in regions) {
  for (waste_type in wood_waste_types) {
    total_storage_cost <- total_storage_cost + get_global(env, paste0("total_waste_stored_", region, "_", waste_type)) * storage_cost_per_unit
  }
}
cat("Total storage cost:", total_storage_cost, "\n")

# Manually extract global attributes
metrics <- c("Generated", "Collected", "Handled", "Stored", "Recycled", "Overflow Penalty", "Storage Cost", "Collection Cost", "Processing Cost", "Transportation Cost", "Recycling Revenue", "Avoided Disposal Cost")
waste_data_list <- list()

for (region in regions) {
  for (waste_type in wood_waste_types) {
    waste_data_list <- c(waste_data_list,
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[1],
                           Value = get_global(env, paste0("total_waste_generated_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[2],
                           Value = get_global(env, paste0("total_waste_collected_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[3],
                           Value = get_global(env, paste0("total_waste_handled_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[4],
                           Value = get_global(env, paste0("total_waste_stored_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[5],
                           Value = get_global(env, paste0("total_waste_recycled_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[6],
                           Value = get_global(env, paste0("overflow_penalty_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[7],
                           Value = get_global(env, paste0("total_storage_cost_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[8],
                           Value = get_global(env, paste0("total_collection_cost_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[9],
                           Value = get_global(env, paste0("total_processing_cost_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[10],
                           Value = get_global(env, paste0("total_transportation_cost_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[11],
                           Value = get_global(env, paste0("total_recycling_revenue_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[12],
                           Value = get_global(env, paste0("total_avoided_disposal_cost_", region, "_", waste_type))
                         ))
    )
  }
}

waste_data <- do.call(rbind, waste_data_list)
# Define the color palette
color_palette <- "Paired"  # You can choose a different palette from ColorBrewer

# Plotting
ggplot(waste_data, aes(x = Region, y = Value, fill = Metric)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Wood Waste Management Metrics by Region and Waste Type", x = "Region", y = "Value (kg or cost units)") +
  facet_wrap(~ Waste_Type) +  # Separate plots for each waste type
  theme_minimal() +
  scale_fill_brewer(palette = color_palette) +
  geom_hline(yintercept = storage_capacity, linetype = "dashed", color = "red")


```

# Test Framework 13 - semi works? algorithm needs to be checked

management of internal properties (storage) - reallocation of storage

```{r}

# Initialize the simulation environment
env <- simmer("Wood Waste Flow Simulation")

# Define regions
regions <- c("North", "South", "East", "West")

# Define wood waste types
wood_waste_types <- c("Construction", "Demolition", "Packaging")

# Cost parameters
storage_cost_per_unit <- 0.5  # Cost per unit of storage
collection_cost_per_unit <- 1  # Cost per unit of collection
processing_cost_per_unit <- 2  # Cost per unit of processing
transportation_cost_per_unit <- 0.3  # Cost per unit of transportation
overflow_penalty_per_unit <- 2  # Penalty cost per unit of overflow
recycling_revenue_per_unit <- 3  # Revenue per unit of recycling
avoided_disposal_cost_per_unit <- 1  # Avoided disposal cost per unit of recycling

# Initialize global attributes for each region and wood waste type
for (region in regions) {
  for (waste_type in wood_waste_types) {
    env <- env |>
      add_global(paste0("total_waste_generated_", region, "_", waste_type), 0) |>
      add_global(paste0("total_waste_collected_", region, "_", waste_type), 0) |>
      add_global(paste0("total_waste_handled_", region, "_", waste_type), 0) |>
      add_global(paste0("total_waste_stored_", region, "_", waste_type), 0) |>
      add_global(paste0("total_waste_recycled_", region, "_", waste_type), 0) |>
      add_global(paste0("overflow_penalty_", region, "_", waste_type), 0) |>
      add_global(paste0("waste_to_collect_", region, "_", waste_type), 0) |>
      add_global(paste0("total_storage_cost_", region, "_", waste_type), 0) |>
      add_global(paste0("total_collection_cost_", region, "_", waste_type), 0) |>
      add_global(paste0("total_processing_cost_", region, "_", waste_type), 0) |>
      add_global(paste0("total_transportation_cost_", region, "_", waste_type), 0) |>
      add_global(paste0("total_recycling_revenue_", region, "_", waste_type), 0) |>
      add_global(paste0("total_avoided_disposal_cost_", region, "_", waste_type), 0)
  }
}

# Define resources and their capacities
storage_capacity <- 500  # Example storage capacity for each region

env <- env |>
  add_resource("storage", capacity = storage_capacity * length(regions) * length(wood_waste_types)) |>
  add_resource("collection_truck", capacity = length(regions)) |>
  add_resource("waste_processor", capacity = length(regions))

# Function to handle storage overflow
handle_overflow <- function(region, waste_type, waste_amount) {
  current_storage <- get_global(env, paste0("total_waste_stored_", region, "_", waste_type))
  new_storage <- current_storage + waste_amount
  overflow_penalty <- 0
  if (!is.na(new_storage) && new_storage > storage_capacity) {
    overflow_amount <- new_storage - storage_capacity
    overflow_penalty <- overflow_amount * overflow_penalty_per_unit
    new_storage <- storage_capacity
  } else {
    overflow_penalty <- 0
  }
  list(new_storage = new_storage, overflow_penalty = overflow_penalty)
}

# Function to create trajectories for each region
create_trajectories <- function(region, waste_type) {
  # Generate Waste Trajectory
  generate_waste <- trajectory(paste("Generate Waste -", region, "-", waste_type)) |>
    seize("storage", 1) |>
    set_attribute("waste_amount", function() runif(1, 10, 30)) |>
    set_global(paste0("total_waste_generated_", region, "_", waste_type), function() {
      waste_generated <- get_attribute(env, "waste_amount")
      get_global(env, paste0("total_waste_generated_", region, "_", waste_type)) + waste_generated
    }) |>
    set_global(paste0("waste_to_collect_", region, "_", waste_type), function() {
      waste_generated <- get_attribute(env, "waste_amount")
      get_global(env, paste0("waste_to_collect_", region, "_", waste_type)) + waste_generated
    }) |>
    set_global(paste0("overflow_penalty_", region, "_", waste_type), function() {
      waste_amount <- get_attribute(env, "waste_amount")
      result <- handle_overflow(region, waste_type, waste_amount)
      get_global(env, paste0("overflow_penalty_", region, "_", waste_type)) + result$overflow_penalty
    }) |>
    set_global(paste0("total_waste_stored_", region, "_", waste_type), function() {
      waste_amount <- get_attribute(env, "waste_amount")
      result <- handle_overflow(region, waste_type, waste_amount)
      result$new_storage
    }) |>
    set_global(paste0("total_storage_cost_", region, "_", waste_type), function() {
      waste_amount <- get_attribute(env, "waste_amount")
      get_global(env, paste0("total_storage_cost_", region, "_", waste_type)) + waste_amount * storage_cost_per_unit
    }) |>
    log_(function() paste("Waste generated in", region, "(", waste_type, "):", get_global(env, paste0("total_waste_generated_", region, "_", waste_type)), "kg")) |>
    timeout(function() rexp(1, rate = 0.5)) |>
    release("storage", 1)

  # Collect Waste Trajectory (Loc1)
  collect_waste <- trajectory(paste("Collect Waste -", region, "-", waste_type)) |>
    seize("collection_truck") |>
    seize("storage", 1) |>
    set_attribute("waste_amount", function() {
    waste_to_collect <- get_global(env, paste0("waste_to_collect_", region, "_", waste_type))
    if (!is.na(waste_to_collect) && waste_to_collect > 0) {
      amount <- runif(1, 5, min(25, waste_to_collect))
      if (is.na(amount)) {
        amount <- 0
      }
      amount
    } else {
      0
    }
  }) |>
    set_global(paste0("waste_to_collect_", region, "_", waste_type), function() {
      waste_to_collect <- get_global(env, paste0("waste_to_collect_", region, "_", waste_type))
      waste_amount <- get_attribute(env, "waste_amount")
      waste_to_collect - waste_amount
    }) |>
    set_global(paste0("total_waste_collected_", region, "_", waste_type), function() {
      get_global(env, paste0("total_waste_collected_", region, "_", waste_type)) + get_attribute(env, "waste_amount")
    }) |>
    set_global(paste0("total_collection_cost_", region, "_", waste_type), function() {
      waste_amount <- get_attribute(env, "waste_amount")
      get_global(env, paste0("total_collection_cost_", region, "_", waste_type)) + waste_amount * collection_cost_per_unit
    }) |>
    set_global(paste0("total_transportation_cost_", region, "_", waste_type), function() {
      waste_amount <- get_attribute(env, "waste_amount")
      get_global(env, paste0("total_transportation_cost_", region, "_", waste_type)) + waste_amount * transportation_cost_per_unit
    }) |>
    set_global(paste0("total_waste_stored_", region, "_", waste_type), function() {
      current_storage <- get_global(env, paste0("total_waste_stored_", region, "_", waste_type))
      waste_amount <- get_attribute(env, "waste_amount")
      max(current_storage - waste_amount, 0)
    }) |>
    log_(function() paste("Waste collected in", region, "(", waste_type, "):", get_global(env, paste0("total_waste_collected_", region, "_", waste_type)), "kg")) |>
    timeout(function() rexp(1, rate = 1.5)) |>
    release("storage", 1) |>
    release("collection_truck")

  # Handle Waste Trajectory (Loc2)
  handle_waste <- trajectory(paste("Handle Waste -", region, "-", waste_type)) |>
    seize("collection_truck") |>
    seize("waste_processor") |>
    set_attribute("waste_amount", function() runif(1, 2, 15)) |>
    set_global(paste0("total_waste_handled_", region, "_", waste_type), function() {
      get_global(env, paste0("total_waste_handled_", region, "_", waste_type)) + get_attribute(env, "waste_amount")
    }) |>
    set_global(paste0("total_processing_cost_", region, "_", waste_type), function() {
      waste_amount <- get_attribute(env, "waste_amount")
      get_global(env, paste0("total_processing_cost_", region, "_", waste_type)) + waste_amount * processing_cost_per_unit
    }) |>
    set_global(paste0("total_waste_recycled_", region, "_", waste_type), function() {
      recycled_amount <- runif(1, 1, 7)
      get_global(env, paste0("total_waste_recycled_", region, "_", waste_type)) + recycled_amount
    }) |>
    set_global(paste0("total_recycling_revenue_", region, "_", waste_type), function() {
      recycled_amount <- get_attribute(env, "waste_amount")
      get_global(env, paste0("total_recycling_revenue_", region, "_", waste_type)) + recycled_amount * recycling_revenue_per_unit
    }) |>
    set_global(paste0("total_avoided_disposal_cost_", region, "_", waste_type), function() {
      recycled_amount <- get_attribute(env, "waste_amount")
      get_global(env, paste0("total_avoided_disposal_cost_", region, "_", waste_type)) + recycled_amount * avoided_disposal_cost_per_unit
    }) |>
    log_(function() paste("Waste handled in", region, "(", waste_type, "):", get_global(env, paste0("total_waste_handled_", region, "_", waste_type)), "kg")) |>
    log_(function() paste("Waste recycled in", region, "(", waste_type, "):", get_global(env, paste0("total_waste_recycled_", region, "_", waste_type)), "kg")) |>
    timeout(function() rexp(1, rate = 0.7)) |>
    release("waste_processor") |>
    release("collection_truck")

  return(list(generate_waste = generate_waste, collect_waste = collect_waste, handle_waste = handle_waste))
}

# Function to check and reallocate storage
reallocate_storage <- function() {
  cat("Running reallocate_storage function...\n")
  
  for (region in regions) {
    for (waste_type in wood_waste_types) {
      total_stored <- get_global(env, paste0("total_waste_stored_", region, "_", waste_type))
      cat("Initial storage in region", region, "for waste type", waste_type, ":", total_stored, "kg\n")
      
      if (total_stored > storage_capacity) {
        cat("Warning: Storage overflow in region", region, "for waste type", waste_type, "\n")
        cat("Reallocating storage...\n")
        
        # Find regions with available storage
        for (target_region in regions) {
          if (target_region != region) {
            target_storage <- get_global(env, paste0("total_waste_stored_", target_region, "_", waste_type))
            available_capacity <- storage_capacity - target_storage
            cat("Checking target region", target_region, "for available capacity...\n")
            cat("Available capacity in region", target_region, "for waste type", waste_type, ":", available_capacity, "kg\n")
            
            if (available_capacity > 0) {
              transfer_amount <- min(total_stored - storage_capacity, available_capacity)
              env <- env |>
                set_global(paste0("total_waste_stored_", region, "_", waste_type), total_stored - transfer_amount) |>
                set_global(paste0("total_waste_stored_", target_region, "_", waste_type), target_storage + transfer_amount)
              cat("Transferred", transfer_amount, "kg of", waste_type, "waste from", region, "to", target_region, "\n")
              log_(function() paste("Transferred", transfer_amount, "kg of", waste_type, "waste from", region, "to", target_region))
              break
            }
          }
        }
      }
      
      # Print final storage amounts for verification
      final_storage <- get_global(env, paste0("total_waste_stored_", region, "_", waste_type))
      cat("Final storage in region", region, "for waste type", waste_type, ":", final_storage, "kg\n")
    }
  }
}


# Add trajectories and generators for each region and wood waste type
trajectories <- list()
for (region in regions) {
  for (waste_type in wood_waste_types) {
    trajs <- create_trajectories(region, waste_type)
    trajectories[[paste(region, waste_type, sep = "_")]] <- trajs
    env <- env |>
      add_generator(paste0("waste_gen_", region, "_", waste_type), trajs$generate_waste, function() rexp(1, rate = 0.5)) |>
      add_generator(paste0("waste_collector_", region, "_", waste_type), trajs$collect_waste, function() rexp(1, rate = 1.5)) |>
      add_generator(paste0("waste_handler_", region, "_", waste_type), trajs$handle_waste, function() rexp(1, rate = 1))
  }
}

# Run the simulation
env <- env |>
  run(until = 100)

# Check and reallocate storage before the simulation ends
reallocate_storage()

# Display results
arrivals <- get_mon_arrivals(env)
resources <- get_mon_resources(env)

# Print the rates of generation, collection, and processing
cat("Rates of waste generation, collection, and processing:\n")
cat("Generation rate: 0.5 per time unit\n")
cat("Collection rate: 1.5 per time unit\n")
cat("Processing rate: 1 per time unit\n\n")

# Print final amounts of waste generated, collected, handled, stored, and recycled per region and wood waste type
for (region in regions) {
  for (waste_type in wood_waste_types) {
    cat("Region:", region, "Waste Type:", waste_type, "\n")
    cat("  Total waste generated (kg):", get_global(env, paste0("total_waste_generated_", region, "_", waste_type)), "\n")
    cat("  Total waste collected (kg):", get_global(env, paste0("total_waste_collected_", region, "_", waste_type)), "\n")
    cat("  Total waste handled (kg):", get_global(env, paste0("total_waste_handled_", region, "_", waste_type)), "\n")
    cat("  Total waste stored (kg):", get_global(env, paste0("total_waste_stored_", region, "_", waste_type)), "\n")
    cat("  Total waste recycled (kg):", get_global(env, paste0("total_waste_recycled_", region, "_", waste_type)), "\n")
    cat("  Overflow penalty:", get_global(env, paste0("overflow_penalty_", region, "_", waste_type)), "\n")
    cat("  Total storage cost:", get_global(env, paste0("total_storage_cost_", region, "_", waste_type)), "\n")
    cat("  Total collection cost:", get_global(env, paste0("total_collection_cost_", region, "_", waste_type)), "\n")
    cat("  Total processing cost:", get_global(env, paste0("total_processing_cost_", region, "_", waste_type)), "\n")
    cat("  Total transportation cost:", get_global(env, paste0("total_transportation_cost_", region, "_", waste_type)), "\n")
    cat("  Total recycling revenue:", get_global(env, paste0("total_recycling_revenue_", region, "_", waste_type)), "\n")
    cat("  Total avoided disposal cost:", get_global(env, paste0("total_avoided_disposal_cost_", region, "_", waste_type)), "\n")
    cat("\n")
  }
}

# Print storage details
cat("Storage Details:\n")
cat("Storage capacity per region and waste type:", storage_capacity, "kg\n")
cat("Cost per unit of storage:", storage_cost_per_unit, "\n")
cat("Total storage cost for all regions and waste types (current stored waste):\n")

total_storage_cost <- 0
for (region in regions) {
  for (waste_type in wood_waste_types) {
    total_storage_cost <- total_storage_cost + get_global(env, paste0("total_waste_stored_", region, "_", waste_type)) * storage_cost_per_unit
  }
}
cat("Total storage cost:", total_storage_cost, "\n")

# Manually extract global attributes
metrics <- c("Generated", "Collected", "Handled", "Stored", "Recycled", "Overflow Penalty", "Storage Cost", "Collection Cost", "Processing Cost", "Transportation Cost", "Recycling Revenue", "Avoided Disposal Cost")
waste_data_list <- list()

for (region in regions) {
  for (waste_type in wood_waste_types) {
    waste_data_list <- c(waste_data_list,
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[1],
                           Value = get_global(env, paste0("total_waste_generated_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[2],
                           Value = get_global(env, paste0("total_waste_collected_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[3],
                           Value = get_global(env, paste0("total_waste_handled_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[4],
                           Value = get_global(env, paste0("total_waste_stored_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[5],
                           Value = get_global(env, paste0("total_waste_recycled_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[6],
                           Value = get_global(env, paste0("overflow_penalty_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[7],
                           Value = get_global(env, paste0("total_storage_cost_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[8],
                           Value = get_global(env, paste0("total_collection_cost_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[9],
                           Value = get_global(env, paste0("total_processing_cost_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[10],
                           Value = get_global(env, paste0("total_transportation_cost_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[11],
                           Value = get_global(env, paste0("total_recycling_revenue_", region, "_", waste_type))
                         )),
                         list(data.frame(
                           Region = region,
                           Waste_Type = waste_type,
                           Metric = metrics[12],
                           Value = get_global(env, paste0("total_avoided_disposal_cost_", region, "_", waste_type))
                         ))
    )
  }
}

waste_data <- do.call(rbind, waste_data_list)
# Define the color palette
color_palette <- "Paired"  # You can choose a different palette from ColorBrewer

# Plotting
ggplot(waste_data, aes(x = Region, y = Value, fill = Metric)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Wood Waste Management Metrics by Region and Waste Type", x = "Region", y = "Value (kg or cost units)") +
  facet_wrap(~ Waste_Type) +  # Separate plots for each waste type
  theme_minimal() +
  scale_fill_brewer(palette = color_palette) +
  geom_hline(yintercept = storage_capacity, linetype = "dashed", color = "red")

```

# Test Framework 14 - WORKS

allocation of storage points, balancing of storage space completed

```{r}

# Initialize the simulation environment
env <- simmer("Wood Waste Flow Simulation")

# Define regions
regions <- c("North", "South", "East", "West")

# Define wood waste types
wood_waste_types <- c("Construction", "Demolition", "Packaging")

# Cost parameters
storage_cost_per_unit <- 0.5  # Cost per unit of storage
collection_cost_per_unit <- 1  # Cost per unit of collection
processing_cost_per_unit <- 2  # Cost per unit of processing
transportation_cost_per_unit <- 0.3  # Cost per unit of transportation
overflow_penalty_per_unit <- 2  # Penalty cost per unit of overflow
recycling_revenue_per_unit <- 3  # Revenue per unit of recycling
avoided_disposal_cost_per_unit <- 1  # Avoided disposal cost per unit of recycling

# Initialize global attributes for each region and wood waste type
for (region in regions) {
  for (waste_type in wood_waste_types) {
    env <- env |>
      add_global(paste0("total_waste_generated_", region, "_", waste_type), 0) |>
      add_global(paste0("total_waste_collected_", region, "_", waste_type), 0) |>
      add_global(paste0("total_waste_handled_", region, "_", waste_type), 0) |>
      add_global(paste0("total_waste_stored_", region, "_", waste_type), 0) |>
      add_global(paste0("total_waste_recycled_", region, "_", waste_type), 0) |>
      add_global(paste0("overflow_penalty_", region, "_", waste_type), 0) |>
      add_global(paste0("waste_to_collect_", region, "_", waste_type), 0) |>
      add_global(paste0("total_storage_cost_", region, "_", waste_type), 0) |>
      add_global(paste0("total_collection_cost_", region, "_", waste_type), 0) |>
      add_global(paste0("total_processing_cost_", region, "_", waste_type), 0) |>
      add_global(paste0("total_transportation_cost_", region, "_", waste_type), 0) |>
      add_global(paste0("total_recycling_revenue_", region, "_", waste_type), 0) |>
      add_global(paste0("total_avoided_disposal_cost_", region, "_", waste_type), 0)
  }
}

# Define resources and their capacities
storage_capacity <- 500  # Example storage capacity for each region

env <- env |>
  add_resource("storage", capacity = storage_capacity * length(regions) * length(wood_waste_types)) |>
  add_resource("collection_truck", capacity = length(regions)) |>
  add_resource("waste_processor", capacity = length(regions))

# Function to handle storage overflow
handle_overflow <- function(region, waste_type, waste_amount) {
  current_storage <- get_global(env, paste0("total_waste_stored_", region, "_", waste_type))
  new_storage <- current_storage + waste_amount
  overflow_penalty <- 0
  if (!is.na(new_storage) && new_storage > storage_capacity) {
    overflow_amount <- new_storage - storage_capacity
    overflow_penalty <- overflow_amount * overflow_penalty_per_unit
    new_storage <- storage_capacity
  } else {
    overflow_penalty <- 0
  }
  list(new_storage = new_storage, overflow_penalty = overflow_penalty)
}

# Function to create trajectories for each region
create_trajectories <- function(region, waste_type) {
  # Generate Waste Trajectory
  generate_waste <- trajectory(paste("Generate Waste -", region, "-", waste_type)) |>
    seize("storage", 1) |>
    set_attribute("waste_amount", function() runif(1, 10, 30)) |>
    set_global(paste0("total_waste_generated_", region, "_", waste_type), function() {
      waste_generated <- get_attribute(env, "waste_amount")
      get_global(env, paste0("total_waste_generated_", region, "_", waste_type)) + waste_generated
    }) |>
    set_global(paste0("waste_to_collect_", region, "_", waste_type), function() {
      waste_generated <- get_attribute(env, "waste_amount")
      get_global(env, paste0("waste_to_collect_", region, "_", waste_type)) + waste_generated
    }) |>
    set_global(paste0("overflow_penalty_", region, "_", waste_type), function() {
      waste_amount <- get_attribute(env, "waste_amount")
      result <- handle_overflow(region, waste_type, waste_amount)
      get_global(env, paste0("overflow_penalty_", region, "_", waste_type)) + result$overflow_penalty
    }) |>
    set_global(paste0("total_waste_stored_", region, "_", waste_type), function() {
      waste_amount <- get_attribute(env, "waste_amount")
      result <- handle_overflow(region, waste_type, waste_amount)
      result$new_storage
    }) |>
    set_global(paste0("total_storage_cost_", region, "_", waste_type), function() {
      waste_amount <- get_attribute(env, "waste_amount")
      get_global(env, paste0("total_storage_cost_", region, "_", waste_type)) + waste_amount * storage_cost_per_unit
    }) |>
    log_(function() paste("Waste generated in", region, "(", waste_type, "):", get_global(env, paste0("total_waste_generated_", region, "_", waste_type)), "kg")) |>
    timeout(function() rexp(1, rate = 0.5)) |>
    release("storage", 1)

  # Collect Waste Trajectory (Loc1)
  collect_waste <- trajectory(paste("Collect Waste -", region, "-", waste_type)) |>
    seize("collection_truck") |>
    seize("storage", 1) |>
    set_attribute("waste_amount", function() {
      waste_to_collect <- get_global(env, paste0("waste_to_collect_", region, "_", waste_type))
      if (!is.na(waste_to_collect) && waste_to_collect > 5) {
        amount <- runif(1, 5, min(25, waste_to_collect))
        if (is.na(amount)) {
          amount <- 0
        }
        amount
      } else if (!is.na(waste_to_collect) && waste_to_collect > 0) {
        waste_to_collect  # Collect the remaining waste if it's less than 5
      } else {
        0
      }
    }) |>
    set_global(paste0("waste_to_collect_", region, "_", waste_type), function() {
      waste_to_collect <- get_global(env, paste0("waste_to_collect_", region, "_", waste_type))
      waste_amount <- get_attribute(env, "waste_amount")
      waste_to_collect - waste_amount
    }) |>
    set_global(paste0("total_waste_collected_", region, "_", waste_type), function() {
      get_global(env, paste0("total_waste_collected_", region, "_", waste_type)) + get_attribute(env, "waste_amount")
    }) |>
    set_global(paste0("total_collection_cost_", region, "_", waste_type), function() {
      waste_amount <- get_attribute(env, "waste_amount")
      get_global(env, paste0("total_collection_cost_", region, "_", waste_type)) + waste_amount * collection_cost_per_unit
    }) |>
    set_global(paste0("total_transportation_cost_", region, "_", waste_type), function() {
      waste_amount <- get_attribute(env, "waste_amount")
      get_global(env, paste0("total_transportation_cost_", region, "_", waste_type)) + waste_amount * transportation_cost_per_unit
    }) |>
    set_global(paste0("total_waste_stored_", region, "_", waste_type), function() {
      current_storage <- get_global(env, paste0("total_waste_stored_", region, "_", waste_type))
      waste_amount <- get_attribute(env, "waste_amount")
      max(current_storage - waste_amount, 0)
    }) |>
    log_(function() paste("Waste collected in", region, "(", waste_type, "):", get_global(env, paste0("total_waste_collected_", region, "_", waste_type)), "kg")) |>
    timeout(function() rexp(1, rate = 1.5)) |>
    release("storage", 1) |>
    release("collection_truck")

  # Handle Waste Trajectory (Loc2)
  handle_waste <- trajectory(paste("Handle Waste -", region, "-", waste_type)) |>
    seize("collection_truck") |>
    seize("waste_processor") |>
    set_attribute("waste_amount", function() runif(1, 2, 15)) |>
    set_global(paste0("total_waste_handled_", region, "_", waste_type), function() {
      get_global(env, paste0("total_waste_handled_", region, "_", waste_type)) + get_attribute(env, "waste_amount")
    }) |>
    set_global(paste0("total_processing_cost_", region, "_", waste_type), function() {
      waste_amount <- get_attribute(env, "waste_amount")
      get_global(env, paste0("total_processing_cost_", region, "_", waste_type)) + waste_amount * processing_cost_per_unit
    }) |>
    set_global(paste0("total_waste_recycled_", region, "_", waste_type), function() {
      recycled_amount <- runif(1, 1, 7)
      get_global(env, paste0("total_waste_recycled_", region, "_", waste_type)) + recycled_amount
    }) |>
    set_global(paste0("total_recycling_revenue_", region, "_", waste_type), function() {
      recycled_amount <- get_attribute(env, "waste_amount")
      get_global(env, paste0("total_recycling_revenue_", region, "_", waste_type)) + recycled_amount * recycling_revenue_per_unit
    }) |>
    set_global(paste0("total_avoided_disposal_cost_", region, "_", waste_type), function() {
      recycled_amount <- get_attribute(env, "waste_amount")
      get_global(env, paste0("total_avoided_disposal_cost_", region, "_", waste_type)) + recycled_amount * avoided_disposal_cost_per_unit
    }) |>
    log_(function() paste("Waste handled in", region, "(", waste_type, "):", get_global(env, paste0("total_waste_handled_", region, "_", waste_type)), "kg")) |>
    timeout(function() rexp(1, rate = 0.7)) |>
    release("waste_processor") |>
    release("collection_truck") |>
    log_(function() paste("Waste recycled in", region, "(", waste_type, "):", get_global(env, paste0("total_waste_recycled_", region, "_", waste_type)), "kg")) |>
    timeout(function() rexp(1, rate = 0.3))  # Added delay for recycling process

  return(list(generate_waste = generate_waste, collect_waste = collect_waste, handle_waste = handle_waste))
}

# Add trajectories and generators for each region and wood waste type
trajectories <- list()
for (region in regions) {
  for (waste_type in wood_waste_types) {
    trajs <- create_trajectories(region, waste_type)
    trajectories[[paste(region, waste_type, sep = "_")]] <- trajs
    env <- env |>
      add_generator(paste0("waste_gen_", region, "_", waste_type), trajs$generate_waste, function() rexp(1, rate = 0.5)) |>
      add_generator(paste0("waste_collector_", region, "_", waste_type), trajs$collect_waste, function() rexp(1, rate = 1.5), mon = 10) |>
      add_generator(paste0("waste_handler_", region, "_", waste_type), trajs$handle_waste, function() rexp(1, rate = 1), mon = 20)
  }
}

# Function to balance storage across regions
balance_storage_across_regions <- function(env) {
  for (waste_type in wood_waste_types) {
    total_storages <- sapply(regions, function(region) get_global(env, paste0("total_waste_stored_", region, "_", waste_type)))
    total_storage <- sum(total_storages)
    avg_storage <- total_storage / length(regions)
    
    cat("Initial storage for waste type:", waste_type, "\n")
    for (region in regions) {
      initial_storage <- get_global(env, paste0("total_waste_stored_", region, "_", waste_type))
      cat("  Region:", region, "Initial storage (kg):", initial_storage, "\n")
    }
    
    for (region in regions) {
      current_storage <- get_global(env, paste0("total_waste_stored_", region, "_", waste_type))
      transfer_amount <- avg_storage - current_storage
      
      if (transfer_amount > 0) {
        for (source_region in regions) {
          if (source_region != region) {
            source_storage <- get_global(env, paste0("total_waste_stored_", source_region, "_", waste_type))
            if (source_storage > avg_storage) {
              actual_transfer_amount <- min(transfer_amount, source_storage - avg_storage)
              if (actual_transfer_amount > 0) {
                current_storage <- current_storage + actual_transfer_amount
                source_storage <- source_storage - actual_transfer_amount
                transfer_amount <- transfer_amount - actual_transfer_amount
                if (transfer_amount <= 0) break
              }
            }
          }
        }
      } else if (transfer_amount < 0) {
        for (target_region in regions) {
          if (target_region != region) {
            target_storage <- get_global(env, paste0("total_waste_stored_", target_region, "_", waste_type))
            if (target_storage < avg_storage) {
              actual_transfer_amount <- min(-transfer_amount, avg_storage - target_storage)
              if (actual_transfer_amount > 0) {
                current_storage <- current_storage - actual_transfer_amount
                target_storage <- target_storage + actual_transfer_amount
                transfer_amount <- transfer_amount + actual_transfer_amount
                if (transfer_amount >= 0) break
              }
            }
          }
        }
      }
      
      # Print final storage amounts for verification
      cat("Final storage in region", region, "for waste type", waste_type, ":", current_storage, "kg\n")
    }
  }
}

# Run the simulation
env <- env |>
  run(until = 100)

# Balance storage across regions before the simulation ends
balance_storage_across_regions(env)

# Display results
arrivals <- get_mon_arrivals(env)
resources <- get_mon_resources(env)

# Print the rates of generation, collection, and processing
cat("Rates of waste generation, collection, and processing:\n")
cat("Generation rate: 0.5 per time unit\n")
cat("Collection rate: 1.5 per time unit\n")
cat("Processing rate: 1 per time unit\n\n")

# Print final amounts of waste generated, collected, handled, stored, and recycled per region and wood waste type
for (region in regions) {
  for (waste_type in wood_waste_types) {
    cat("Region:", region, "Waste Type:", waste_type, "\n")
    cat("  Total waste generated (kg):", get_global(env, paste0("total_waste_generated_", region, "_", waste_type)), "\n")
    cat("  Total waste collected (kg):", get_global(env, paste0("total_waste_collected_", region, "_", waste_type)), "\n")
    cat("  Total waste handled (kg):", get_global(env, paste0("total_waste_handled_", region, "_", waste_type)), "\n")
    cat("  Total waste stored (kg):", get_global(env, paste0("total_waste_stored_", region, "_", waste_type)), "\n")
    cat("  Total waste recycled (kg):", get_global(env, paste0("total_waste_recycled_", region, "_", waste_type)), "\n")
    cat("  Overflow penalty:", get_global(env, paste0("overflow_penalty_", region, "_", waste_type)), "\n")
    cat("  Total storage cost:", get_global(env, paste0("total_storage_cost_", region, "_", waste_type)), "\n")
    cat("  Total collection cost:", get_global(env, paste0("total_collection_cost_", region, "_", waste_type)), "\n")
    cat("  Total processing cost:", get_global(env, paste0("total_processing_cost_", region, "_", waste_type)), "\n")
    cat("  Total transportation cost:", get_global(env, paste0("total_transportation_cost_", region, "_", waste_type)), "\n")
    cat("  Total recycling revenue:", get_global(env, paste0("total_recycling_revenue_", region, "_", waste_type)), "\n")
    cat("  Total avoided disposal cost:", get_global(env, paste0("total_avoided_disposal_cost_", region, "_", waste_type)), "\n")
    cat("\n")
  }
}

# Print storage details
cat("Storage Details:\n")
cat("Storage capacity per region and waste type:", storage_capacity, "kg\n")
cat("Cost per unit of storage:", storage_cost_per_unit, "\n")
cat("Total storage cost for all regions and waste types (current stored waste):\n")

total_storage_cost <- 0
for (region in regions) {
  for (waste_type in wood_waste_types) {
    total_storage_cost <- total_storage_cost + get_global(env, paste0("total_waste_stored_", region, "_", waste_type)) * storage_cost_per_unit
  }
}
cat("Total storage cost:", total_storage_cost, "\n")

resources

```