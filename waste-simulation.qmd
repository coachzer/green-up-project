---
title: "waste-simulation"
author: "Nikola Kovačević"
format: html
editor: visual
---

# Setup

```{r}
library(simmer)
library(simmer.plot)
library(simmer.bricks)
library(parallel)
library(dplyr)
library(ggplot2)

# Define regions with capacities
regions <- data.frame(
  name = c("Pomurska", "Podravska", "Koroška", "Savinjska", 
           "Zasavska", "Posavska", "Jugovzhodna Slovenija", 
           "Osrednjeslovenska", "Gorenjska", "Primorsko-notranjska", 
           "Goriška", "Obalno-kraška"),
  waste_generation_rate = c(1.2, 1.5, 0.8, 1.3, 0.7, 0.9, 1.1, 1.6, 1.4, 1, 1.3, 1.2),
  waste_collection_rate = c(1.1, 1.3, 0.9, 1.2, 0.8, 1.0, 1.0, 1.5, 1.3, 0.9, 1.2, 1.1),
  waste_handling_rate = c(1.0, 1.2, 0.8, 1.1, 0.7, 0.9, 1.0, 1.4, 1.2, 0.8, 1.1, 1.0),
  storage_capacity = rep(10, 12)  # Not directly used in simulation; example capacities
)
```

# Define resources (assuming central facility)

## Generation - this process involves generating wood waste in each region

## Collection - this process involves transporting wood waste from each region to a central handling facility

## Handling - this process involves handling the wood waste at the central facility

# Test Framework 1

```{r}

env <- simmer("WoodWasteManagement")

# Assume each region generates between 1 to 5 units of wood waste randomly every 1 to 10 minutes
# This is a simplification, using test data
generate_wood_waste <- function(region) {
  trajectory(paste(region, "wood waste process")) |>
    log_(paste("Generating wood waste in", region)) |>
    timeout(function() runif(1, 1, 5)) |>
    log_(paste("Wood waste ready for collection in", region))
}

# Define a trajectory for transportation to a central handling facility
# This is simplified; distances and transport times would affect this in a real model
transport_to_facility <- trajectory("transportation") |>
  log_("Transporting to facility") |>
  timeout(5)  # Simplified transport time

# Handling trajectory
handle_wood_waste <- trajectory("handling") |>
  log_("Handling wood waste") |>
  timeout(3)  # Simplified processing time

# Regions
regions <- c("Pomurska", "Podravska", "Koroška", "Savinjska", "Zasavska", "Posavska", 
             "Jugovzhodna Slovenija", "Osrednjeslovenska", "Gorenjska", 
             "Primorsko-notranjska", "Goriška", "Obalno-kraška")

# Adding generators for each region
for(region in regions) {
  env <- env |>
    add_generator(paste(region, "generator"), generate_wood_waste(region), function() rexp(1, 0.1)) |>
    add_generator(paste(region, "transport"), transport_to_facility, function() rexp(1, 0.1)) |>
    add_generator("Handling facility", handle_wood_waste, function() rexp(1, 0.2))
}

# Run the simulation
env |> run(until = 100) |> now()  # Run for 100 time units as a demonstration

# monitoring
env |> get_mon_arrivals() |> head()

# amount of generated
env |> get_mon_resources() |> head()
```

# Test Framework 2

```{r}
env <- simmer("SloveniaWoodWasteManagement")

# Create a resource for each region with its storage capacity
for (region_name in regions$name) {
  env <- env |> add_resource(region_name, capacity = 10)
}

# Initialize a data frame to store the results
results <- data.frame(
  time = numeric(),
  region = character(),
  event = character(),
  total_amount = numeric(),
  stringsAsFactors = FALSE
)

waste_handling_trajectory <- function(region_name, initial_capacity, waste_collection_rate, waste_handling_rate) {
  trajectory(region_name) |>
    # Generate waste
    timeout(function() runif(1, 0.5, 1.5)) |>
    # Seize waste amount from the resource
    seize(region_name, amount = function() {
      waste_amount <- runif(1, 0.1, 0.5)
      # Log the waste generation
      results <<- rbind(results, data.frame(
        time = now(env),
        region = region_name,
        event = "generated",
        amount = waste_amount,
        stringsAsFactors = FALSE
      ))
      waste_amount
    }) |>
    # Simulate waste collection time
    timeout(function() rexp(1, rate = waste_collection_rate)) |>
    # Release the seized amount and log the waste collection
    release(region_name, amount = function() {
      seized_amount <- get_seized(env, region_name)
      # Log the waste collection
      results <<- rbind(results, data.frame(
        time = now(env),
        region = region_name,
        event = "collected",
        amount = seized_amount,
        stringsAsFactors = FALSE
      ))
      seized_amount
    }) |>
    # Simulate waste handling time
    timeout(function() rexp(1, rate = waste_handling_rate)) |>
    # Release the seized amount and log the waste handling
    release(region_name, amount = function() {
      seized_amount <- get_seized(env, region_name)
      # Log the waste handling
      results <<- rbind(results, data.frame(
        time = now(env),
        region = region_name,
        event = "handled",
        amount = seized_amount,
        stringsAsFactors = FALSE
      ))
      seized_amount
    })
}


# Add waste handling generators for each region
for (i in 1:nrow(regions)) {
  region <- regions[i, ]
  env <- env |> add_generator(
    paste(region$name, "Waste Generator"),
    waste_handling_trajectory(region$name, region$storage_capacity, region$waste_collection_rate, region$waste_handling_rate), 
    function() rexp(1, rate = region$waste_generation_rate)
  )
}

# Run the simulation
env |> run(until = 100)

print(results)

# show the results of Goriska for generated waste
# sum the amount
sum(results[results$region == "Primorsko-notranjska" & results$event == "generated", ]$amount)

```

# Test Framework 3

## TO FIX COLLECTION AND HANDLING

```{r}

env <- simmer("SloveniaWoodWasteManagement")

# Define regions with storage capacities
regions <- data.frame(
  name = c("Pomurska", "Podravska", "Koroška", "Savinjska", 
           "Zasavska", "Posavska", "Jugovzhodna Slovenija", 
           "Osrednjeslovenska", "Gorenjska", "Primorsko-notranjska", 
           "Goriška", "Obalno-kraška"),
  waste_generation_rate = c(1.2, 1.5, 0.8, 1.3, 0.7, 0.9, 1.1, 1.6, 1.4, 1, 1.3, 1.2),
  waste_collection_rate = c(1.1, 1.3, 0.9, 1.2, 0.8, 1.0, 1.0, 1.5, 1.3, 0.9, 1.2, 1.1),  # Example rates for simplicity
  waste_handling_rate = c(1.0, 1.2, 0.8, 1.1, 0.7, 0.9, 1.0, 1.4, 1.2, 0.8, 1.1, 1.0),  # Example rates for simplicity
  storage_capacity = rep(10, 12)  # Example capacities for simplicity
)

num_vehicles <- 5

# Create a resource for each region with its storage capacity
for (region_name in regions$name) {
  env <- env |> add_resource(region_name, capacity = 10)
}

# Initialize a data frame to store the results
results <- data.frame(
  time = numeric(),
  region = character(),
  event = character(),
  total_amount = numeric(),
  stringsAsFactors = FALSE
)

# Define the waste trajectory
waste_trajectory <- function(region_name, waste_collection_rate, waste_handling_rate) {
  trajectory(region_name) |>
    # Generate waste
    timeout(function() rnorm(1, 15)) |>
    # Seize waste amount from the resource
    seize(region_name, amount = function() {
      waste_amount <- runif(1, 0.1, 0.5)
      # Log the waste generation
      results <<- rbind(results, data.frame(
        time = now(env),
        region = region_name,
        event = "generated",
        amount = waste_amount,
        stringsAsFactors = FALSE
      ))
      waste_amount
    }) |>
    # Wait for some time before starting the collection
    # timeout(function() runif(1, 1, 2)) |>
    # Simulate waste collection time
    timeout(function() rnorm(1, 20)) |>
    # Seize a vehicle
    seize(paste(region_name, "Vehicles"), amount = 1) |>
    # Release the seized amount and log the waste collection
    release(region_name, amount = function() {
      seized_amount <- get_seized(env, region_name)
      # Log the waste collection
      results <<- rbind(results, data.frame(
        time = now(env),
        region = region_name,
        event = "collected",
        amount = seized_amount,
        stringsAsFactors = FALSE
      ))
      seized_amount
    }) |>
    # Release the vehicle
    release(paste(region_name, "Vehicles"), amount = 1) |>
    # Wait for some time before starting the handling
    # timeout(function() runif(1, 2, 3)) |>
    # Simulate waste handling time
    timeout(function() rnorm(1, 5)) |>
    # Release the remaining seized amount and log the waste handling
    release(region_name, amount = function() {
      waste_amount <- get_seized(env, region_name)
      # Log the waste handling
      results <<- rbind(results, data.frame(
        time = now(env),
        region = region_name,
        event = "handled",
        amount = waste_amount,
        stringsAsFactors = FALSE
      ))
      waste_amount
    })
}

# Add waste handling generators for each region
for (i in 1:nrow(regions)) {
  region <- regions[i, ]
  env <- env |> 
    add_resource(paste(region$name, "Vehicles"), capacity = num_vehicles) |> 
    add_generator(
      paste(region$name, "Waste Generator"),
      waste_trajectory(region$name, region$waste_collection_rate, region$waste_handling_rate), 
      function() rexp(1, rate = region$waste_generation_rate)
    )
}
# Run the simulation
env |> run(until = 500)

get_mon_arrivals(env)
get_mon_resources(env)
```

# Test Framework 4 - small working version

```{r}

env <- simmer("SloveniaWoodWasteManagement")

some_waste <- trajectory("some waste's path") |> 
  ## add a generation activity
  seize("generator", amount = 1) |>
  timeout(function() rnorm(1, 25)) |>
  release("generator", amount = 1) |>
  ## add a collection activity
  seize("collector", amount = 1) |>
  timeout(function() rnorm(1, 15)) |>
  release("collector", amount = 1) |>
  ## add a handling activity
  seize("handler", amount = 1) |>
  timeout(function() rnorm(1, 5)) |>
  release("handler", amount = 1)

env |> 
  add_resource("generator", capacity = 10) |> 
  add_resource("collector", capacity = 5) |> 
  add_resource("handler", capacity = 2) |> 
  add_generator("some waste", some_waste, function() rexp(1, rate = 1)) 

env |> 
  run(100) |> 
  get_mon_arrivals()

env |> peek(3)

env |> 
  stepn() |> 
  print() |> 
  stepn(5)


envs <- mclapply(1:100, function(i) {
  simmer("SuperDuperSim") |>
    add_resource("generator", 1) |>
    add_resource("collector", 2) |>
    add_resource("handler", 1) |>
    add_generator("some waste", some_waste, function() rnorm(1, 10, 2)) |>
    run(80) |>
    wrap()
})

resources <- get_mon_resources(envs)
plot(resources, metric = "utilization")

plot(resources, metric = "usage", c("generator", "collector"), items = "server")

arrivals <- get_mon_arrivals(envs)
plot(arrivals, metric = "flow_time")

plot(arrivals, metric = "activity_time")

plot(arrivals, metric = "waiting_time")

get_palette <- scales::brewer_pal(type = "qual", palette = 1)
plot(some_waste, fill = get_palette)

```

## Test Framework 4a

```{r}

# Create the main simulation environment
env <- simmer("SloveniaWoodWasteManagement")

# Define trajectories with attribute modifications
generation <- trajectory("generation") |>
  seize("generator", amount = 1) |>
  timeout(function() rnorm(1, 25)) |>
  set_attribute("generated", function() rnorm(1, 25)) |>
  release("generator", amount = 1)

collection <- trajectory("collection") |>
  seize("collector", amount = 1) |>
  timeout(function() rnorm(1, 15)) |>
  set_attribute("collected", function() rnorm(1, 15)) |>
  release("collector", amount = 1)

handling <- trajectory("handling") |>
  seize("handler", amount = 1) |>
  timeout(function() rnorm(1, 5)) |>
  set_attribute("handled", function() rnorm(1, 5)) |>
  release("handler", amount = 1)

# Main trajectory combining all activities
main_trajectory <- trajectory("main trajectory") |>
  join(generation) |>
  join(collection) |>
  join(handling)

# Add resources and generator
env |>
  add_resource("generator", capacity = 10) |>
  add_resource("collector", capacity = 5) |>
  add_resource("handler", capacity = 2) |>
  add_generator("some waste", main_trajectory, function() rexp(1, rate = 1))

# Run the simulation
env |>
  run(100) |> 
  get_mon_attributes()

  # Extract the monitored data
attributes <- get_mon_attributes(env)
waste_flow <- attributes |>
  filter(name == "some waste") |>
  group_by(replication) |>
  summarize(
    total_generated = max(generated, na.rm = TRUE),
    total_collected = max(collected, na.rm = TRUE),
    total_handled = max(handled, na.rm = TRUE)
  )

# Display the dataframe
print(waste_flow)


```

# Test Framework 5

```{r}

# Initialize the simulation environment
env <- simmer("Enhanced Waste Management")

# Define regions and their waste generation characteristics
regions <- data.frame(
  name = c("Region1", "Region2"),
  waste_type = c("Organic", "Plastic"),
  gen_rate = c(1, 0.8),  # Waste generation rates
  col_rate = c(0.9, 0.7), # Collection rates
  han_rate = c(0.5, 0.3)  # Handling rates
)

# Create an empty dataframe to store results
results <- data.frame(time = numeric(), region = character(), type = character(), event = character(), stringsAsFactors = FALSE)

# Initialize resources
env |>
  add_resource("generator", capacity = 10) |>
  add_resource("collector", capacity = 5) |>
  add_resource("handler", capacity = 2)

# Define the trajectory function
waste_trajectory <- function(region, waste_type, gen_rate, col_rate, han_rate) {
  trajectory(paste("manage", waste_type, "in", region)) |>
    seize("generator", 1) |>
    timeout(function() rnorm(1, mean = 15)) |>
    release("generator", 1) |>
    log_("generated") |>
    seize("collector", 1) |>
    timeout(function() rnorm(1, mean = 20)) |>
    release("collector", 1) |>
    log_("collected") |>
    seize("handler", 1) |>
    timeout(function() rnorm(1, mean = 5)) |>
    release("handler", 1) |>
    log_("handled")
    
}

# Add generators for each region and waste type
for (i in seq_along(regions$name)) {
  region <- regions$name[i]
  waste_type <- regions$waste_type[i]
  gen_rate <- regions$gen_rate[i]
  col_rate <- regions$col_rate[i]
  han_rate <- regions$han_rate[i]

  env |>
    add_generator(paste(region, waste_type, "waste generator"),
                  waste_trajectory(region, waste_type, gen_rate, col_rate, han_rate),
                  function() rexp(1, rate = gen_rate))
}

# Run the simulation
env |> 
  run(100) |> 
  now()

# Output the results
#print(results)

```

# Test Framework 6

```{r}

# Define the trajectory for waste flow
waste_trajectory <- trajectory("waste management process") |>
  log_("starting...") |> 
  # Waste generation stage
  seize("generator", 1) |>
  set_attribute("amount_generated", function() rnorm(1, mean = 10, sd = 1)) |>
  # log_("generating...") |>
  timeout(function() rnorm(1, mean = 3, sd = 1)) |>
  release("generator", 1) |>
  # log_("generated.") |>
  # Waste collection stage
  seize("collector", 1) |>
  set_attribute("amount_collected", function() rnorm(1, mean = 7, sd = 1.5)) |>
  # log_("collecting...") |>
  timeout(function() rnorm(1, mean = 10, sd = 2)) |>
  release("collector", 1) |>
  # log_("collected.") |>
  # Waste handling stage
  seize("handling facility", 1) |>
  set_attribute("amount_handled", function() rnorm(1, mean = 5, sd = 1)) |>
  # log_("handling...") |>
  timeout(function() rnorm(1, mean = 7, sd = 1.5)) |>
  release("handling facility", 1) |> 
  # log_("handled.") |>
  # log_(function() paste0("Current simulation time: ", now(env))) |> 
  log_(function() paste0("Generated: ", get_attribute(env, "amount_generated"))) |> 
  log_(function() paste0("Collected: ", get_attribute(env, "amount_collected"))) |>
  log_(function() paste0("Handled: ", get_attribute(env, "amount_handled"))) |>
  log_("completed.")

# Set up the simulation environment
env <- simmer("Waste Management Simulation")

# Add resources with their capacities-
env |>
  add_resource("generator", capacity = 1, mon = T) |>
  add_resource("collector", capacity = 2, mon = T) |>
  add_resource("handling facility", capacity = 3, mon = T)

# Add a generator for waste generation
# Assuming waste is generated every day of the year
env |>
  add_generator("waste", waste_trajectory, function() rexp(1, 1/24)) # exponential distribution with mean inter-arrival time of 24 hours

# Run the simulation for a year (365 days)
# Convert days to hours since our time unit in this example is hours
env |>
  run(until = 365 * 24) |> 
  now()

get_palette <- scales::brewer_pal(type = "qual", palette = 1)
plot(waste_trajectory, fill = get_palette)

resources <- get_mon_resources(env)
plot(resources, metric = "utilization")

plot(resources, metric = "usage", c("generator", "collector", "handling facility"), items = "server")

plot(get_mon_resources(env), metric = "usage", "generator", items = "server", steps = TRUE)
plot(get_mon_resources(env), metric = "usage", "collector", items = "server", steps = TRUE)
plot(get_mon_resources(env), metric = "usage", "handling facility", items = "server", steps = TRUE)

arrivals <- get_mon_arrivals(env)
plot(arrivals, metric = "flow_time")
plot(arrivals, metric = "activity_time")
plot(arrivals, metric = "waiting_time")

```

# Test Framework 7

```{r}

# Initialize the simulation environment
env <- simmer("Waste Flow Simulation")

# Define global attributes for tracking total waste
env %>%
  add_global("total_waste_generated", 0) %>%
  add_global("total_waste_collected", 0) %>%
  add_global("total_waste_handled", 0)

# Define resources
env <- env %>%
  add_resource("storage", capacity = Inf) %>%
  add_resource("collection_truck", capacity = 1) %>%
  add_resource("waste_processor", capacity = 1)

# Define the trajectory for generating waste
generate_waste <- trajectory("Generate Waste") %>%
  seize("storage", 1) %>%
  set_global("total_waste_generated", function() get_global(env, "total_waste_generated") + runif(1, 10, 50)) %>%
  log_(function() paste("Waste generated:", get_global(env, "total_waste_generated"), "kg")) %>%
  timeout(function() rexp(1, rate = 0.5)) %>%
  release("storage", 1)

# Define the trajectory for collecting waste from storage
collect_waste <- trajectory("Collect Waste") %>%
  seize("collection_truck") %>%
  seize("storage", 1) %>%
  set_global("total_waste_collected", function() get_global(env, "total_waste_collected") + runif(1, 5, 25)) %>%
  log_(function() paste("Waste collected:", get_global(env, "total_waste_collected"), "kg")) %>%
  timeout(function() rexp(1, rate = 1)) %>%
  release("storage", 1) %>%
  release("collection_truck")

# Define the trajectory for handling waste
handle_waste <- trajectory("Handle Waste") %>%
  seize("collection_truck") %>%
  seize("waste_processor") %>%
  set_global("total_waste_handled", function() get_global(env, "total_waste_handled") + runif(1, 2, 15)) %>%
  log_(function() paste("Waste handled:", get_global(env, "total_waste_handled"), "kg")) %>%
  timeout(function() rexp(1, rate = 0.7)) %>%
  release("waste_processor") %>%
  release("collection_truck")

# Add generators for the trajectories
env <- env %>%
  add_generator("waste_gen", generate_waste, function() rexp(1, rate = 0.5)) %>%
  add_generator("waste_collector", collect_waste, function() rexp(1, rate = 1.5)) %>%
  add_generator("waste_handler", handle_waste, function() rexp(1, rate = 1))

# Run the simulation
env %>%
  run(until = 100) %>%
  invisible()

# Display results
get_mon_arrivals(env)
get_mon_resources(env)

# Print final amounts of waste generated, collected, and handled
# As the variables are global now we can access them directly
cat("Total waste generated (kg):", get_global(env, "total_waste_generated"), "\n")
cat("Total waste collected (kg):", get_global(env, "total_waste_collected"), "\n")
cat("Total waste handled (kg):", get_global(env, "total_waste_handled"), "\n")


```