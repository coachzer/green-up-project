---
title: "Analysis"
author: "Nikola Kovačević"
date: "07/08/2024"
format: html
editor: source
---

# Introduction

Conducting further analysis on the cleaned up data from the green-up-project.qmd file.

## Regions

current focus

## Companies

- after 2019 not included in the SURS data

per region, per company
number of companies
type of waste per companies, how many different types
node = a company in a region, point on a map
cant just focus on headquarters (HQ) of the node
try to figure out connection between operator, collector and storage
descriptive statistics for all years

# Setup

```{r setup, message = FALSE, warning = FALSE}
# Load required libraries
# List of required packages
packages <- c("tidyverse", "scales", "viridis", "ggplot2", "gganimate", 
              "ggridges", "plotly", "htmlwidgets", "reshape2", "skimr", "echarts4r")

# Function to check if a package is installed, and install it if not
install_and_load <- function(pkg) {
  if (!require(pkg, character.only = TRUE)) {
    install.packages(pkg, dependencies = TRUE)
    library(pkg, character.only = TRUE)
  }
}

if (!require("echarts4r.maps")) {
  install.packages("remotes")
  remotes::install_github('JohnCoene/echarts4r.maps')
}


# Apply the function to each package in the list
lapply(packages, install_and_load)


# List of municipalities for each region
POMURSKA <- c(
    "APAČE",
    "BELTINCI",
    "CANKOVA",
    "ČRENŠOVCI",
    "DOBROVNIK",
    "DOBRONAK",
    "GORNJA RADGONA",
    "GORNJI PETROVCI",
    "GRAD",
    "HODOŠ",
    "KOBILJE",
    "KRIŽEVCI",
    "KUZMA",
    "LENDAVA",
    "LENDAVA - LENDVA",
    "LJUTOMER",
    "MORAVSKE TOPLICE",
    "MURSKA SOBOTA",
    "ODRANCI",
    "PUCONCI",
    "RADENCI",
    "RAZKRIŽJE",
    "ROGAŠOVCI",
    "SVETI JURIJ OB ŠČAVNICI",
    "ŠALOVCI",
    "TIŠINA",
    "TURNIŠČE",
    "VELIKA POLANA",
    "VERŽEJ"
)

PODRAVSKA <- c(
    "BENEDIKT",
    "CERKVENJAK",
    "CIRKULANE",
    "DESTRNIK",
    "DORNAVA",
    "DUPLEK",
    "GORIŠNICA",
    "HAJDINA",
    "HOČE-SLIVNICA",
    "JURŠINCI",
    "KIDRIČEVO",
    "KUNGOTA",
    "LENART",
    "LOVRENC NA POHORJU",
    "MAJŠPERK",
    "MAKOLE",
    "MARIBOR",
    "MARKOVCI",
    "MIKLAVŽ NA DRAVSKEM POLJU",
    "OPLOTNICA",
    "ORMOŽ",
    "PESNICA",
    "PODLEHNIK",
    "POLJČANE",
    "PTUJ",
    "RAČE-FRAM",
    "RUŠE",
    "SELNICA OB DRAVI",
    "SLOVENSKA BISTRICA",
    "SREDIŠČE OB DRAVI",
    "STARŠE",
    "SVETA ANA",
    "SVETA TROJICA V SLOV. GORICAH",
    "SVETA TROJICA V SLOVENSKIH GORICAH",
    "SV. TROJICA V SLOV. GORICAH",
    "SVETI ANDRAŽ V SLOV. GORICAH",
    "SVETI JURIJ V SLOV. GORICAH",
    "SVETI JURIJ V SLOVENSKIH GORICAH",
    "SVETI TOMAŽ",
    "ŠENTILJ",
    "TRNOVSKA VAS",
    "VIDEM",
    "ZAVRČ",
    "ŽETALE"
)

KOROŠKA <- c(
    "ČRNA NA KOROŠKEM",
    "DRAVOGRAD",
    "MEŽICA",
    "MISLINJA",
    "MUTA",
    "PODVELKA",
    "PREVALJE",
    "RADLJE OB DRAVI",
    "PROŠKEM",
    "RAVNE NA KOROŠKEM",
    "RIBNICA NA POHORJU",
    "SLOVENJ GRADEC",
    "VUZENICA"
)

SAVINJSKA <- c(
    "BRASLOVČE",
    "CELJE",
    "DOBJE",
    "DOBRNA",
    "GORNJI GRAD",
    "KOZJE",
    "LAŠKO",
    "LJUBNO",
    "LUČE",
    "MOZIRJE",
    "NAZARJE",
    "PODČETRTEK",
    "POLZELA",
    "PREBOLD",
    "REČICA OB SAVINJI",
    "ROGAŠKA SLATINA",
    "ROGATEC",
    "SLOVENSKE KONJICE",
    "SOLČAVA",
    "ŠENTJUR",
    "ŠMARJE PRI JELŠAH",
    "ŠMARTNO OB PAKI",
    "ŠOŠTANJ",
    "ŠTORE",
    "TABOR",
    "VELENJE",
    "VITANJE",
    "VOJNIK",
    "VRANSKO",
    "ZREČE",
    "ŽALEC"
)

ZASAVSKA <- c("HRASTNIK", "LITIJA", "TRBOVLJE", "ZAGORJE OB SAVI")

POSAVSKA <- c(
    "BISTRICA OB SOTLI",
    "BREŽICE",
    "KOSTANJEVICA NA KRKI",
    "KRŠKO",
    "RADEČE",
    "SEVNICA"
)

JUGOVZHODNA.SLOVENIJA <- c(
    "ČRNOMELJ",
    "DOLENJSKE TOPLICE",
    "KOČEVJE",
    "KOSTEL",
    "LOŠKI POTOK",
    "METLIKA",
    "MIRNA",
    "MIRNA PEČ",
    "MOKRONOG-TREBELNO",
    "NOVO MESTO",
    "OSILNICA",
    "RIBNICA",
    "SEMIČ",
    "SODRAŽICA",
    "STRAŽA",
    "ŠENTJERNEJ",
    "ŠENTRUPERT",
    "ŠKOCJAN",
    "ŠMARJEŠKE TOPLICE",
    "TREBNJE",
    "ŽUŽEMBERK"
)

OSREDNJESLOVENSKA <- c(
    "BOROVNICA",
    "BREZOVICA",
    "DOBREPOLJE",
    "DOBROVA-POLHOV GRADEC",
    "DOL PRI LJUBLJANI",
    "DOMŽALE",
    "GROSUPLJE",
    "HORJUL",
    "IG",
    "IVANČNA GORICA",
    "KAMNIK",
    "KOMENDA",
    "LJUBLJANA",
    "LOG-DRAGOMER",
    "LOGATEC",
    "LUKOVICA",
    "MEDVODE",
    "MENGEŠ",
    "MORAVČE",
    "ŠKOFLJICA",
    "ŠMARTNO PRI LITIJI",
    "TRZIN",
    "VELIKE LAŠČE",
    "VODICE",
    "VRHNIKA"
)

GORENJSKA <- c(
    "BLED",
    "BOHINJ",
    "BOHINJSKA BISTRICA",
    "CERKLJE NA GORENJSKEM",
    "GORENJA VAS-POLJANE",
    "GORENJA VAS",
    "GORJE",
    "JESENICE",
    "JEZERSKO",
    "KRANJ",
    "KRANJSKA GORA",
    "NAKLO",
    "PREDDVOR",
    "RADOVLJICA",
    "ŠENČUR",
    "ŠKOFJA LOKA",
    "TRŽIČ",
    "ŽELEZNIKI",
    "ŽIRI",
    "ŽIROVNICA",
    "GOZD MARTULJEK"
)

PRIMORSKONOTRANJSKA <- c(
    "BLOKE",
    "CERKNICA",
    "ILIRSKA BISTRICA",
    "LOŠKA DOLINA",
    "PIVKA",
    "POSTOJNA",
    "NOVA VAS"
)

GORIŠKA <- c(
    "AJDOVŠČINA",
    "BOVEC",
    "BRDA",
    "CERKNO",
    "IDRIJA",
    "KANAL",
    "KOBARID",
    "MIREN-KOSTANJEVICA",
    "NOVA GORICA",
    "RENČE-VOGRSKO",
    "ŠEMPETER-VRTOJBA",
    "TOLMIN",
    "VIPAVA"
)

OBALNOKRAŠKA <- c(
    "ANKARAN",
    "DIVAČA",
    "HRPELJE-KOZINA",
    "IZOLA",
    "IZOLA - ISOLA",
    "KOMEN",
    "KOPER",
    "KOPER - CAPODISTRIA",
    "PIRAN",
    "PIRAN - PIRANO",
    "SEŽANA"
)

NEOPREDELJENO <- "NEOPREDELJENO"

UNDEFINED <- "UNDEFINED"

# Create a data frame with all municipality-region mappings
municipality_region_mapping <- data.frame(
    name_of_municipality = c(
        POMURSKA,
        PODRAVSKA,
        KOROŠKA,
        SAVINJSKA,
        ZASAVSKA,
        POSAVSKA,
        JUGOVZHODNA.SLOVENIJA,
        OSREDNJESLOVENSKA,
        GORENJSKA,
        PRIMORSKONOTRANJSKA,
        GORIŠKA,
        OBALNOKRAŠKA,
        NEOPREDELJENO,
        UNDEFINED
    ),
    statistical_region = c(
        rep("POMURSKA", length(POMURSKA)),
        rep("PODRAVSKA", length(PODRAVSKA)),
        rep("KOROŠKA", length(KOROŠKA)),
        rep("SAVINJSKA", length(SAVINJSKA)),
        rep("ZASAVSKA", length(ZASAVSKA)),
        rep("POSAVSKA", length(POSAVSKA)),
        rep("JUGOVZHODNA SLOVENIJA", length(JUGOVZHODNA.SLOVENIJA)),
        rep("OSREDNJESLOVENSKA", length(OSREDNJESLOVENSKA)),
        rep("GORENJSKA", length(GORENJSKA)),
        rep("PRIMORSKONOTRANJSKA", length(PRIMORSKONOTRANJSKA)),
        rep("GORIŠKA", length(GORIŠKA)),
        rep("OBALNOKRAŠKA", length(OBALNOKRAŠKA)),
        rep("NEOPREDELJENO", 1),
        rep("UNDEFINED", 1)
    )
)

# Function to assign clear names to waste types
clear_waste_name <- function(name) {
    case_when(
        # Sawdust, chips, cuttings, wood, particle board and veneer, not specified in 03 01 04
        name == "Sawdust/Chips/Wood, not specified in 03 01 04" ~ "Sawdust and Wood Cuttings",
        name == "Paper and cardboard packaging and cardboard packaging" ~ "Paper and Cardboard Packaging",
        name == "Wooden packaging" ~ "Wooden Packaging",
        name == "Wood" ~ "Wood",
        name == "Wood, not specified in 20 01 37" ~ "Other Wood Waste",
        name == "Waste bark and cork" ~ "Bark and Cork",
        name == "Waste not specified elsewhere" ~ "Unspecified Wood Waste",
        TRUE ~ name
    )
}

# Functions ----

## summarize waste stored at the start and at the end of the year per region and waste type, define a function, keep the year column
summarize_waste_storage <- function(data) {
    data |>
        group_by(year, statistical_region, type_of_waste) |>
        summarize(
            waste_stored_start_year = sum(waste_stored_start_year, na.rm = TRUE) / 1000,
            waste_stored_end_year = sum(waste_stored_end_year, na.rm = TRUE) / 1000
        ) |>
        ungroup()
}

```

# Generation Data Analysis Process
## Data Loading and Preparation

Data from 2018 to 2022 was loaded from separate CSV files for each year.
The 2018 data required special handling due to its different structure:

Two separate files were used: generation/waste_generation_18.csv and generation/waste_management_18.csv.
These files were joined based on common columns (region, company, and waste type).


## Data Standardization

Column names were standardized across all years to ensure consistency.
A 'year' column was added to the 2018 data to match the structure of other years.

## Data Transformation

### For 2018 data:

The 'delivered_to' column was transformed into separate columns for different types of waste transfer.
A 'total_waste_stored' column was created by summing 'waste_stored_start_year' and 'waste_generated'.


### For all years:

The 'clear_waste_name' function was applied to standardize waste type names.


## Data Combination

Data from 2019 to 2022 was combined using bind_rows().
The processed 2018 data was then appended to this combined dataset.

## Analysis and Visualization

Total waste generation by year was calculated and visualized.
Waste generation was analyzed by region and year.
Waste generation was analyzed by waste type and year.
Waste transferred for treatment and waste stored at the end of the year were analyzed separately.

## Key Data Transformations

Grouping: Data was frequently grouped by year, region, or waste type to allow for aggregate analysis.
Sum and Summarize: Within groups, waste quantities were summed to get total amounts.
Unit Conversion: Waste amounts were often divided by 1000 to convert from kilograms to tons.

## Visualization Techniques

Line plots were used to show trends over time.
Interactive plots were created using ggplotly() for more detailed exploration.

## Code

```{r generation_combined_data}
g.2022.data <- read_csv("2022 data/2022 filtered/generation/generation_22.csv")
g.2021.data <- read_csv("2021 data/2021 filtered/generation/generation_21.csv")
g.2020.data <- read_csv("2020 data/2020 filtered/generation/generation_20.csv")
g.2019.data <- read_csv("2019 data/2019 filtered/generation/generation_19.csv")
g.2018.data.1 <- read_csv("2018 data/2018 filtered/generation/waste_generation_18.csv")
g.2018.data.2 <- read_csv("2018 data/2018 filtered/generation/waste_management_18.csv")
g.2017.data.1 <- read_csv("2017 data/2017 filtered/generation/waste_generation_17.csv")
g.2017.data.2 <- read_csv("2017 data/2017 filtered/generation/waste_management_17.csv")
g.2016.data.1 <- read_csv("2016 data/2016 filtered/generation/waste_generation_16.csv")
g.2016.data.2 <- read_csv("2016 data/2016 filtered/generation/waste_management_16.csv")

g.2018.data.2 <- g.2018.data.2 |>
    mutate(
        waste_handed_to_others_RS = ifelse(
            delivered_to == "processing operator in RS",
            total_waste_given_away,
            0
        ),
        waste_sent_to_EU =
            ifelse(delivered_to == "other EU country", total_waste_given_away, 0),
        waste_treated_by_producer =
            ifelse(
                delivered_to == "processed the waste themselves",
                total_waste_given_away,
                0
            )
    )

g.2018.data.2 <- g.2018.data.2 |>
    select(-delivered_to, -total_waste_given_away)

g.2018.data.2 <- g.2018.data.2 |>
    group_by(statistical_region, type_of_waste) |>
    summarize(
        waste_handed_to_others_RS = sum(waste_handed_to_others_RS, na.rm = TRUE),
        waste_sent_to_EU = sum(waste_sent_to_EU, na.rm = TRUE),
        waste_treated_by_producer = sum(waste_treated_by_producer)
    ) |>
    ungroup()

# combine g.2018.data.1 and g.2018.data.2 based on the region and company
g.2018.data <- g.2018.data.1 |>
    left_join(
        g.2018.data.2,
        by = c(
            "statistical_region" = "statistical_region",
            # "name_of_company" = "name_of_company",
            "type_of_waste" = "type_of_waste"
        )
    )

# add year column to 2018 data
g.2018.data <- g.2018.data |>
    mutate(year = 2018)

# create a total waste stored column for 2018 data
g.2018.data <- g.2018.data |>
    mutate(total_waste_stored = waste_stored_start_year + waste_generated) |> 
    select(
        year,
        statistical_region,
        type_of_waste,
        total_waste_stored,
        waste_stored_start_year,
        waste_generated,
        waste_stored_end_year,
        waste_treated_by_producer,
        waste_handed_to_others_RS,
        waste_sent_to_EU
    )

skim(g.2018.data)

g.2017.data.2$management |> unique()

g.2017.data.2 <- g.2017.data.2 |>
    mutate(
        waste_handed_to_others_RS = ifelse(
            management == "given to another collector in RS" ,
            total_waste_given_away,
            0
        ),
        waste_sent_to_EU =
            ifelse(management == "sent to another EU country", total_waste_given_away, 0),
        waste_treated_by_producer =
            ifelse(
                management == "own processing (OVD for processing own waste)",
                total_waste_given_away,
                0
            )
    )

g.2017.data.2 <- g.2017.data.2 |>
    select(-management, -total_waste_given_away)

g.2017.data.2 <- g.2017.data.2 |>
    group_by(statistical_region, type_of_waste) |>
    summarize(
        waste_handed_to_others_RS = sum(waste_handed_to_others_RS, na.rm = TRUE),
        waste_sent_to_EU = sum(waste_sent_to_EU, na.rm = TRUE),
        waste_treated_by_producer = sum(waste_treated_by_producer)
    ) |>
    ungroup()

g.2017.data <- g.2017.data.1 |>
    left_join(
        g.2017.data.2,
        by = c(
            "statistical_region" = "statistical_region",
            "type_of_waste" = "type_of_waste"
        )
    )

g.2017.data <- g.2017.data |>
    mutate(year = 2017)

g.2017.data <- g.2017.data |>
    select(
        year,
        statistical_region,
        type_of_waste,
        total_waste_2017,
        waste_stored_start_year,
        total_waste_generated,
        waste_stored_end_year,
        waste_treated_by_producer,
        waste_handed_to_others_RS,
        waste_sent_to_EU
    )

g.2016.data.2 <- g.2016.data.2 |>
    mutate(
        waste_handed_to_others_RS = ifelse(
            management == "given to another collector in RS" ,
            total_waste_given_away,
            0
        ),
        waste_sent_to_EU =
            ifelse(management == "sent to another EU country", total_waste_given_away, 0),
        waste_treated_by_producer =
            ifelse(
                management == "own processing (OVD for processing own waste)",
                total_waste_given_away,
                0
            )
    )

g.2016.data.2 <- g.2016.data.2 |>
    select(-management, -total_waste_given_away)

g.2016.data.2 <- g.2016.data.2 |>
    group_by(statistical_region, type_of_waste) |>
    summarize(
        waste_handed_to_others_RS = sum(waste_handed_to_others_RS, na.rm = TRUE),
        waste_sent_to_EU = sum(waste_sent_to_EU, na.rm = TRUE),
        waste_treated_by_producer = sum(waste_treated_by_producer)
    ) |>
    ungroup()

g.2016.data <- g.2016.data.1 |>
    left_join(
        g.2016.data.2,
        by = c(
            "statistical_region" = "statistical_region",
            "type_of_waste" = "type_of_waste"
        )
    )

g.2016.data <- g.2016.data |>
    mutate(year = 2016)

g.2016.data[is.na(g.2016.data)] <- 0

g.2016.data <- g.2016.data |>
    mutate(waste_sent_for_treatment_outside_EU = 0)

g.2017.data <- g.2017.data |>
    mutate(waste_sent_for_treatment_outside_EU = 0)

g.2018.data <- g.2018.data |>
    mutate(waste_sent_for_treatment_outside_EU = 0)

names(g.2016.data) <- colnames(g.2022.data)
names(g.2017.data) <- colnames(g.2022.data)
names(g.2018.data) <- colnames(g.2022.data)
names(g.2019.data) <- colnames(g.2022.data)
names(g.2020.data) <- colnames(g.2022.data)
names(g.2021.data) <- colnames(g.2022.data)

combined_data <- bind_rows(g.2016.data, g.2017.data, g.2018.data, g.2019.data, g.2020.data, g.2021.data, g.2022.data)

# apply clear_waste_name
combined_data <- combined_data |>
    mutate(type_of_waste = clear_waste_name(type_of_waste))

# Summarize total waste generation by year
total_waste_by_year <- combined_data |>
    group_by(year) |>
    summarize(total_generated_waste = sum(generated_in_the_year, na.rm = TRUE))

# Plot total waste generation by year
t <- ggplot(total_waste_by_year, aes(x = year, y = total_generated_waste)) +
    geom_line(group = 1) +
    geom_point() +
    labs(title = "Total Wood Waste Generation by Year", x = "Year", y = "Total Generated Waste (tons)") +
    theme_minimal()

ggplotly(t, width = 1000, height = 500)

waste_by_region_year <- combined_data |>
    group_by(statistical_region, year) |>
    summarize(total_generated_waste = sum(generated_in_the_year, na.rm = TRUE)) |>
    ungroup()

# Plot total waste generation by region and year
t2 <- ggplot(
    waste_by_region_year,
    aes(x = year, y = total_generated_waste, color = statistical_region)
) +
    geom_line() +
    geom_point() +
    labs(title = "Total Wood Waste Generation by Region and Year", x = "Year", y = "Total Generated Waste (tons)") +
    theme_minimal()


ggplotly(t2, width = 1000, height = 500)

waste_by_type_year <- combined_data |>
    group_by(type_of_waste, year) |>
    summarize(total_generated_waste = sum(generated_in_the_year, na.rm = TRUE)) |>
    ungroup()

# Plot total waste generation by type and year
t3 <- ggplot(waste_by_type_year,
             aes(x = year, y = total_generated_waste, color = type_of_waste)) +
    geom_line() +
    geom_point() +
    labs(title = "Total Wood Waste Generation by Type and Year", x = "Year", y = "Total Generated Waste (tons)") +
    theme_minimal()

ggplotly(t3, width = 1000, height = 500)

# waste transferred for treatment
waste_transferred <- combined_data |>
    group_by(year) |>
    summarize(total_sent = sum(waste_transferred_for_treatment_in_RS, na.rm = TRUE))

# Plot total waste transferred for treatment by year
t4 <- ggplot(waste_transferred, aes(x = year, y = total_sent)) +
    geom_line(group = 1) +
    geom_point() +
    labs(title = "Total Wood Waste Transferred for Treatment by Year", x = "Year", y = "Total Waste Transferred (tons)") +
    theme_minimal()

ggplotly(t4, width = 1000, height = 500)

# Plot waste stored at the end of the year
waste_stored_at_the_end_year <- combined_data |>
    group_by(year) |>
    summarize(total_stored = sum(temporarily_stored_end_year, na.rm = TRUE))

t5 <- ggplot(waste_stored_at_the_end_year, aes(x = year, y = total_stored)) +
    geom_line(group = 1) +
    geom_point() +
    labs(title = "Total Wood Waste Stored at the End of the Year", x = "Year", y = "Total Waste Stored (tons)") +
    theme_minimal()

ggplotly(t5, width = 1000, height = 500)
```

# Collection Data Analysis Process

## Code

### Waste Storage

```{r collection_combined_data_waste_storage}
waste.storage.2022.data <- read_csv("2022 data/2022 filtered/collection/waste_storage_22.csv")
waste.storage.2021.data <- read_csv("2021 data/2021 filtered/collection/waste_storage_21.csv")
waste.storage.2020.data <- read_csv("2020 data/2020 filtered/collection/waste_storage_20.csv")
waste.storage.2019.data <- read_csv("2019 data/2019 filtered/collection/waste_storage_19.csv")
waste.storage.2018.data <- read_csv("2018 data/2018 filtered/collection/waste_storage_18.csv")
waste.storage.2017.data <- read_csv("2017 data/2017 filtered/collection/waste_storage_17.csv")
waste.storage.2016.data <- read_csv("2016 data/2016 filtered/collection/waste_storage_16.csv")

names(waste.storage.2021.data) <- colnames(waste.storage.2016.data)
names(waste.storage.2022.data) <- colnames(waste.storage.2016.data)

combined_storage_data <- bind_rows(waste.storage.2016.data, waste.storage.2017.data, waste.storage.2018.data, waste.storage.2019.data, waste.storage.2020.data, waste.storage.2021.data, waste.storage.2022.data)

# Reshape data for plotting
df_long <- melt(combined_storage_data,
                id.vars = c("statistical_region", "type_of_waste", "year"),
                measure.vars = c("waste_stored_start_year", "waste_stored_end_year"),
                variable.name = "storage_time", value.name = "total_storage"
)

# Grouped bar plot
t6 <- ggplot(df_long, aes(x = statistical_region, y = total_storage, fill = storage_time)) +
    geom_bar(stat = "identity", position = "dodge") +
    labs(
        title = "Waste Storage at Start and End of the Year",
        x = "Statistical Region", y = "Total Stored Waste"
    ) +
    scale_fill_manual(
        values = c("waste_stored_start_year" = "blue", "waste_stored_end_year" = "red"),
        labels = c("Start of Year", "End of Year")
    ) +
    coord_flip() +
    theme_minimal()

ggplotly(t6, width = 1000, height = 500)

yearly_data <- combined_storage_data |>
    group_by(year) |>
    summarize(
        total_start = sum(waste_stored_start_year, na.rm = TRUE),
        total_end = sum(waste_stored_end_year, na.rm = TRUE)
    )

t7 <- ggplot(yearly_data, aes(x = year)) +
    geom_point(aes(y = total_start, color = "Start of Year")) +
    geom_point(aes(y = total_end, color = "End of Year")) +
    geom_line(aes(y = total_start, color = "Start of Year")) +
    geom_line(aes(y = total_end, color = "End of Year")) +
    labs(
        title = "Total Stored Waste Over Time",
        y = "Total Stored Waste",
        color = "Time of Year"
    ) +
    theme_minimal()

ggplotly(t7, width = 1000, height = 500)


# outlier because of reporting or because of effects of COVID or something completely else?
```

### Waste Received

```{r collection_combined_data_waste_received}
waste.received.2016.data <- read_csv("2016 data/2016 filtered/collection/waste_collected_16.csv")
waste.received.2017.data <- read_csv("2017 data/2017 filtered/collection/waste_collected_17.csv")
waste.received.2018.data <- read_csv("2018 data/2018 filtered/collection/waste_collected_18.csv")
waste.received.2019.data <- read_csv("2019 data/2019 filtered/collection/waste_collected_19.csv")
waste.received.2020.data <- read_csv("2020 data/2020 filtered/collection/waste_received_20.csv")
waste.received.2021.data <- read_csv("2021 data/2021 filtered/collection/waste_received_21.csv")
waste.received.2022.data <- read_csv("2022 data/2022 filtered/collection/waste_received_22.csv")

names(waste.received.2019.data) <- colnames(waste.received.2022.data)
names(waste.received.2020.data) <- colnames(waste.received.2022.data)
names(waste.received.2021.data) <- colnames(waste.received.2022.data)

# Combine data
combined_received_data <- bind_rows(waste.received.2016.data, waste.received.2017.data, waste.received.2018.data, waste.received.2019.data, waste.received.2020.data, waste.received.2021.data, waste.received.2022.data)

# Reshape data for plotting
df_long_received <- melt(combined_received_data,
                         id.vars = c("statistical_region", "type_of_waste", "year"),
                         measure.vars = c("total_waste_collected", "waste_from_producers_no_record", "waste_from_producers_with_record", "waste_from_collectors_RS", "waste_from_processors_RS"),
                         variable.name = "source", value.name = "total_collected"
)

# Grouped bar plot
t8 <- ggplot(df_long_received, aes(x = statistical_region, y = total_collected, fill = source, group = type_of_waste)) +
    geom_bar(stat = "identity", position = "dodge") +
    labs(
        title = "Waste Received by Source",
        x = "Statistical Region", y = "Total Collected Waste"
    ) +
    scale_fill_manual(
        values = c("total_waste_collected" = "blue", "waste_from_producers_no_record" = "red", "waste_from_producers_with_record" = "green", "waste_from_collectors_RS" = "purple", "waste_from_processors_RS" = "orange"),
        labels = c("Total Collected", "From Producers (No Record)", "From Producers (With Record)", "From Collectors (RS)", "From Processors (RS)")
    ) +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))

ggplotly(t8, width = 1000, height = 1000)

# stacked bar plot, layer the total_waste_collected behind all the others
t8_stacked <- ggplot(df_long_received, aes(x = statistical_region, y = total_collected, fill = source)) +
    geom_bar(stat = "identity") +
    labs(
        title = "Waste Received by Source",
        x = "Statistical Region", y = "Total Collected Waste"
    ) +
    scale_fill_manual(
        values = c("total_waste_collected" = "blue", "waste_from_producers_no_record" = "red", "waste_from_producers_with_record" = "green", "waste_from_collectors_RS" = "purple", "waste_from_processors_RS" = "orange"),
        labels = c("Total Collected", "From Producers (No Record)", "From Producers (With Record)", "From Collectors (RS)", "From Processors (RS)")
    ) +
    coord_flip() +
    theme_minimal()

ggplotly(t8_stacked, width = 1000, height = 1000)

# Year plot
yearly_data_received <- combined_received_data |>
    group_by(year) |>
    summarize(
        total_collected = sum(total_waste_collected, na.rm = TRUE),
        from_producers_no_record = sum(waste_from_producers_no_record, na.rm = TRUE),
        from_producers_with_record = sum(waste_from_producers_with_record, na.rm = TRUE),
        from_collectors_RS = sum(waste_from_collectors_RS, na.rm = TRUE),
        from_processors_RS = sum(waste_from_processors_RS, na.rm = TRUE)
    )

# Line and point
t9 <- ggplot(yearly_data_received, aes(x = year)) +
    # geom_point(aes(y = total_collected, color = "Total Collected")) +
    # geom_line(aes(y = total_collected, color = "Total Collected")) +
    geom_line(aes(y = from_producers_no_record, color = "From Producers (No Record)")) +
    geom_line(aes(y = from_producers_with_record, color = "From Producers (With Record)")) +
    geom_line(aes(y = from_collectors_RS, color = "From Collectors (RS)")) +
    geom_line(aes(y = from_processors_RS, color = "From Processors (RS)")) +
    labs(
        title = "Waste Collected by Source Over Time",
        y = "Waste Collected",
        color = "Source"
    ) +
    theme_minimal()

ggplotly(t9, width = 1000, height = 500)
```

### Municipal Waste Collected

Here we have a problem because we are creating location data about companies based on the 2018 data, but even though 2018 data has address data inside the name_of_company column, it does not mean for certain that the address is the same as the address of the company in 2019. 

Therefore, we will be assuming that the address is the same for the company in 2019 as it was in 2018.


Consider proportional breakdown of waste collected by municipality, look for the residence of the region per municipality.

```{r collection_combined_data_municipal_waste_collected}
waste.management.2018.data <- read_csv("2018 data/2018 filtered/collection/municipal_waste_collected_18.csv")
waste.management.2019.data <- read_csv("2019 data/2019 filtered/collection/waste_collected_by_municipality_of_origin_19.csv")
waste.management.2020.data <- read_csv("2020 data/2020 filtered/collection/management_of_collected_waste_20.csv")
waste.management.2021.data <- read_csv("2021 data/2021 filtered/collection/waste_municipality_of_origin_21.csv")
waste.management.2022.data <- read_csv("2022 data/2022 filtered/collection/waste_municipality_of_origin_22.csv")



waste.management.2019.data <- waste.management.2019.data |>
    select(name_of_company, type_of_waste, total_waste_collected, municipal_waste_collected, waste_collected_from_activities)

colnames(waste.management.2018.data) <- colnames(waste.management.2019.data)

waste.management.2018.data <- waste.management.2018.data |>
    mutate(type_of_waste = clear_waste_name(type_of_waste))

waste.management.2019.data <- waste.management.2019.data |>
    mutate(type_of_waste = clear_waste_name(type_of_waste))

waste.management.2020.data <- waste.management.2020.data |>
    mutate(type_of_waste = clear_waste_name(type_of_waste))

waste.management.2021.data <- waste.management.2021.data |>
    mutate(type_of_waste = clear_waste_name(type_of_waste))

waste.management.2022.data <- waste.management.2022.data |>
    mutate(type_of_waste = clear_waste_name(type_of_waste))

# define municipality of origin
waste.management.2018.data <- waste.management.2018.data |>
    separate(name_of_company, into = c("company_name", "full_address"), sep = "; ", extra = "merge") |>
    mutate(address = full_address) |>
    mutate(name_of_municipality = str_extract(full_address, "\\d+\\s(.+)$") |>
               str_replace("^\\d+\\s", "")) |>
    select(-full_address)

# now based on name_of_company of 2018, add the new columns to 2019 data based on 2018 data
waste.management.2019.data <- waste.management.2019.data |>
    left_join(waste.management.2018.data |> select(company_name, address, name_of_municipality), by = c("name_of_company" = "company_name"))

waste.management.2019.data <- waste.management.2019.data |> distinct()

# if NA, then undefined
waste.management.2019.data <- waste.management.2019.data |>
    mutate(
        name_of_municipality = ifelse(is.na(name_of_municipality), "UNDEFINED", name_of_municipality),
        address = ifelse(is.na(address), "UNDEFINED", address)
    )

# add column for statistical regions based on name_of_municipality
waste.management.2018.data <- waste.management.2018.data |>
    left_join(municipality_region_mapping, by = "name_of_municipality")


# add column for statistical regions based on name_of_municipality
waste.management.2019.data <- waste.management.2019.data |>
    left_join(municipality_region_mapping, by = "name_of_municipality")


waste.management.2018.data <- waste.management.2018.data |>
    mutate(
        name_of_municipality = ifelse(name_of_municipality == "IZOLA - ISOLA", "IZOLA", name_of_municipality),
        name_of_municipality = ifelse(name_of_municipality == "KOPER - CAPODISTRIA", "KOPER", name_of_municipality),
        name_of_municipality = ifelse(name_of_municipality == "PIRAN - PIRANO", "PIRAN", name_of_municipality),
        name_of_municipality = ifelse(name_of_municipality == "LENDAVA - LENDVA", "LENDAVA", name_of_municipality)
    )

waste.management.2019.data <- waste.management.2019.data |>
    mutate(
        name_of_municipality = ifelse(name_of_municipality == "IZOLA - ISOLA", "IZOLA", name_of_municipality),
        name_of_municipality = ifelse(name_of_municipality == "KOPER - CAPODISTRIA", "KOPER", name_of_municipality),
        name_of_municipality = ifelse(name_of_municipality == "PIRAN - PIRANO", "PIRAN", name_of_municipality),
        name_of_municipality = ifelse(name_of_municipality == "LENDAVA - LENDVA", "LENDAVA", name_of_municipality)
    )

# change the address, name_of municipality and statistical region for KOMUNALA RADGONA, javno podjetje d.o.o.
waste.management.2019.data <- waste.management.2019.data |>
    mutate(
        address = ifelse(name_of_company == "KOMUNALA RADGONA, javno podjetje d.o.o.", "PARTIZANSKA CESTA 13, 9250 GORNJA RADGONA", address),
        name_of_municipality = ifelse(name_of_company == "KOMUNALA RADGONA, javno podjetje d.o.o.", "GORNJA RADGONA", name_of_municipality),
        statistical_region = ifelse(name_of_company == "KOMUNALA RADGONA, javno podjetje d.o.o.", "POMURSKA", statistical_region)
    )

# change the address, name_of municipality and statistical region for JAVNO PODJETJE VODOVOD KANALIZACIJA SNAGA d.o.o.
waste.management.2019.data <- waste.management.2019.data |>
    mutate(
        address = ifelse(name_of_company == "JAVNO PODJETJE VODOVOD KANALIZACIJA SNAGA d.o.o.", "VODOVODNA CESTA 90, 1001 LJUBLJANA", address),
        name_of_municipality = ifelse(name_of_company == "JAVNO PODJETJE VODOVOD KANALIZACIJA SNAGA d.o.o.", "LJUBLJANA", name_of_municipality),
        statistical_region = ifelse(name_of_company == "JAVNO PODJETJE VODOVOD KANALIZACIJA SNAGA d.o.o.", "OSREDNJESLOVENSKA", statistical_region)
    )

# remove company data as it is not needed for now
waste.management.2018.data <- waste.management.2018.data |> select(-company_name, -address)
waste.management.2019.data <- waste.management.2019.data |> select(-name_of_company, -address)

# add year columns to 2018 and 2019
waste.management.2018.data$year <- 2018
waste.management.2019.data$year <- 2019

# focus only on total waste collected for all years
waste.management.2018.data <- waste.management.2018.data |>
    group_by(year, statistical_region, name_of_municipality, type_of_waste) |>
    summarize(total_waste_collected = sum(total_waste_collected, na.rm = TRUE) / 1000) |>
    ungroup()

waste.management.2019.data <- waste.management.2019.data |>
    group_by(year, statistical_region, name_of_municipality, type_of_waste) |>
    summarize(total_waste_collected = sum(total_waste_collected, na.rm = TRUE) / 1000) |>
    ungroup()

waste.management.2020.data <- waste.management.2020.data |>
    group_by(year, statistical_region, name_of_municipality, type_of_waste) |>
    summarize(total_waste_collected = sum(municipal_waste_collected_by_municipality, na.rm = TRUE) / 1000) |>
    ungroup()

waste.management.2021.data <- waste.management.2021.data |>
    group_by(year, statistical_region, name_of_municipality, type_of_waste) |>
    summarize(total_waste_collected = sum(waste_by_municipality, na.rm = TRUE) / 1000) |>
    ungroup()

waste.management.2022.data <- waste.management.2022.data |>
    group_by(year, statistical_region, name_of_municipality, type_of_waste) |>
    summarize(total_waste_collected = sum(waste_by_municipality, na.rm = TRUE) / 1000) |>
    ungroup()

combined_municipal_data <- bind_rows(waste.management.2018.data, waste.management.2019.data, waste.management.2020.data, waste.management.2021.data, waste.management.2022.data)

# Reshape data for plotting
df_long_municipal <- melt(
    combined_municipal_data,
    id.vars = c(
        "year",
        "statistical_region",
        "name_of_municipality",
        "type_of_waste"
    ),
    measure.vars = c("total_waste_collected"),
    variable.name = "source",
    value.name = "total_collected"
)



t10 <- ggplot(df_long_municipal, aes(x = year, y = total_collected, color = name_of_municipality, group = type_of_waste)) +
  geom_line() +
  geom_point() +
  facet_wrap(~statistical_region, scales = "free_y") +
  labs(title = "Total Waste Collected by Municipality and Region (2018-2022)",
       x = "Year",
       y = "Total Waste Collected (in tons)",
       color = "Municipality") +
  theme_minimal()

ggplotly(t10, width = 1000, height = 1000)

# Calculate total waste for each municipality
top_municipalities <- df_long_municipal |>
  group_by(name_of_municipality) |>
  summarise(total_waste = sum(total_collected, na.rm = TRUE)) |>
  top_n(5, total_waste) |>
  pull(name_of_municipality)

# Filter the original dataset
df_top_municipal <- df_long_municipal |>
  filter(name_of_municipality %in% top_municipalities)

# Plot
t11 <- ggplot(df_top_municipal, aes(x = year, y = total_collected, color = name_of_municipality, group = name_of_municipality)) +
  geom_line() +
  geom_point() +
  labs(title = "Total Waste Collected by Top 5 Municipalities (2018-2022)",
       x = "Year",
       y = "Total Waste Collected (in tons)",
       color = "Municipality") +
  facet_wrap(~type_of_waste) +
  theme_minimal() +
  theme(legend.position = "bottom")

ggplotly(t11, width = 1000, height = 1000)

```

### Municipal waste collected by municipality of origin

```{r collection_combined_data_municipal_waste_collected_by_municipality}
waste.collected.2018.data <- read_csv("2018 data/2018 filtered/collection/municipal_waste_collected_separated_by_municipality_of_origin_18.csv")
waste.collected.2019.data <- read_csv("2019 data/2019 filtered/collection/municipal_waste_collected_by_municipality_of_origin_19.csv")
waste.collected.2020.data <- read_csv("2020 data/2020 filtered/collection/management_of_collected_waste_20.csv")
waste.collected.2021.data <- read_csv("2021 data/2021 filtered/collection/waste_municipality_of_origin_21.csv")
waste.collected.2022.data <- read_csv("2022 data/2022 filtered/collection/waste_municipality_of_origin_22.csv")

# for each year, we need to filter out waste_code
waste.collected.2018.data <- waste.collected.2018.data |>
    select(-waste_code)

waste.collected.2019.data <- waste.collected.2019.data |>
    select(-waste_code)

waste.collected.2020.data <- waste.collected.2020.data |>
    select(-waste_code)

waste.collected.2021.data <- waste.collected.2021.data |>
    select(-waste_code)

waste.collected.2022.data <- waste.collected.2022.data |>
    select(-waste_code)

# add years for 2018 and 2019
waste.collected.2018.data$year <- 2018

waste.collected.2019.data$year <- 2019

# summarize by year, statistical region, name of municipality and type of waste
waste.collected.2018.data <- waste.collected.2018.data |>
    group_by(year, statistical_region, name_of_municipality, type_of_waste) |>
    summarize(total_waste_collected = sum(total_waste_collected, na.rm = TRUE) / 1000) |>
    ungroup()

waste.collected.2019.data <- waste.collected.2019.data |>
    group_by(year, statistical_region, name_of_municipality, type_of_waste) |>
    summarize(total_waste_collected = sum(total_waste_collected, na.rm = TRUE) / 1000) |>
    ungroup()

waste.collected.2020.data <- waste.collected.2020.data |>
    group_by(year, statistical_region, name_of_municipality, type_of_waste) |>
    summarize(total_waste_collected = sum(municipal_waste_collected_by_municipality, na.rm = TRUE) / 1000) |>
    ungroup()

waste.collected.2021.data <- waste.collected.2021.data |>
    group_by(year, statistical_region, name_of_municipality, type_of_waste) |>
    summarize(total_waste_collected = sum(waste_by_municipality, na.rm = TRUE) / 1000) |>
    ungroup()

waste.collected.2022.data <- waste.collected.2022.data |>
    group_by(year, statistical_region, name_of_municipality, type_of_waste) |>
    summarize(total_waste_collected = sum(waste_by_municipality, na.rm = TRUE) / 1000) |>
    ungroup()

# clear_waste_name
waste.collected.2018.data <- waste.collected.2018.data |>
    mutate(type_of_waste = clear_waste_name(type_of_waste))

waste.collected.2019.data <- waste.collected.2019.data |>
    mutate(type_of_waste = clear_waste_name(type_of_waste))

waste.collected.2020.data <- waste.collected.2020.data |>
    mutate(type_of_waste = clear_waste_name(type_of_waste))

waste.collected.2021.data <- waste.collected.2021.data |>
    mutate(type_of_waste = clear_waste_name(type_of_waste))

waste.collected.2022.data <- waste.collected.2022.data |>
    mutate(type_of_waste = clear_waste_name(type_of_waste))

# combine data
combined_collected_data <- bind_rows(waste.collected.2018.data, waste.collected.2019.data, waste.collected.2020.data, waste.collected.2021.data, waste.collected.2022.data)

# Reshape data for plotting
df_long_collected <- melt(
    combined_collected_data,
    id.vars = c(
        "year",
        "statistical_region",
        "name_of_municipality",
        "type_of_waste"
    ),
    measure.vars = c("total_waste_collected"),
    variable.name = "source",
    value.name = "total_collected"
)

# stacked bar plot
t12 <- ggplot(df_long_collected, aes(x = year, y = total_collected, fill = name_of_municipality, group = type_of_waste)) +
  geom_bar(stat = "identity") +
  labs(title = "Total Waste Collected by Municipality of Origin",
       x = "Year",
       y = "Total Waste Collected (in tons)",
       fill = "Municipality") +
  theme_minimal()

ggplotly(t12, width = 1000, height = 1000)
```

### Municipal waste management

```{r collection_combined_data_municipal_waste_management}
waste.management.2016.data <- read_csv("2016 data/2016 filtered/collection/management_of_waste_collected_16.csv")
waste.management.2017.data <- read_csv("2017 data/2017 filtered/collection/management_of_waste_collected_17.csv")
waste.management.2018.data <- read_csv("2018 data/2018 filtered/collection/waste_management_18.csv")
waste.management.2019.data <- read_csv("2019 data/2019 filtered/collection/waste_handling_19.csv")
waste.management.2020.data <- read_csv("2020 data/2020 filtered/collection/home_composting_20.csv")
waste.management.2021.data <- read_csv("2021 data/2021 filtered/collection/municipal_waste_management_21.csv")
waste.management.2022.data <- read_csv("2022 data/2022 filtered/collection/municipal_waste_management_22.csv")

names(waste.management.2017.data) <- colnames(waste.management.2022.data)
names(waste.management.2020.data) <- colnames(waste.management.2022.data)
names(waste.management.2021.data) <- colnames(waste.management.2022.data)

waste.management.2016.data <- waste.management.2016.data |> 
  mutate(waste_sent_to_non_EU = 0)

waste.management.2018.data <- waste.management.2018.data |> 
  mutate(waste_sent_to_non_EU = 0)

waste.management.2019.data <- waste.management.2019.data |> 
  mutate(waste_sent_to_non_EU = 0)

names(waste.management.2016.data) <- colnames(waste.management.2022.data)
names(waste.management.2018.data) <- colnames(waste.management.2022.data)
names(waste.management.2019.data) <- colnames(waste.management.2022.data)

combined_management_data <- bind_rows(waste.management.2016.data, waste.management.2017.data, waste.management.2018.data, waste.management.2019.data, waste.management.2020.data, waste.management.2021.data, waste.management.2022.data)

# filter out statistical_region = "NEOPREDELJENO"
combined_management_data <- combined_management_data |>
    filter(statistical_region != "NEOPREDELJENO")

# we only have 1 instance of waste_sent_to_non_EU 
# combined_management_data <- combined_management_data |> select(-waste_sent_to_non_EU)

# Reshape data for plotting
df_long_management <- melt(
    combined_management_data,
    id.vars = c(
        "statistical_region",
        "type_of_waste",
        "year"
    ),
    measure.vars = c(
        "waste_handed_to_collectors_RS",
        "waste_delivered_to_operators_RS",
        "waste_sent_to_EU",
        "waste_sent_to_non_EU"
    ),
    variable.name = "source",
    value.name = "total_waste_given_away"
)

# stacked bar plot
t13 <- ggplot(df_long_management, aes(x = statistical_region, y = total_waste_given_away, fill = source)) +
  geom_bar(stat = "identity") +
  labs(title = "Waste Management by Source",
       x = "Statistical Region",
       y = "Total Waste Given Away",
       fill = "Source") +
    coord_flip() +
  theme_minimal()

ggplotly(t13, width = 1000, height = 500)


# define a bubble plot to see the data through the years
t14 <- ggplot(combined_management_data, aes(x = year, y = total_waste_given_away, size = total_waste_given_away, color = type_of_waste, group = statistical_region)) +
  geom_point() +
  labs(title = "Total Waste Given Away by Year",
       x = "Year",
       y = "Total Waste Given Away",
       color = "Type of Waste") +
  theme_minimal()

ggplotly(t14, width = 1000, height = 500)


df_aggregated <- df_long_management |>
  group_by(statistical_region, type_of_waste, year) |>
  summarise(total_amount = sum(total_waste_given_away, na.rm = TRUE))

t15 <- ggplot(df_aggregated, aes(x = statistical_region, y = total_amount, fill = type_of_waste)) +
  geom_bar(stat = "identity", position = "stack") +
  facet_wrap(~ year) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Total Waste by Region and Type",
       x = "Statistical Region",
       y = "Total Amount",
       fill = "Type of Waste")

ggplotly(t15, width = 1000, height = 1000)

df_time_trend <- df_long_management |>
  group_by(statistical_region, year) |>
  summarise(total_amount = sum(total_waste_given_away, na.rm = TRUE))

t16 <- ggplot(df_time_trend, aes(x = year, y = total_amount, color = statistical_region, group = statistical_region)) +
  geom_line() +
  geom_point() +
  theme_minimal() +
  labs(title = "Waste Management Trend Over Time by Region",
       x = "Year",
       y = "Total Amount",
       color = "Statistical Region") +
  theme(legend.position = "bottom")

ggplotly(t16, width = 1000, height = 1000)

df_time_trend_by_type <- df_long_management |>
  group_by(statistical_region, year, type_of_waste) |> 
  summarise(total_amount = sum(total_waste_given_away, na.rm = TRUE))

t17 <- ggplot(df_time_trend_by_type, aes(x = year, y = total_amount, fill = type_of_waste)) +
  geom_area() +
  facet_wrap(~statistical_region, scales = "free_y") +
  scale_fill_brewer(palette = "Set1") +
  theme_minimal() +
  labs(title = "Waste Composition Over Time by Region",
       x = "Year",
       y = "Total Amount",
       fill = "Type of Waste") +
  theme(legend.position = "bottom")

ggplotly(t17, width = 1000, height = 1000)

t18 <- ggplot(df_time_trend, aes(x = year, y = statistical_region, fill = total_amount)) +
  geom_tile() +
  scale_fill_viridis_c() +
  theme_minimal() +
  labs(title = "Waste Management Heatmap",
       x = "Year",
       y = "Statistical Region",
       fill = "Total Amount")

ggplotly(t18, width = 1000, height = 1000)

df_sparklines <- df_time_trend |>
  group_by(statistical_region) |>
  mutate(normalized_amount = (total_amount - min(total_amount)) / 
           (max(total_amount) - min(total_amount))) |>
  ungroup()

t19 <- ggplot(df_sparklines, aes(x = year, y = normalized_amount, group = statistical_region)) +
  geom_line() +
  facet_wrap(~ statistical_region, ncol = 4) +
  theme_minimal() +
  theme(axis.text.y = element_blank(),
        axis.title = element_blank(),
        panel.grid = element_blank()) +
  labs(title = "Waste Management Trends by Region (Normalized)")

ggplotly(t19, width = 1000, height = 1000)


```

### Household composting - No relevant data

# Treatment Data Analysis Process

## Code 

### Waste Storage

```{r treatment_combined_data_waste_storage}
waste.storage.2016.data <- read_csv("2016 data/2016 filtered/treatment/waste_storage_16.csv")
waste.storage.2017.data <- read_csv("2017 data/2017 filtered/treatment/waste_storage_17.csv")
waste.storage.2018.data <- read_csv("2018 data/2018 filtered/treatment/waste_storage_18.csv")
waste.storage.2019.data <- read_csv("2019 data/2019 filtered/treatment/waste_storage_19.csv")
waste.storage.2020.data <- read_csv("2020 data/2020 filtered/treatment/waste_storage_20.csv")
waste.storage.2021.data <- read_csv("2021 data/2021 filtered/treatment/waste_storage_21.csv")
waste.storage.2022.data <- read_csv("2022 data/2022 filtered/treatment/prev_treatment_22.csv")

waste.storage.2021.data <- waste.storage.2021.data |> 
  group_by(year, statistical_region, type_of_waste) |>
  summarize(waste_stored_start_year = sum(waste_stored_start_year, na.rm = TRUE),
            waste_stored_end_year = sum(waste_stored_end_year, na.rm = TRUE)) |>
  ungroup()

waste.storage.2022.data <- waste.storage.2022.data |> 
  mutate(waste_stored_end_year = 0)

names(waste.storage.2022.data) <- colnames(waste.storage.2021.data)

combined_storage_data <- bind_rows(waste.storage.2016.data, waste.storage.2017.data, waste.storage.2018.data, waste.storage.2019.data, waste.storage.2020.data, waste.storage.2021.data, waste.storage.2022.data)

# Factor the year column
combined_storage_data$year <- factor(combined_storage_data$year)

# Add a lagged column to compare end year with next year's start year
combined_storage_data <- combined_storage_data |>
    arrange(statistical_region, type_of_waste, year) |>
    group_by(statistical_region, type_of_waste) |>
    mutate(next_year_start = lead(waste_stored_start_year, 1)) |>
    ungroup()

# Identify matching instances
matching_instances <- combined_storage_data |>
    filter(waste_stored_end_year == next_year_start) |>
    select(
        year,
        statistical_region,
        type_of_waste,
        waste_stored_start_year,
        waste_stored_end_year,
        next_year_start
    )

summary_table <- matching_instances |>
    group_by(year, statistical_region, type_of_waste) |>
    summarise(matches = n()) |>
    arrange(year, statistical_region, type_of_waste)

print(summary_table)

t20 <- ggplot(combined_storage_data, aes(
    x = year,
    group = interaction(statistical_region, type_of_waste)
)) +
    geom_line(aes(y = waste_stored_start_year, color = "Start Year")) +
    geom_line(aes(y = waste_stored_end_year, color = "End Year")) +
    geom_point(
        data = matching_instances,
        aes(y = waste_stored_end_year),
        color = "red",
        size = 3
    ) +
    labs(
        title = "Waste Storage Data (2018-2022)",
        subtitle = "Red points indicate matching instances where End Year matches Start Year of the next year",
        x = "Year",
        y = "Waste Stored",
        color = "Legend"
    ) +
    facet_wrap( ~ statistical_region + type_of_waste, scales = "free_y") +
    theme_minimal()

ggplotly(t20, width = 1000, height = 1000)

# Ensure every combination of statistical_region, type_of_waste, and year exists
complete_data <- combined_storage_data |>
    complete(
        year,
        nesting(statistical_region, type_of_waste),
        fill = list(
            waste_stored_start_year = 0,
            waste_stored_end_year = 0
        )
    )

# Add a lagged column for the previous year's end year and calculate the difference
complete_data <- complete_data |>
    arrange(statistical_region, type_of_waste, year) |>
    group_by(statistical_region, type_of_waste) |>
    mutate(previous_end_year = lag(waste_stored_end_year, 1)) |>
    ungroup()

# Create flags for "Outside Period"
complete_data <- complete_data |>
    mutate(
        outside_period_next_start = ifelse(is.na(next_year_start), TRUE, FALSE),
        outside_period_prev_end = ifelse(is.na(previous_end_year), TRUE, FALSE)
    )

# Replace NA with 0 or another placeholder for plotting purposes
complete_data <- complete_data |>
    mutate(
        next_year_start = ifelse(is.na(next_year_start), 0, next_year_start),
        previous_end_year = ifelse(is.na(previous_end_year), 0, previous_end_year)
    )

complete_data <- complete_data |>
    mutate(difference = waste_stored_start_year - previous_end_year)


# Define a threshold for significant change (e.g., 10% increase or decrease)
threshold <- 0.1

complete_data <- complete_data |>
    mutate(
        significant_change = case_when(
            difference > (previous_end_year * threshold) ~ "Increase",
            difference < -(previous_end_year * threshold) ~ "Decrease",
            TRUE ~ "No Significant Change"
        )
    )

filter_by_waste <- complete_data |>
    filter(
        type_of_waste == "Paper/Cardboard Packaging" &
            statistical_region == "OSREDNJESLOVENSKA"
    )

# Define Unicode arrows
arrow_up <- "\u2191"   # Up arrow
arrow_down <- "\u2193" # Down arrow
equal <- "\u003d"      # Equal sign

t21 <- ggplot(filter_by_waste, aes(x = year, group = statistical_region)) +
  geom_line(aes(y = waste_stored_start_year, color = "Start Year", linetype = "Start Year")) +
  geom_line(aes(y = waste_stored_end_year, color = "End Year", linetype = "End Year")) +
  geom_point(aes(y = waste_stored_start_year, 
                 shape = significant_change, 
                 color = significant_change,
                 text = paste("Year:", year,
                              "<br>Waste at start:", waste_stored_start_year,
                              "<br>Change:", significant_change), size = 5)) +
    geom_point(aes(y = waste_stored_end_year, 
                 shape = "End Year", 
                 color = "End Year",
                 text = paste("Year:", year,
                              "<br>Waste at end:", waste_stored_end_year), size = 5)) +
  scale_shape_manual(values = c("Increase" = 24, "Decrease" = 25, "No Change" = 21, "End Year" = 21),
                     name = "Change in Waste") +
  scale_color_manual(values = c("Start Year" = "blue", "End Year" = "red",
                                "Increase" = "#19a90b", "Decrease" = "#a90b0b", "No Change" = "grey"),
                     name = "Data Type") +
  scale_linetype_manual(values = c("Start Year" = "solid", "End Year" = "solid"),
                        name = "Year Type") +
  labs(x = "Year",
       y = "Waste Stored (in tons)") +
  facet_wrap(~statistical_region, scales = "free_y") +
  theme_minimal() +
  theme(legend.position = "right",
        legend.box = "vertical",
        legend.margin = margin(t = 10, r = 10, b = 10, l = 10),
        legend.spacing.y = unit(0.5, "cm"))

# Convert to plotly
t22 <- ggplotly(t21, width = 1000, height = 1000, tooltip = "text") 

# Adjust legend
t22 <- t22 |> layout(legend = list(x = 1.02, y = 0.5), 
                 title = list(text = paste0('Paper/Cardboard Packaging Waste Storage Data',
                                            '<br>',
                                            '<sup>',
                                            'Triangles indicate significant increases or decreases in waste compared to previous year end',
                                            '</sup>'),
                              x = 0.01),
                 margin = list(l = 50, r = 50, b = 100, t = 80, pad = 4))

t22

# Prepare data for waterfall chart
waterfall_data <- filter_by_waste |>
  arrange(year) |>
  mutate(
    end_year = paste0(as.numeric(levels(year))[year], " End"),
    start_next_year = paste0(as.numeric(levels(year))[year] + 1, " Start"),
    end_amount = waste_stored_end_year,
    start_amount = lead(waste_stored_start_year),
    difference = lead(waste_stored_start_year) - waste_stored_end_year
  ) |>
  select(end_year, start_next_year, end_amount, start_amount, difference) |>
  tidyr::pivot_longer(
    cols = c(end_year, start_next_year),
    names_to = "type",
    values_to = "year"
  ) |>
  mutate(
    amount = ifelse(type == "end_year", end_amount, difference),
    cumulative = cumsum(amount),
    color_category = case_when(
      type == "end_year" ~ "End Year",
      difference > 0 ~ "Increase",
      difference < 0 ~ "Decrease",
      TRUE ~ "No Change"
    )
  ) |>
  filter(!is.na(difference))

# Create a new column for ordered factor
waterfall_data$year <- with(waterfall_data, 
                            paste(year, ifelse(type == "end_year", "", ""), sep = " "))
# Ensure 'order_label' is a factor with the desired order
waterfall_data$year <- factor(waterfall_data$year, 
                              levels = unique(waterfall_data$year))

# Create the waterfall plot with new color scheme
waterfall_plot <- ggplot(waterfall_data, aes(x = year, y = ifelse(waterfall_data$amount == 0, start_amount, amount), fill = color_category)) +
  geom_col(color = "black",
      aes(text = paste0(
    "Year: ", year, "<br>",
    "Amount: ", round(amount, 2), " tons<br>",
    "Cumulative: ", round(cumulative, 2), " tons"
  ))) +
  geom_text(aes(label = round(amount, 1), 
                y = ifelse(amount >= 0, amount, amount) + 0.05 * max(amount)), 
            vjust = 0, size = 3) +
  scale_fill_manual(values = c("Increase" = "#006400", "Decrease" = "#8B0000", 
                               "No Change" = "#808080", "End Year" = "#4169E1"),
                    name = "Change Type") +
  labs(x = "Year",
       y = "Waste Amount (tons)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Convert to plotly for interactivity
t23 <- ggplotly(waterfall_plot, width = 1000, height = 1000, tooltip = "text") 

# Adjust layout
t23 <- t23 |> layout(
  title = list(text = paste0("Comparison of Waste Stored at Year's End and Next Year's Start",
                             '<br>',
                             '<sup>',
                             'Paper/Cardboard Packaging in OSREDNJESLOVENSKA Region',
                             '</sup>'),
               x = 0.01),
  margin = list(t = 100)
)

t23

variant_data <- filter_by_waste |>
  arrange(year) |>
  mutate(
    end_year = paste0(as.numeric(levels(year))[year], " End"),
    start_next_year = paste0(as.numeric(levels(year))[year] + 1, " Start"),
    end_amount = waste_stored_end_year,
    start_amount = lead(waste_stored_start_year),
    difference = lead(waste_stored_start_year) - waste_stored_end_year
  ) |>
  select(end_year, start_next_year, end_amount, start_amount, difference) |>
  tidyr::pivot_longer(
    cols = c(end_year, start_next_year),
    names_to = "type",
    values_to = "year"
  ) |>
  mutate(
    amount = ifelse(type == "end_year", end_amount, start_amount),
    difference = ifelse(type == "start_next_year", difference, 0),
    cumulative = cumsum(amount),
    color_category = case_when(
      type == "end_year" ~ "End Year",
      difference > 0 ~ "Increase",
      difference < 0 ~ "Decrease",
      TRUE ~ "No Change"
    )
  ) |>
  filter(!is.na(start_amount))
# Create a new column for ordered factor
variant_data$year <- with(variant_data, 
                          paste(year, ifelse(type == "end_year", "", ""), sep = " "))
# Ensure 'year' is a factor with the desired order
variant_data$year <- factor(variant_data$year, 
                            levels = unique(variant_data$year))
# Prepare data for side-by-side bars
variant_data_long <- variant_data |>
  tidyr::pivot_longer(
    cols = c(amount, difference),
    names_to = "bar_type",
    values_to = "value"
  ) |>
  mutate(
    bar_category = case_when(
      bar_type == "amount" & type == "end_year" ~ "End Year",
      bar_type == "amount" & type != "end_year" ~ "Start Amount",
      bar_type == "difference" & color_category == "Increase" ~ "Increase",
      bar_type == "difference" & color_category == "Decrease" ~ "Decrease",
      TRUE ~ "No Change"
    )
  )

# Define the desired order of bar categories
desired_order <- c("Start Amount", "Increase", "End Year", "Decrease", "No Change")

# Reorder the data based on the desired order of bar categories
variant_data_long <- variant_data_long |> 
  mutate(bar_category = factor(bar_category, levels = desired_order)) |> 
  arrange(bar_category)

# Create the variant waterfall plot with side-by-side bars
variant_plot <- ggplot(variant_data_long, aes(x = year, y = value, fill = bar_category)) +
  geom_col(position = position_identity(),
           color = "black",
           aes(text = paste0(
             "Year: ", year, "<br>",
             "Type: ", bar_type, "<br>",
             "Value: ", round(value, 2), " tons<br>"
             #"Cumulative: ", round(cumulative, 2), " tons"
           ))) +
    geom_text(aes(label = ifelse(value > 0, round(value, 1), ifelse(value == 0, NA, round(value, 1))),
                y = ifelse(value >= 0, value, value) + 0.05 * max(value)),
            position = position_dodge(width = 0.9),
            vjust = -0.5, size = 3) +
  scale_fill_manual(values = c("End Year" = "#4169E1", 
                               "Increase" = "#006400",  # Increase from Last Year
                               "Start Amount" = "#808080",
                               "Decrease" = "#8B0000", # Decrease from Last Year
                               "No Change" = "#D3D3D3"),
                    name = "Type") +
  labs(x = "Year",
       y = "Waste Amount (tons)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Convert variant plot to plotly for interactivity
t24 <- ggplotly(variant_plot, width = 1000, height = 800, tooltip = "text") 

# Adjust layout for variant plot
t24 <- t24 |> layout(
  title = list(text = paste0("Comparison of Waste Stored at Year's End and Next Year's Start (Variant)",
                             '<br>',
                             '<sup>',
                             'Paper/Cardboard Packaging in OSREDNJESLOVENSKA Region',
                             '</sup>'),
               x = 0.01),
  margin = list(t = 100)
)


t23
t24

```

### Waste Collected

```{r treatment_combined_data_waste_collected}
waste.collected.2016.data <- read_csv("2016 data/2016 filtered/treatment/waste_collected_16.csv")
waste.collected.2017.data <- read_csv("2017 data/2017 filtered/treatment/waste_collected_17.csv")
waste.collected.2018.data <- read_csv("2018 data/2018 filtered/treatment/waste_collected_18.csv")
waste.collected.2019.data <- read_csv("2019 data/2019 filtered/treatment/waste_collected_19.csv")
waste.collected.2020.data <- read_csv("2020 data/2020 filtered/treatment/waste_received_20.csv")
waste.collected.2021.data <- read_csv("2021 data/2021 filtered/treatment/waste_received_21.csv")
waste.collected.2022.data <- read_csv("2022 data/2022 filtered/treatment/waste_received_22.csv")

waste.collected.2019.data <- waste.collected.2019.data |> 
  mutate(waste_received_own_waste = 0)

waste.collected.2019.data <- waste.collected.2019.data |> 
  select(year, statistical_region, type_of_waste, waste_collected_by_municipality, waste_received_own_waste, waste_received_from_producer, waste_received_from_collector, waste_received_from_processing_operator, waste_received_from_other_EU_country, waste_received_from_other_country_outside_EU)

names(waste.collected.2016.data) <- colnames(waste.collected.2021.data)
names(waste.collected.2017.data) <- colnames(waste.collected.2021.data)
names(waste.collected.2018.data) <- colnames(waste.collected.2021.data)
names(waste.collected.2019.data) <- colnames(waste.collected.2021.data)
names(waste.collected.2020.data) <- colnames(waste.collected.2021.data)

# define a function to add to each waste.collected the column untreated_waste_from_storage_start_year
add_untreated_waste <- function(data) {
  data |> 
    group_by(statistical_region, type_of_waste) |>
    mutate(untreated_waste_from_storage_start_year = 0) |>
    ungroup()
}

waste.collected.2016.data <- add_untreated_waste(waste.collected.2016.data)
waste.collected.2017.data <- add_untreated_waste(waste.collected.2017.data)
waste.collected.2018.data <- add_untreated_waste(waste.collected.2018.data)
waste.collected.2019.data <- add_untreated_waste(waste.collected.2019.data)
waste.collected.2020.data <- add_untreated_waste(waste.collected.2020.data)
waste.collected.2021.data <- add_untreated_waste(waste.collected.2021.data)

colnames(waste.collected.2021.data)

# define a function to select columns
select_columns <- function(data) {
  data |> 
    select(year, statistical_region, type_of_waste, waste_collected_by_municipality, untreated_waste_from_storage_start_year, waste_received_own_waste, waste_received_from_producers_RS, waste_received_from_collectors_RS, waste_received_from_processors_RS, waste_received_from_EU, waste_received_from_non_EU)
}

waste.collected.2016.data <- select_columns(waste.collected.2016.data)
waste.collected.2017.data <- select_columns(waste.collected.2017.data)
waste.collected.2018.data <- select_columns(waste.collected.2018.data)
waste.collected.2019.data <- select_columns(waste.collected.2019.data)
waste.collected.2020.data <- select_columns(waste.collected.2020.data)
waste.collected.2021.data <- select_columns(waste.collected.2021.data)

names(waste.collected.2022.data) <- colnames(waste.collected.2021.data)

combined_collected_data <- bind_rows(waste.collected.2016.data, waste.collected.2017.data, waste.collected.2018.data, waste.collected.2019.data, waste.collected.2020.data, waste.collected.2021.data, waste.collected.2022.data)

combined_collected_data <- combined_collected_data |>
  mutate(type_of_waste = clear_waste_name(type_of_waste))

# Summarize total waste received by year
yearly_total <- combined_collected_data |>
  group_by(year) |>
  summarize(total_waste = sum(waste_collected_by_municipality, na.rm = TRUE))

# Create the plotly line chart
plot_yearly <- plot_ly(yearly_total, x = ~year, y = ~total_waste, type = 'scatter', mode = 'lines+markers') |>
  layout(title = "Total Waste Received Over Years",
         xaxis = list(title = "Year"),
         yaxis = list(title = "Total Waste Received"))

# Display the plot
plot_yearly

# Summarize total waste received by statistical region
region_total <- combined_collected_data |>
  group_by(statistical_region) |>
  summarize(total_waste = sum(waste_collected_by_municipality, na.rm = TRUE)) |>
  arrange(desc(total_waste))

# Create the plotly bar chart
plot_region <- plot_ly(region_total, x = ~statistical_region, y = ~total_waste, type = 'bar') |>
  layout(title = "Total Waste Received by Statistical Region",
         xaxis = list(title = "Statistical Region"),
         yaxis = list(title = "Total Waste Received"))

# Display the plot
plot_region

# Summarize total waste received by type of waste
waste_type_total <- combined_collected_data |>
  group_by(type_of_waste) |>
  summarize(total_waste = sum(waste_collected_by_municipality, na.rm = TRUE)) |>
  arrange(desc(total_waste)) |>
  top_n(5) # Show top 10 waste types for better visualization

# Create the plotly bar chart
plot_waste_type <- plot_ly(waste_type_total, x = ~type_of_waste, y = ~total_waste, type = 'bar') |>
  layout(title = "Total Waste Received by Type of Waste (Top 10)",
         xaxis = list(title = "Type of Waste"),
         yaxis = list(title = "Total Waste Received"))

# Display the plot
plot_waste_type

```

### Treatment of Waste

```{r treatment_combined_data_waste_treatment}
waste.treatment.2016.data <- read_csv("2016 data/2016 filtered/treatment/treatment_of_waste_16.csv")
waste.treatment.2017.data <- read_csv("2017 data/2017 filtered/treatment/treatment_of_waste_17.csv")
waste.treatment.2018.data <- read_csv("2018 data/2018 filtered/treatment/treatment_of_waste_18.csv")
waste.treatment.2019.data <- read_csv("2019 data/2019 filtered/treatment/treatment_of_waste_received_19.csv")
waste.treatment.2020.data <- read_csv("2020 data/2020 filtered/treatment/treatment_of_waste_received_20.csv")
waste.treatment.2021.data <- read_csv("2021 data/2021 filtered/treatment/treatment_of_waste_received_21.csv")
waste.treatment.2022.data <- read_csv("2022 data/2022 filtered/treatment/waste_treatment_22.csv")

names(waste.treatment.2016.data) <- colnames(waste.treatment.2021.data)
names(waste.treatment.2017.data) <- colnames(waste.treatment.2021.data)
names(waste.treatment.2018.data) <- colnames(waste.treatment.2021.data)
names(waste.treatment.2019.data) <- colnames(waste.treatment.2021.data)
names(waste.treatment.2022.data) <- colnames(waste.treatment.2021.data)

combined_treatment_data <- bind_rows(waste.treatment.2016.data, waste.treatment.2017.data, waste.treatment.2018.data, waste.treatment.2019.data, waste.treatment.2020.data, waste.treatment.2021.data, waste.treatment.2022.data)

# if statistical_region NA, set to "NEOPREDELJENO"
combined_treatment_data <- combined_treatment_data |>
    mutate(statistical_region = ifelse(is.na(statistical_region), "NEOPREDELJENO", statistical_region))

combined_treatment_data <- combined_treatment_data |>
    mutate(type_of_waste = clear_waste_name(type_of_waste))

# Aggregate data by year and type of waste
aggregated_data <- combined_treatment_data |>
  # filter out statistical_region = "NEOPREDELJENO"
  filter(statistical_region != "NEOPREDELJENO") |>
  group_by(year, type_of_waste) |>
  summarize(total_waste = sum(waste_entering_treatment_process, na.rm = TRUE))

# Create the ggplot visualization
p <- ggplot(aggregated_data, aes(x = year, y = total_waste, color = type_of_waste, group = type_of_waste)) +
  geom_line(size = 1) +
  geom_point(size = 3) +
  labs(title = "Waste Treatment Over Time by Waste Type",
       x = "Year",
       y = "Total Waste Entering Treatment Process",
       color = "Type of Waste") +
  theme_minimal() +
  theme(legend.position = "bottom",
        plot.title = element_text(hjust = 0.5, face = "bold"))

ggplotly(p, width = 1000, height = 800)

```

### Waste Generated - ON HOLD

```{r treatment_combined_data_waste_generated}
waste.generated.2016.data <- read_csv("2016 data/2016 filtered/treatment/waste_generated_and_untreated_16.csv")
waste.generated.2017.data <- read_csv("2017 data/2017 filtered/treatment/waste_generated_and_untreated_17.csv")
waste.generated.2018.data <- read_csv("2018 data/2018 filtered/treatment/waste_generated_18.csv")
waste.generated.2019.data <- read_csv("2019 data/2019 filtered/treatment/waste_generated_in_treatment_process_19.csv")
waste.generated.2020.data <- read_csv("2020 data/2020 filtered/treatment/management_of_waste_from_treatment_operations_and_untreated_waste_20.csv")
waste.generated.2021.data <- read_csv("2021 data/2021 filtered/treatment/management_of_waste_from_treatment_operations_and_untreated_waste_21.csv")

```

### Municipal Waste Received

```{r treatment_combined_data_municipal_waste_received}
municipal.waste.received.2018.data <- read_csv("2018 data/2018 filtered/treatment/municipal_waste_received_18.csv")
municipal.waste.received.2019.data <- read_csv("2019 data/2019 filtered/treatment/municipal_waste_received_for_treatment_19.csv")
municipal.waste.received.2020.data <- read_csv("2020 data/2020 filtered/treatment/municipal_waste_received_for_treatment,_separated_by_municipality_of_origin_20.csv")
municipal.waste.received.2021.data <- read_csv("2021 data/2021 filtered/treatment/municipal_waste_received_for_treatment,_separated_by_municipality_of_origin_21.csv")
# exclude 2022 data, as we cannot compare it with the previous years, because the data is missing type_of_waste column
municipal.waste.received.2022.data <- read_csv("2022 data/2022 filtered/treatment/mbt_municipal_origin_22.csv")

municipal.waste.received.2018.data <- municipal.waste.received.2018.data |> 
  group_by(year, statistical_region, name_of_municipality, type_of_waste) |>
  summarize(total_waste_received = sum(total_waste_received, na.rm = TRUE)) |> 
  ungroup()

names(municipal.waste.received.2018.data) <- colnames(municipal.waste.received.2021.data)
names(municipal.waste.received.2019.data) <- colnames(municipal.waste.received.2021.data)

combined_municipal_waste_received_data <- bind_rows(municipal.waste.received.2018.data, municipal.waste.received.2019.data, municipal.waste.received.2020.data, municipal.waste.received.2021.data)

combined_municipal_waste_received_data <- combined_municipal_waste_received_data |>
    mutate(type_of_waste = clear_waste_name(type_of_waste))

colnames(combined_municipal_waste_received_data)

# Column Content:
# 1. Year
# 2. Statistical Region
# 3. Name of Municipality
# 4. Type of Waste
# 5. Total Waste Received

# Calculate the average waste collected per municipality across all years
waste_by_municipality <- combined_municipal_waste_received_data |>
  group_by(statistical_region, name_of_municipality) |>
  summarise(avg_waste = mean(waste_collected_by_municipality, na.rm = TRUE)) |>
  ungroup() |> 
  # remove space between words in name_of_municipality
  mutate(name_of_municipality = str_replace_all(name_of_municipality, " ", ""))

slovenia_map <- sf::st_read("map.geojson") 

slovenia_map <- slovenia_map |> 
  mutate(NAME_1 = str_to_upper(NAME_1),
         NAME_2 = str_to_upper(NAME_2))

# Join the waste data with the map data
slovenia_map_with_data <- slovenia_map |>
  left_join(waste_by_municipality, by = c("NAME_2" = "name_of_municipality"))

# check how many non-NA values does the column statistical_region have
print(sum(!is.na(slovenia_map_with_data$statistical_region)))

# which of the name_of_municipality values are not in the map data from the waste_by_municipality data
print(setdiff(waste_by_municipality$name_of_municipality, slovenia_map_with_data$NAME_2))

# if slovenia_map_with_data$statistical_region is NA, put the region from NAME_1
slovenia_map_with_data <- slovenia_map_with_data |>
  mutate(statistical_region = ifelse(is.na(statistical_region), NAME_1, statistical_region))

static_map <- ggplot(slovenia_map_with_data) +
  geom_sf(aes(fill = avg_waste, text = paste(
    "Municipality:", NAME_2, 
    "<br>",
    ifelse(is.na(avg_waste), 
           "No data available", 
           paste("Average Waste:", round(avg_waste, 2))
    )
  ))) +
  scale_fill_viridis(
    option = "plasma", 
    name = "Average Waste\n(2018-2021)", 
    labels = scales::comma,
    na.value = "grey80"  # Color for municipalities with no data
  ) +
  theme_minimal() +
  labs(title = "Average Municipal Waste Collected in Slovenia (2018-2021)") +
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    plot.subtitle = element_text(size = 12),
    legend.position = "right",
    axis.text = element_blank(),
    axis.ticks = element_blank()
  )

# Convert to an interactive plot
interactive_map <- ggplotly(static_map, tooltip = "text", width = 1000, height = 800) |>
  layout(
    hoverlabel = list(bgcolor = "white", font = list(family = "Arial", size = 12))
  ) 

# Display the interactive map
interactive_map

# Trend analysis by municipality
trend_by_municipality <- combined_municipal_waste_received_data |>
  group_by(year, name_of_municipality) |>
  summarise(total_waste = sum(waste_collected_by_municipality, na.rm = TRUE)) |>
  ggplot(aes(x = year, y = total_waste, color = name_of_municipality)) +
  geom_line() +
  labs(title = "Waste Collected Over Time by Municipality",
       x = "Year", y = "Waste Collected")

# Regional comparison
region_comparison <- combined_municipal_waste_received_data |>
  group_by(statistical_region) |>
  summarise(total_waste = sum(waste_collected_by_municipality, na.rm = TRUE)) |>
  ggplot(aes(x = reorder(statistical_region, -total_waste), y = total_waste, fill = statistical_region)) +
  geom_bar(stat = "identity") +
  labs(title = "Total Waste Collected by Region",
       x = "Statistical Region", y = "Waste Collected") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# create columns based on type_of_waste, first lets get distinct types of waste
distinct_waste_types <- combined_municipal_waste_received_data |> 
  distinct(type_of_waste)

# Paper/Cardboard Packaging
# Other Wood Waste
# Wooden packaging

# create columns for each waste type
combined_municipal_waste_received_data <- combined_municipal_waste_received_data |>
  mutate(paper_cardboard_packaging = ifelse(type_of_waste == "Paper/Cardboard Packaging", waste_collected_by_municipality, 0),
         other_wood_waste = ifelse(type_of_waste == "Other Wood Waste", waste_collected_by_municipality, 0),
         wooden_packaging = ifelse(type_of_waste == "Wooden Packaging", waste_collected_by_municipality, 0))

# Correlation analysis between waste types
correlation_analysis <- combined_municipal_waste_received_data |>
  group_by(name_of_municipality) |>
  summarise(paper_cardboard_packaging = sum(paper_cardboard_packaging, na.rm = TRUE),
            other_wood_waste = sum(other_wood_waste, na.rm = TRUE),
            wooden_packaging = sum(wooden_packaging, na.rm = TRUE)) |>
  ggplot(aes(x = paper_cardboard_packaging, y = other_wood_waste)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Correlation between Paper/Cardboard Packaging and Other Wood Waste",
       x = "Paper/Cardboard Packaging", y = "Other Wood Waste")

ggplotly(trend_by_municipality, width = 1000, height = 800)

ggplotly(region_comparison, width = 1000, height = 800)

ggplotly(correlation_analysis, width = 1000, height = 800)

```

### Difference in Waste Input and Treatment Process

```{r treatment_combined_data_waste_input_treatment}
waste.input.treatment.2018.data <- read_csv("2018 data/2018 filtered/treatment/difference_in_waste_input_and_treatment_process_18.csv")
waste.input.treatment.2019.data <- read_csv("2019 data/2019 filtered/treatment/difference_in_mass_between_waste_input_and_treatment_process_19.csv")
waste.input.treatment.2020.data <- read_csv("2020 data/2020 filtered/treatment/mass_difference_between_waste_input_and_treatment_product_volumes_due_to_mass_change_during_the_treatment_process_20.csv")
waste.input.treatment.2021.data <- read_csv("2021 data/2021 filtered/treatment/mass_difference_between_waste_input_and_treatment_product_volumes_due_to_mass_change_during_the_treatment_process_21.csv")
waste.input.treatment.2022.data <- read_csv("2022 data/2022 filtered/treatment/mass_diff_22.csv")

waste.input.treatment.2018.data <- waste.input.treatment.2018.data |>
    rename(mass_change = lost_mass)

waste.input.treatment.2019.data <- waste.input.treatment.2019.data |>
    rename(mass_change = lost_mass)

waste.input.treatment.2020.data <- waste.input.treatment.2020.data |>
    rename(type_of_waste = input_waste_name)

waste.input.treatment.2021.data <- waste.input.treatment.2021.data |>
    rename(type_of_waste = input_waste_name)

waste.input.treatment.2022.data <- waste.input.treatment.2022.data |>
    rename(mass_change = reduction_or_increase_of_mass_during_treatment)

combined_input_treatment_data <- bind_rows(waste.input.treatment.2018.data, waste.input.treatment.2019.data, waste.input.treatment.2020.data, waste.input.treatment.2021.data, waste.input.treatment.2022.data)

# summarize by year, type_of_waste and treatment_operation
aggregated_data <- combined_input_treatment_data |>
  group_by(year, type_of_waste, treatment_operation) |>
  summarize(total_mass_change = sum(mass_change, na.rm = TRUE)) |> 
  ungroup()

skim(aggregated_data)

p <- aggregated_data |>
    ggplot(aes(x = year, y = total_mass_change, fill = type_of_waste)) +
    geom_col(position = "dodge") +
    facet_wrap(~ treatment_operation) +
    theme_minimal() +
    labs(title = "Mass Change During Treatment Over the Years by Waste Type and Operation",
         x = "Year", y = "Total Mass Change")

ggplotly(p, width = 1000, height = 800)

p <- aggregated_data |>
    ggplot(aes(x = year, y = total_mass_change, fill = treatment_operation)) +
    geom_col(position = "dodge") +
    facet_wrap(~ type_of_waste) +
    theme_minimal() +
    labs(title = "Mass Change During Treatment Over the Years by Waste Type and Operation",
         x = "Year", y = "Total Mass Change")

ggplotly(p, width = 1000, height = 800)

p <- aggregated_data |>
    ggplot(aes(x = year, y = total_mass_change, fill = type_of_waste, color = treatment_operation)) +
    geom_col(position = "dodge") +
    theme_minimal() +
    labs(title = "Mass Change During Treatment Over the Years by Waste Type and Operation",
         x = "Year", y = "Total Mass Change")

ggplotly(p, width = 1000, height = 800)





```

### Landfill Capacity

```{r treatment_combined_data_landfill_capacity}
waste.landfill.capacity.2018.data <- read_csv("2018 data/2018 filtered/treatment/landfill_capacity_18.csv")
```

### Landfill Quantities Management

```{r treatment_combined_data_landfill_quantities}
waste.landfill.quantities.2019.data <- read_csv("2017 data/2017 filtered/treatment/total_waste_in_landfill_17.csv")
waste.landfill.quantities.2018.data <- read_csv("2018 data/2018 filtered/treatment/landfill_quantities_management_18.csv")
```
