---
title: "Green UP Project - Waste Data"
author: "Nikola Kovačević"
date: "15/11/2023"
format: html
editor: source
---

## Short description of the project

Studying available statistical data in Slovenia for companies producing specific waste types, as well as, companies responsible for the uptake of this waste.

## Structure

The structure of various years seems to be very different in some cases, so the first task would actually be to make sense of all of this and actually see [what's the difference in available data between the various years]{.underline}.\

There are datasets for each year: [generated waste]{.underline}, [collected waste]{.underline} and for [how waste is used]{.underline}. Moreover, in some datasets, this is actually broken down by companies in other its by regions (of Slovenia).

## Setup

```{r setup}
library(tidyverse)
library(gt)
library(gtExtras)
library(readxl)
library(ggplot2)
library(purrr)
library(openxlsx)

codes <- c("15 01 03", "15 01 01", "17 02 01", "20 01 38", "20 01 37")

# currently in the same column -> "Odpadki na vhodu v obdelavo in prevzeti neobdelani odpadki številka", "Odpadki na izhodu iz postopka obdelave in oddani neobdelani odpadki številka",

columns_to_rename <- c("Številka odpadka", "Odpadki na vhodu v obdelavo številka", "Odpadek na vhodu v postopek obdelave številka")

# List of municipalities for each region
POMURSKA <- c("APAČE", "BELTINCI", "CANKOVA", "ČRENŠOVCI", "DOBROVNIK", "DOBRONAK", "GORNJA RADGONA", "GORNJI PETROVCI", "GRAD", "HODOŠ","KOBILJE", "KRIŽEVCI", "KUZMA", "LENDAVA", "LJUTOMER", "MORAVSKE TOPLICE", "MURSKA SOBOTA", "ODRANCI", "PUCONCI", "RADENCI", "RAZKRIŽJE", "ROGAŠOVCI", "SVETI JURIJ OB ŠČAVNICI", "ŠALOVCI", "TIŠINA", "TURNIŠČE", "VELIKA POLANA", "VERŽEJ")

PODRAVSKA  <- c(
  "BENEDIKT", "CERKVENJAK", "CIRKULANE", "DESTRNIK", "DORNAVA", "DUPLEK", "GORIŠNICA", "HAJDINA", "HOČE - SLIVNICA",
  "JURŠINCI", "KIDRIČEVO", "KUNGOTA", "LENART", "LOVRENC NA POHORJU", "MAJŠPERK", "MAKOLE", "MARIBOR", "MARKOVCI",
  "MIKLAVŽ NA DRAVSKEM POLJU", "OPLOTNICA", "ORMOŽ", "PESNICA", "PODLEHNIK", "POLJČANE", "PTUJ", "RAČE - FRAM", "RUŠE",
  "SELNICA OB DRAVI", "SLOVENSKA BISTRICA", "SREDIŠČE OB DRAVI", "STARŠE", "SVETA ANA", "SVETA TROJICA V SLOV. GORICAH",
  "SVETI ANDRAŽ V SLOV. GORICAH", "SVETI JURIJ V SLOV. GORICAH", "SVETI TOMAŽ", "ŠENTILJ", "TRNOVSKA VAS", "VIDEM", "ZAVRČ", "ŽETALE"
)

KOROŠKA <- c(
  "ČRNA NA KOROŠKEM", "DRAVOGRAD", "MEŽICA", "MISLINJA", "MUTA", "PODVELKA", "PREVALJE", "RADLJE OB DRAVI", "RAVNE NA KOROŠKEM",
  "RIBNICA NA POHORJU", "SLOVENJ GRADEC", "VUZENICA"
)

SAVINJSKA <- c(
  "BRASLOVČE", "CELJE", "DOBJE", "DOBRNA", "GORNJI GRAD", "KOZJE", "LAŠKO", "LJUBNO", "LUČE", "MOZIRJE", "NAZARJE",
  "PODČETRTEK", "POLZELA", "PREBOLD", "REČICA OB SAVINJI", "ROGAŠKA SLATINA", "ROGATEC", "SLOVENSKE KONJICE", "SOLČAVA", "ŠENTJUR",
  "ŠMARJE PRI JELŠAH", "ŠMARTNO OB PAKI", "ŠOŠTANJ", "ŠTORE", "TABOR", "VELENJE", "VITANJE", "VOJNIK", "VRANSKO", "ZREČE", "ŽALEC"
)

ZASAVSKA <- c("HRASTNIK", "LITIJA", "TRBOVLJE", "ZAGORJE OB SAVI")

POSAVSKA <- c("BISTRICA OB SOTLI", "BREŽICE", "KOSTANJEVICA NA KRKI", "KRŠKO", "RADEČE", "SEVNICA")

JUGOVZHODNA.SLOVENIJA <- c(
  "ČRNOMELJ", "DOLENJSKE TOPLICE", "KOČEVJE", "KOSTEL", "LOŠKI POTOK", "METLIKA", "MIRNA", "MIRNA PEČ", "MOKRONOG-TREBELNO",
  "NOVO MESTO", "OSILNICA", "RIBNICA", "SEMIČ", "SODRAŽICA", "STRAŽA", "ŠENTJERNEJ", "ŠENTRUPERT", "ŠKOCJAN", "ŠMARJEŠKE TOPLICE",
  "TREBNJE", "ŽUŽEMBERK"
)

OSREDNJESLOVENSKA <- c(
  "BOROVNICA", "BREZOVICA", "DOREPOLJE", "DOBROVA-POLHOV GRADEC", "DOL PRI LJUBLJANI", "DOMŽALE", "GROSUPLJE", "HORJUL",
  "IG", "IVANČNA GORICA", "KAMNIK", "KOMENDA", "LJUBLJANA", "LOG - DRAGOMER", "LOGATEC", "LUKOVICA", "MEDVODE", "MENGEŠ",
  "MORAVČE", "ŠKOFLJICA", "ŠMARTNO PRI LITIJI", "TRZIN", "VELIKE LAŠČE", "VODICE", "VRHNIKA"
)

GORENJSKA <- c("BLED", "BOHINJ", "CERKLJE NA GORENJSKEM", "GORENJA VAS-POLJANE", "GORJE", "JESENICE", "JEZERSKO", "KRANJ", "KRANJSKA GORA", "NAKLO", "PREDDVOR", "RADOVLJICA", "ŠENČUR", "ŠKOFJA LOKA", "TRŽIČ", "ŽELEZNIKI", "ŽIRI", "ŽIROVNICA")

PRIMORSKONOTRANJSKA <- c("BLOKE", "CERKNICA", "ILIRSKA BISTRICA", "LOŠKA DOLINA", "PIVKA", "POSTOJNA")

GORIŠKA <- c("AJDOVŠČINA", "BOVEC", "BRDA", "CERKNO", "IDRIJA", "KANAL", "KOBARID", "MIREN–KOSTANJEVICA", "NOVA GORICA", "RENČE-VOGRSKO", "ŠEMPETER–VRTOJBA", "TOLMIN", "VIPAVA")

OBALNOKRAŠKA <- c("ANKARAN", "DIVAČA", "HRPELJE–KOZINA", "IZOLA", "KOMEN", "KOPER", "PIRAN", "SEŽANA")

NEOPREDELJENO <- "NEOPREDELJENO"

# check if the 2022 directory exiss, if not create it
if (!dir.exists("2022 data\\2022 filtered")) {
  dir.create("2022 data\\2022 filtered")
}

# check if the 2021 directory exiss, if not create it
if (!dir.exists("2021 data\\2021 filtered")) {
  dir.create("2021 data\\2021 filtered")
}

# check if the 2020 directory exiss, if not create it
if (!dir.exists("2020 data\\2020 filtered")) {
  dir.create("2020 data\\2020 filtered")
}

# check if the 2019 directory exiss, if not create it
if (!dir.exists("2019 data\\2019 filtered")) {
  dir.create("2019 data\\2019 filtered")
}

# check if the 2018 directory exiss, if not create it
if (!dir.exists("2018 data\\2018 filtered")) {
  dir.create("2018 data\\2018 filtered")
}
```

## Functions

```{r functions}

# Function to read and process a sheet
process_sheet <- function(path, sheet_index, n_max = 2, skip = 7) {
  # Read the header rows
  header <- read_excel(path, skip = skip, sheet = sheet_index, col_names = FALSE, n_max = n_max)
  
  # Determine the number of header rows
  num_header_rows <- nrow(header)
  
  # Check for valid number of header rows
  if (num_header_rows == 2) {
    
    # Combine the header rows into one
    combined_header <- map2_chr(header[1, ], 
                                header[2, ],
                                ~ ifelse(!is.na(.y), paste(.x, .y), as.character(.x)))
    
  } else if (num_header_rows == 3) {
    
    # Find indices where NA occurs
    na_indices <- which(is.na(header[1, ]))
    
    # Iterate over each NA index and replace with the last non-NA value
    for (i in na_indices) {
      header[1, i] <- tail(header[1, 1:i][!is.na(header[1, 1:i])], 1)
    }

    combined_header <- map2_chr(header[1, ], 
                                header[2, ], 
                                ~ ifelse(!is.na(.y), paste(.x, .y), as.character(.x)))
    
    combined_header <- map2_chr(combined_header,
                                header[3, ], 
                                ~ ifelse(!is.na(.y), paste(.x, .y), as.character(.x)))
    
  
  } else if (num_header_rows == 4) {
    
    # Find indices where NA occurs
    na_indices <- which(is.na(header[1, ]))
    
    # Iterate over each NA index and replace with the last non-NA value
    for (i in na_indices) {
      header[1, i] <- tail(header[1, 1:i][!is.na(header[1, 1:i])], 1)
    }

    combined_header <- map2_chr(header[1, ], 
                                header[2, ], 
                                ~ ifelse(!is.na(.y), paste(.x, .y), as.character(.x)))
    
    combined_header <- map2_chr(combined_header,
                                header[3, ], 
                                ~ ifelse(!is.na(.y), paste(.x, .y), as.character(.x)))
    
    combined_header <- map2_chr(combined_header,
                                header[4, ], 
                                ~ ifelse(!is.na(.y), paste(.x, .y), as.character(.x)))
  } else {
    # Read the sheet data
  sheet_data <- read_excel(path, skip = 7 + num_header_rows, sheet = sheet_index, col_names = FALSE)
  
  # set column names without using combined_header
  colnames(sheet_data) <- header[1, ]
  
  # Set the new column names
  #colnames(sheet_data) <- combined_header
  
  return(sheet_data)
    stop("Unexpected number of header rows. Only 1, 2, 3 or 4 header rows are supported.")
    
  }
  
  # Read the sheet data
  sheet_data <- read_excel(path, skip = 7 + num_header_rows, sheet = sheet_index, col_names = FALSE)
  
  
  # Set the new column names
  colnames(sheet_data) <- combined_header
  
  return(sheet_data)
}

# ------------------------------------------------------------

# Function to filter bz waste codes
filter_df_by_codes <- function(df) {
  # Replace NA values with 0 in numeric columns
  numeric_columns <- sapply(df, is.numeric)
  df[, numeric_columns][is.na(df[, numeric_columns])] <- 0
  
  # df <- df %>% select_if(~ !any(is.na(.)))
  
  # character_columns <- sapply(df, is.character)
  # df[, character_columns][is.na(df[, character_columns])] <- "ne"
  
  # Check if any columns from the given exist and rename accordingly
  if (any(columns_to_rename %in% colnames(df))) {
    
    df <- df |> 
      rename_with(~ ifelse(. %in% columns_to_rename, "waste_code", .), 
                  cols = columns_to_rename) |> 
      filter(waste_code %in% 
               codes |
               grepl("^03 01 [0-9]", waste_code, perl = TRUE) &
               !grepl("03 01 04", waste_code, perl = TRUE)
      )
  }
  
  if (any(c("Odpadki na vhodu v obdelavo in prevzeti neobdelani odpadki številka", "Odpadki na izhodu iz postopka obdelave in oddani neobdelani odpadki številka") %in% colnames(df))) {
    df <- df |> 
      rename(treatment_input_waste_received_code = `Odpadki na vhodu v obdelavo in prevzeti neobdelani odpadki številka`,
             treatment_outlet_delivered_waste_code = `Odpadki na izhodu iz postopka obdelave in oddani neobdelani odpadki številka`)
    
    df <- df |> 
      filter(treatment_input_waste_received_code %in% 
               codes |
               grepl("^03 01 [0-9]", treatment_input_waste_received_code, perl = TRUE) &
               !grepl("03 01 04", treatment_input_waste_received_code, perl = TRUE)
      )
    
    df <- df |> 
      filter(treatment_outlet_delivered_waste_code %in% 
               codes |
               grepl("^03 01 [0-9]", treatment_outlet_delivered_waste_code, perl = TRUE) &
               !grepl("03 01 04", treatment_outlet_delivered_waste_code, perl = TRUE)
      )
  }
  
  # if there is a need to drop specific column
  
  # column_name <- "Odpadne nagrobne sveče (da/ne)"
  # 
  # if (column_name %in% colnames(df)) {
  #   df <- df |> 
  #     select(-column_name)
  # }
  
  return(df)
}

# ------------------------------------------------------------

# Function to find municipality with most waste in a region
find_municipality_with_most_waste <- function(region_municipalities, waste_df) {
  # Filter data for the specified region
  region_data <- waste_df[waste_df$`Naziv občine` %in% region_municipalities, ]

  if (nrow(region_data) == 0) {
    print("No data available for the specified region.")
    return(NULL)
  }

  # `Komunalni odpadki po občini izvora kg`
  # `Komunalni odpadki in odpadek 16 01 03 po občini izvora kg`
  
  # Find the municipality with the most waste in the specified region
  municipality_with_most_waste <- aggregate(`waste_by_municipality` ~ `Naziv občine`, data = region_data, FUN = sum)
  municipality_with_most_waste <- municipality_with_most_waste[which.max(municipality_with_most_waste$`waste_by_municipality`), ]
  
  # add a column with the region name, use the name of the variable
  municipality_with_most_waste$region <- deparse(substitute(region_municipalities))

  # Print the result
  print(municipality_with_most_waste)
}

# ------------------------------------------------------------

# Function to find the list of municipalities sorted by waste amount in a region
list_of_waste_by_municipality <- function(region_municipalities, waste_df) {
  # Filter data for the specified region
  region_data <- waste_df[waste_df$`Naziv občine` %in% region_municipalities, ]

  if (nrow(region_data) == 0) {
    print("No data available for the specified region.")
    return(NULL)
  }
  
  # Calculate total waste for each municipality in the specified region
  total_waste_by_municipality <- aggregate(`waste_by_municipality` ~ `Naziv občine`, data = region_data, FUN = sum)
  # Sort municipalities by waste amount in descending order
  sorted_municipalities <- total_waste_by_municipality[order(-total_waste_by_municipality$`waste_by_municipality`), ]

  # Print the result
  print(sorted_municipalities)
}
```

## Initial questions

We would like to see:

-   who are the companies that produce wood waste \> 2019

    -   assume number of companies for recent years 2021 to 2019
    -   take account covid years

    at what location (or municipality) the waste is produced

-   who are the companies that collect and process this

-   (potentially) see how actually the waste is processed and used

We would like to filter by actual codes for the waste:

-   03 01 ?? (anything that is in this category, except for 03 01 04\* )
-   15 01 03 lesena embalaza (wooden packaging)
-   15 01 01 papirna embalaza (paper packaging)
-   17 02 01 Les (construction waste)
-   20 01 38 Les, ki ni naveden pod (wood not specified under)
-   20 01 37 Les, ki vsebuje nevarne snovi (wood containing hazardous substances)

## Update 1 - 18/12/2023

-   compare by years\
    imporant info\
    by company/region

-   at least get some companies for the map

-   stick for 12 regions for now\
    get a center point per region

-   one producer and handler\
    try to connect the points between those two\
    where to ship, where to store

-   how much was recycled\
    flow/material balance checks out in the end\
    startyear - generated + stored = should equal to 0\
    see for regions to municipalities

## Update 2 - 17/01/2024

-   filtered csv/excels -\> summary

## Update 3 - 23/02/2024

-   sum up sheets
-   sum up per region
-   compare the regions in different sheets
-   see what is the difference in numbers, how big the discrepancy is

### AnyLogic

-   rate of generation, colecting, processing

-   where to store, storage space, cost of storage per unit, revenue

-   how much is stored

-   waste streams

-   how much is recycled

-   take the regions, one point for collection and processing, determine this point

-   hover over the point, info to show: generated, collected, processed

# Year 2022

## 2022 - Data from the annual reports of the original generators

```{r waste_generation}

# Specify the path to the Excel file
waste_generation_22.path <- "2022 data\\podatki LP ODP-nastajanje 2022.xlsx"

# Get the sheet names
sheet_names <- excel_sheets(waste_generation_22.path)

# Initialize a list to store processed sheets
processed_sheets <- list()

# Define the sheets where n_max should be 3 (replace with actual sheet indices)
# if needed
sheets_with_n_max_3 <- c(2, 3, 5)

# Loop through each sheet
for (sheet_name in sheet_names) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else 2
  processed_sheet <- process_sheet(waste_generation_22.path, sheet_index, n_max)
  processed_sheets[[sheet_name]] <- processed_sheet
}

# Applying the function to each data frame in processed_sheets
processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

generation.22 <- processed_sheets[[1]]

# filter by region, region names should be in allcaps
generation.22 <- generation.22 |> 
  rename(region = `Statistična regija kraja nastanka odpadkov`)

generation.22 |> 
  filter(region == "GORENJSKA")
  
# filter(region %in% c("GORENJSKA", "GORIŠKA", "JUGOVZHODNA SLOVENIJA", "KOROŠKA", "NOTRANJSKO-KRAŠKA", "OBALNO-KRAŠKA", "OSREDNJESLOVENSKA", "PODRAVSKA", "POMURSKA", "POSAVSKA", "PRIMORSKO-NOTRANJSKA", "SAVINJSKA", "ZASAVSKA"))
```

## 2022 - Data on waste collected and its subsequent management from waste collectors' reports

```{r waste_collection}

# Specify the path to the Excel file
waste_collection_22.path <- "2022 data\\podatki LP ODP-zbiranje 2022.xlsx"

# Get the sheet names
sheet_names <- excel_sheets(waste_collection_22.path)

# Initialize a list to store processed sheets
processed_sheets <- list()

# Define the sheets where n_max should be 3 (replace with actual sheet indices)
# if needed
sheets_with_n_max_3 <- c(2, 3, 5)

# header is 8 in this case
skip <- 8

processed_sheets <- lapply(sheet_names, function(sheet_name) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else 2
  
  if (sheet_index == 1) {
    processed_sheet <- process_sheet(waste_collection_22.path, sheet_index, n_max, skip)
  } else if (sheet_index == 6) {
    processed_sheet <- process_sheet(waste_collection_22.path, sheet_index, 1)
  } else {
    processed_sheet <- process_sheet(waste_collection_22.path, sheet_index, n_max)
  }

  # for the first 5 sheets deselect the last column
  # this is done to skip the candles on graves
  processed_sheets[[sheet_name]] <- if (sheet_index <= 5) {
    processed_sheet[, -ncol(processed_sheet)]
  } else {
    processed_sheet
  }
})

# Applying the function to each data frame in processed_sheets
processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

pre_collection.22 <- processed_sheets[[1]] |> select(-last_col())

collected.22 <- processed_sheets[[2]]

collected_mun.22 <- processed_sheets[[3]]

collected_org_mun.22 <- processed_sheets[[4]]

collected_org_mun.22 <- collected_org_mun.22 |> 
  rename(waste_by_municipality = `Komunalni odpadki in odpadek 16 01 03 po občini izvora kg`)

find_municipality_with_most_waste(GORENJSKA, collected_org_mun.22)
list_of_waste_by_municipality(GORENJSKA, collected_org_mun.22)

find_municipality_with_most_waste(GORENJSKA, collected_org_mun.22)
find_municipality_with_most_waste(POMURSKA, collected_org_mun.22)
find_municipality_with_most_waste(KOROŠKA, collected_org_mun.22)
find_municipality_with_most_waste(OBALNOKRAŠKA, collected_org_mun.22)
find_municipality_with_most_waste(SAVINJSKA, collected_org_mun.22)
find_municipality_with_most_waste(JUGOVZHODNA.SLOVENIJA, collected_org_mun.22)
find_municipality_with_most_waste(OSREDNJESLOVENSKA, collected_org_mun.22)
find_municipality_with_most_waste(GORIŠKA, collected_org_mun.22)
find_municipality_with_most_waste(PODRAVSKA, collected_org_mun.22)
find_municipality_with_most_waste(POSAVSKA, collected_org_mun.22)
find_municipality_with_most_waste(PRIMORSKONOTRANJSKA, collected_org_mun.22)
find_municipality_with_most_waste(ZASAVSKA, collected_org_mun.22)

management.22 <- processed_sheets[[5]]

composting.22 <- processed_sheets[[6]]

waste_oils.22 <- processed_sheets[[7]]


```

## 2022 - Data from waste treatment operators' reports

```{r waste_treatment}

# Specify the path to the Excel file
waste_treatment_22.path <- "2022 data\\podatki LP ODP-obdelava 2022.xlsx"

# Get the sheet names
sheet_names <- excel_sheets(waste_treatment_22.path)

# Initialize a list to store processed sheets
processed_sheets <- list()

# Define the sheets where n_max should be 3 (replace with actual sheet indices)
# if needed
sheets_with_n_max_3 <- c(2, 4, 5, 7)

sheets_with_n_max_4 <- 9

processed_sheets <- lapply(sheet_names, function(sheet_name) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else if (sheet_index == sheets_with_n_max_4) 4 else 2
  
  processed_sheet <- process_sheet(waste_treatment_22.path, sheet_index, n_max)

  processed_sheets[[sheet_name]] <- processed_sheet
  
})

processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

# treatment in previous years, as of 1.1.2022
treatment.22 <- processed_sheets[[1]]

# Waste received,
waste_received.22 <- processed_sheets[[2]]

# Treatment of waste received
waste_treated.22 <- processed_sheets[[3]]

# Management of waste from the treatment process and untreated waste
management.22 <- processed_sheets[[4]]

# Management of treatment products that are no longer waste
management_no_waste.22 <- processed_sheets[[5]]

# Mechanical-biological treatment of mixed municipal waste, separated by municipality of origin
mech_bio_treatment.22 <- processed_sheets[[6]]

# Mass difference between waste input and treatment product volumes
mass_difference.22 <- processed_sheets[[7]]

# Landfill capacity and status
landfill_capacity.22 <- processed_sheets[[8]]

# Waste management in landfill
landfill_management.22 <- processed_sheets[[9]]

# Disposed waste resulting from municipal waste treatment (from mechanical-biological treatment of mixed municipal waste and from treatment operations of separated fractions of municipal waste), by municipality of origin
disposed_waste.22 <- processed_sheets[[10]]

# Production of compost or digestate
compost_digestate.22 <- processed_sheets[[11]]

# Production of compost or digestate, that are waste
compost_digestate_waste.22 <- processed_sheets[[12]]

```

# Year 2021

## 2021 - Original Generators

Contains only one sheet.

Columns (translated to English):

-   \[1\] "Year"\
    \[2\] "Report"\
    \[3\] "Statistical region of waste generation"\
    \[4\] "Waste number"\
    \[5\] "Waste name"\
    \[6\] 'Total waste: generated and stored (in kilograms)'\
    \[7\] "Waste in temporary storage on 1.1.2021 (in kilograms)"\
    \[8\] "Waste generated in 2021 (in kilograms)"\
    \[9\] "Waste in temporary storage on 31.12.2021 (in kilograms)"\
    \[10\] "Waste treated by the original generator (in kilograms)"\
    \[11\] "Waste delivered for further management to other persons in the Republic of Slovenia (in kilograms)"\
    \[12\] "Waste sent for treatment to other EU Member States (in kilograms)"\
    \[13\] "Waste sent for treatment to non-EU countries (in kilograms)"

```{r original_emitters}

# generated waste

# Reminder: 
# Data are based on the ODP-Settlement Reports submitted for 2021. 
# The quantities of waste generated are not in all cases equal to the quantities of waste sent for further management (storage, collectors, waste treatment operators, export).

# oe2021 original emitters
# original emitters (ODP-sequestration) - poročil izvirnih povzročiteljev

# Specify the path to the Excel file
waste_generation_21.path <- "2021 data\\podatki LP ODP-nastajanje 2021.xlsx"

# Get the sheet names
sheet_names <- excel_sheets(waste_generation_21.path)

# Initialize a list to store processed sheets
processed_sheets <- list()

# Define the sheets where n_max should be 3 (replace with actual sheet indices)
# if needed
sheets_with_n_max_3 <- c(2, 3, 5)

# Loop through each sheet
for (sheet_name in sheet_names) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else 2
  processed_sheet <- process_sheet(waste_generation_21.path, sheet_index, n_max)
  processed_sheets[[sheet_name]] <- processed_sheet
}

# Applying the function to each data frame in processed_sheets
processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

generation.21 <- processed_sheets[[1]]

# Original Slovenian column names and their English translations
original_colnames <- colnames(generation.21)
english_colnames <- c("Year", "Report", "Statistical Region of Waste Origin", 
                      "Waste Code", "Name of Waste", "Total Waste: Generated and Stored",
                      "Temporarily Stored Waste on 1.1.2021", "Waste Generated in 2021",
                      "Temporarily Stored Waste on 31.12.2021",
                      "Waste Treated by the Original Producer",
                      "Waste Transferred for Further Treatment in the Republic of Slovenia",
                      "Waste Sent for Treatment in Other EU Countries",
                      "Waste Sent for Treatment Outside the EU")

# Rename the columns
colnames(generation.21) <- english_colnames

generation.21 |> filter(`Statistical Region of Waste Origin` == "GORENJSKA")

# translate the Name of Waste column to english
# possible cases are Les, ki ni naveden v 20 01 37
# Žagovina, oblanci, odrezki, les, iverne plošče in furnir, ki niso navedeni v 03 01 04
# Odpadki, ki niso navedeni drugje
# Papirna in kartonska embalaža ter embalaža iz lepenke
# Lesena embalaža
generation.21 <- generation.21 |> mutate(`Name of Waste` = case_when(
  `Name of Waste` == "Les, ki ni naveden v 20 01 37" ~ "Wood, not specified in 20 01 37",
  `Name of Waste` == "Žagovina, oblanci, odrezki, les, iverne plošče in furnir, ki niso navedeni v 03 01 04" ~ "Sawdust, chips, cuttings, wood, particle board and veneer, not specified in 03 01 04",
  `Name of Waste` == "Odpadki, ki niso navedeni drugje" ~ "Waste not specified elsewhere",
  `Name of Waste` == "Papirna in kartonska embalaža ter embalaža iz lepenke" ~ "Paper and cardboard packaging and cardboard packaging",
  `Name of Waste` == "Lesena embalaža" ~ "Wooden packaging",
  `Name of Waste` == "Les" ~ "Wood",
  `Name of Waste` == "Odpadna lubje in pluta" ~ "Waste bark and cork",
))



# create a csv
write_excel_csv(generation.21, "2021 data\\2021 filtered\\generation_21.csv")

# create a .xlsx
write.xlsx(generation.21, "2021 data\\2021 filtered\\generation_21.xlsx")
```

## 2021 - Collectors

Contains 6 sheets (translated to English):

-   Sheet 1: Pre-storage of waste, 2021

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Statistical region"\
        \[4\] "Waste number"\
        \[5\] "Waste name"\
        \[6\] "Waste grave candles (yes/no)" ?\
        \[7\] "Pre-stored waste on 1.1.2021"\
        \[8\] "Pre-stored waste on 31.12.2021"

-   Sheet 2: Waste collected, 2021

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Statistical region"\
        \[4\] "Waste number"\
        \[5\] "Waste name"\
        \[6\] "Waste grave candles (yes/no)"\
        \[7\] "Waste collected from original producers without record sheet (left behind) (kg)" \[8\] 'Waste collected from original producers with a record sheet (discarded) (kg)'\
        \[9\] "Waste collected from other holders by collectors in the RS (kg)"\
        \[10\] "Waste collected from other holders from treatment operators in RS (kg)"

-   Sheet 3: Municipal waste collected by source of generation, 2021

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Waste number"\
        \[4\] "Waste name"\
        \[5\] "Waste grave candles (yes/no)"\
        \[6\] "Total municipal waste collected"\
        \[7\] "Municipal waste collected by source from households (kg)"\
        \[8\] 'Municipal waste collected by source of generation from activities (kg)'

-   Sheet 4: Municipal waste collected by municipality of origin, 2021

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Waste number"\
        \[4\] "Waste name"\
        \[5\] "Waste grave candles (yes/no)"\
        \[6\] "Municipal waste by municipality of origin (kg)"\
        \[7\] "Municipality code"\
        \[8\] "Name of municipality"

-   Sheet 5: Management of collected waste, 2021

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Statistical region"\
        \[4\] "Waste number"\
        \[5\] "Waste name"\
        \[6\] "Waste grave candles (yes/no)"\
        \[7\] "Waste handed over to collectors in the RS (kg)"\
        \[8\] "Waste delivered to treatment operators in the RS for further management (kg)"\
        \[9\] "Waste sent for further management to other EU Member States (kg)"\
        \[10\] "Waste sent for further management to non-EU countries (kg)"

-   Sheet 6: Household composting, 2021

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Municipality code"\
        \[4\] "Name of municipality"\
        \[5\] "Number of households per municipality"\
        \[6\] "Number of households per municipality that home compost"

```{r collectors}

# collected waste
# skipping header files, fixing column names and removing initial empty rows

# collectors' annual reports (ODP-collection) - poročil zbiralcev odpadkov
# c2021 - collectors'

# Specify the path to the Excel file
waste_collectors_21.path <- "2021 data\\podatki LP ODP-zbiranje 2021.xlsx"

# Get the sheet names
sheet_names <- excel_sheets(waste_collectors_21.path)

# Initialize a list to store processed sheets
processed_sheets <- list()

# Define the sheets where n_max should be 3 (replace with actual sheet indices)
# if needed
sheets_with_n_max_3 <- c(2, 3, 5)

skip <- 7

# Loop through each sheet
for (sheet_name in sheet_names) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else 2
  if (sheet_index == 6) {
    processed_sheet <- process_sheet(waste_collectors_21.path, sheet_index, 1)
  } else {
    processed_sheet <- process_sheet(waste_collectors_21.path, sheet_index, n_max)
  }
  processed_sheets[[sheet_name]] <- processed_sheet
}

# Applying the function to each data frame in processed_sheets to filter by codes
processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

# Sheet 1: Pre-storage of waste, 2021
processed_sheets[[1]] 

list_of_waste_pre_stored <- function(region, df) {
  df |> 
    filter(`Statistična regija` == region) |> 
    select(7:8) |> 
    summarise(across(everything(), sum, na.rm = TRUE)) |> 
    pivot_longer(everything(), names_to = "waste_type", values_to = "waste_pre_stored") |> 
    summarise(total_waste = sum(waste_pre_stored, na.rm = TRUE))
}

# Sheet 2: Waste collected, 2021
processed_sheets[[2]] 

# define a function for the previous code
list_of_waste_collected <- function(region, df) {
  df |> 
    filter(`Statistična regija` == region) |> 
    select(7:10) |> 
    summarise(across(everything(), sum, na.rm = TRUE)) |> 
    pivot_longer(everything(), names_to = "waste_type", values_to = "waste_collected") |> 
    summarise(total_waste = sum(waste_collected, na.rm = TRUE))
}

list_of_waste_collected("POMURSKA", processed_sheets[[2]])
list_of_waste_collected("KOROŠKA", processed_sheets[[2]])
list_of_waste_collected("OBALNO-KRAŠKA", processed_sheets[[2]])
list_of_waste_collected("PODRAVSKA", processed_sheets[[2]])
list_of_waste_collected("SAVINJSKA", processed_sheets[[2]])
list_of_waste_collected("ZASAVSKA", processed_sheets[[2]])
list_of_waste_collected("JUGOVZHODNA SLOVENIJA", processed_sheets[[2]])
list_of_waste_collected("OSREDNJESLOVENSKA", processed_sheets[[2]])
list_of_waste_collected("PRIMORSKO-NOTRANJSKA", processed_sheets[[2]])

# Sheet 3: Municipal waste collected by source of generation, 2021
processed_sheets[[3]]

# Sheet 4: Municipal waste collected by municipality of origin, 2021
wc_by_origin <- processed_sheets[[4]]
wc_by_origin <- wc_by_origin |> 
  rename(waste_by_municipality = `Komunalni odpadki po občini izvora kg`)

# ------------------
# can create center points per municipalities with this
# use the one with the most waste
list_of_waste_by_municipality(GORENJSKA, wc_by_origin)

# each municipality should have its own region assign to it via a new column

# sum up the waste_by_municipality column
municipal_waste_collected.gorenjska <- list_of_waste_by_municipality(GORENJSKA, wc_by_origin) |> 
  select(waste_by_municipality) |>
  summarise(total_waste = sum(waste_by_municipality, na.rm = TRUE))

municipal_waste_collected.gorenjska <- municipal_waste_collected.gorenjska$total_waste
# sum up per sheet

find_municipality_with_most_waste(GORENJSKA, wc_by_origin)

# go through all the regions (GORENJSKA, POMURKSA, etc.) and find municipality with most waste
find_municipality_with_most_waste(GORENJSKA, wc_by_origin)
find_municipality_with_most_waste(POMURSKA, wc_by_origin)
find_municipality_with_most_waste(KOROŠKA, wc_by_origin)
find_municipality_with_most_waste(OBALNOKRAŠKA, wc_by_origin)
find_municipality_with_most_waste(SAVINJSKA, wc_by_origin)
find_municipality_with_most_waste(JUGOVZHODNA.SLOVENIJA, wc_by_origin)
find_municipality_with_most_waste(OSREDNJESLOVENSKA, wc_by_origin)
find_municipality_with_most_waste(GORIŠKA, wc_by_origin)
find_municipality_with_most_waste(PODRAVSKA, wc_by_origin)
find_municipality_with_most_waste(POSAVSKA, wc_by_origin)
find_municipality_with_most_waste(PRIMORSKONOTRANJSKA, wc_by_origin)
find_municipality_with_most_waste(ZASAVSKA, wc_by_origin)

# Sheet 5: Management of collected waste, 2021
processed_sheets[[5]] 

list_of_waste_managed <- function(region, df) {
  df |> 
    filter(`Statistična regija` == region) |> 
    select(7:10) |> 
    summarise(across(everything(), sum, na.rm = TRUE)) |> 
    pivot_longer(everything(), names_to = "waste_type", values_to = "waste_managed") |> 
    summarise(total_waste = sum(waste_managed, na.rm = TRUE))
}

# define variables for the table
waste_pre_stored.gorenjska <- list_of_waste_pre_stored("GORENJSKA", processed_sheets[[1]])$total_waste
waste_collected.gorenjska <- list_of_waste_collected("GORENJSKA", processed_sheets[[2]])$total_waste

municipal_waste_collected.gorenjska <- list_of_waste_by_municipality(GORENJSKA, wc_by_origin) |> 
  select(waste_by_municipality) |>
  summarise(total_waste = sum(waste_by_municipality, na.rm = TRUE))

municipal_waste_collected.gorenjska <- municipal_waste_collected.gorenjska$total_waste

waste_managed.gorenjska <- list_of_waste_managed("GORENJSKA", processed_sheets[[5]])$total_waste

# create a table with all sums per region, municipal_waste_collected, waste_managed, waste_collected, waste_pre_stored
table <- tibble(
  type = c("waste_pre_stored", "waste_collected", "waste_managed", "municipal_waste_collected"),
  GORENJSKA = c(waste_pre_stored.gorenjska, waste_collected.gorenjska, waste_managed.gorenjska, municipal_waste_collected.gorenjska)
)

table

# create a function to easily creates tables for other regions
create_table <- function(region, municipality_region, df = processed_sheets) {
  waste_pre_stored <- list_of_waste_pre_stored(region, df[[1]])$total_waste
  waste_collected <- list_of_waste_collected(region, df[[2]])$total_waste
  
  collection_by_origin <- df[[4]] |> 
    rename(waste_by_municipality = `Komunalni odpadki po občini izvora kg`)
  
  municipal_waste_collected <- list_of_waste_by_municipality(municipality_region, collection_by_origin) |> 
    select(waste_by_municipality) |>
    summarise(total_waste = sum(waste_by_municipality, na.rm = TRUE))
  municipal_waste_collected <- municipal_waste_collected$total_waste
  waste_managed <- list_of_waste_managed(region, df[[5]])$total_waste
  
  table <- tibble(
    type = c("waste_pre_stored", "waste_collected", "waste_managed", "municipal_waste_collected"),
    !!region := c(waste_pre_stored, waste_collected, waste_managed, municipal_waste_collected)
  )
  
  return(table)
}

create_table("GORENJSKA", GORENJSKA, processed_sheets)
create_table("POMURSKA", POMURSKA, processed_sheets)
create_table("KOROŠKA", KOROŠKA, processed_sheets)
create_table("OBALNO-KRAŠKA", OBALNOKRAŠKA, processed_sheets)
create_table("SAVINJSKA", SAVINJSKA, processed_sheets)
create_table("JUGOVZHODNA SLOVENIJA", JUGOVZHODNA.SLOVENIJA, processed_sheets)
create_table("OSREDNJESLOVENSKA", OSREDNJESLOVENSKA, processed_sheets)
create_table("GORIŠKA", GORIŠKA, processed_sheets)
create_table("PODRAVSKA", PODRAVSKA, processed_sheets)
create_table("POSAVSKA", POSAVSKA, processed_sheets)
create_table("PRIMORSKO-NOTRANJSKA", PRIMORSKONOTRANJSKA, processed_sheets)
create_table("ZASAVSKA", ZASAVSKA, processed_sheets)


# Sheet 6: Household composting, 2021
processed_sheets[[6]] 

# household composting is based on municipalties, not regions
# we need to filter by municipality name
# check if the name of the municipality is stored in one of the regions
processed_sheets[[6]] |> filter(`Naziv občine` %in% GORENJSKA)

# configure sheet names
sheet_names <- c(
  "Waste storage",
  "Waste received",
  "Waste - source of generation",
  "Waste - municipality of origin",
  "Municipal waste management",
  "Household composting"
)

# add the new names
names(processed_sheets) <- sheet_names

# export to .xlsx
# write.xlsx(processed_sheets, "2021 data\\2021 filtered\\collection_21.xlsx")

```

## 2021 - Waste Treatment Operators

Contains 9 sheets (translated to English):

-   Sheet 1: Waste storage

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Statistical region"\
        \[4\] "Waste number"\
        \[5\] "Waste name"\
        \[6\] "Waste grave candles (yes/no)"\
        \[7\] "Waste in storage on 1.1.2021 (kg)"\
        \[8\] "Waste in storage on 31.12.2021 (kg)"\
        \[9\] 'Stored on 31.12.2021, scheduled for operation (R,D)'

-   Sheet 2: Waste received

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Statistical region"\
        \[4\] "Waste number"\
        \[5\] "Waste name"\
        \[6\] "Waste tombstone candles (yes/no)"\
        \[7\] "Waste received, own waste (kg)"\
        \[8\] "Waste received, from other original producers in the RS (kg)" \[9\] "Waste collected, from waste collectors in RS (kg)"\
        \[10\] "Waste received from treatment operators in RS (kg)"\
        \[11\] "Waste received from other EU Member States (kg)"\
        \[12\] "Waste received, from non-EU countries (kg)"\
        \[13\] "Waste received, TOTAL (kg)"\
        \[14\] "Treatment operation (R, D)"

-   Sheet 3: Treatment of waste received

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Statistical region"\
        \[4\] "Waste number"\
        \[5\] "Waste name"\
        \[6\] "Waste grave candles (yes/no)"\
        \[7\] 'Waste entering the treatment process (kg)' 'Treatment process (R, D)'

-   Sheet 4: Management of waste from treatment operations and untreated waste

    -   \[1\] "Summer"\
        \[2\] "Report"\
        \[3\] "Statistical region"\
        \[4\] "Waste incoming and waste received untreated number"\
        \[5\] "Waste incoming and accepted untreated waste name"\
        \[6\] "Waste leaving treatment and delivered untreated waste number" \[7\] "Waste exiting treatment and delivered untreated waste name"\
        \[8\] "Waste tombstone candles (yes/no)"\
        \[9\] "Waste delivered to SI waste collector for further management (kg)"\
        \[10\] 'Waste sent for further treatment to a treatment operator in SI (kg)'\
        \[11\] 'Waste sent for further management to other EU Member States (kg)'\
        \[12\] "Waste sent for further management to non-EU countries (kg)"

-   Sheet 4a: Management of treatment products that are no longer waste

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Waste to incoming treatment number"\
        \[4\] "Waste to incoming treatment name"\
        \[5\] "Treated substance or object that has lost its waste status at the exit of the treatment operation"\
        \[6\] "Delivered to storage or to other persons in the RS in kg"\
        \[7\] "Shipped to other EU Member States in kg"\
        \[8\] "Shipped to non-EU countries in kg"

-   Sheet 5: Municipal waste received for treatment, separated by municipality of origin

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Waste number"\
        \[4\] "Waste name"\
        \[5\] "Waste grave candles (yes/no)"\
        \[6\] "Waste collected by municipality of origin (kg)"\
        \[7\] "Commune code"\
        \[8\] "Name of municipality"

-   Sheet 6: Mass difference between waste input and treatment product volumes due to mass change during the treatment process

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Waste at treatment input number"\
        \[4\] "Waste at treatment input name"\
        \[5\] "Waste tombstone candles (yes/no)"\
        \[6\] 'Mass reduction or increase during the treatment process (kg)'

-   Sheet 7: Landfill capacity and status (for inert, hazardous and non-hazardous waste, including municipal waste)

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Landfill site"\
        \[4\] "Volume filled in the disposal field at the beginning of the year (in m\^3)"\
        \[5\] "Filled area on the disposal site at the beginning of the year (in m\^2)"\
        \[6\] "Volume of free capacity of the disposal site at the end of the year (in m\^3)"\
        \[7\] "Area of free capacity of the disposal site at the end of the year (in m\^2)"\
        \[8\] "Total disposal capacity (t)"\
        \[9\] "Remaining capacity on 1.1. (in t)"\
        \[10\] 'Remaining capacity on 31.12. (in t)'\
        \[11\] "Date of commencement of disposal"\
        \[12\] "Date of end of disposal"

-   Sheet 8: Landfill waste management

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Waste number"\
        \[4\] "Waste name"\
        \[5\] 'Waste received, all waste (kg)'\
        \[6\] "Waste received, of which waste without waste assessment (kg)"\
        \[7\] 'Landfill waste management, Disposed waste (D1), total (kg)'\
        \[8\] "Landfill waste management, Disposed waste (D1), hazardous waste (kg)"\
        \[9\] 'Landfill waste management, Disposed waste (D1), non-hazardous waste (kg)'\
        \[10\] "Landfill waste management, Disposed waste (D1), Inert waste (kg)"\
        \[11\] "Landfill waste management, Waste for construction of landfill facilities (kg)"\
        \[12\] "Landfill waste management, Waste for landfill cover (kg)"\
        \[13\] "Landfill waste management, Waste rejected (kg)"

-   Sheet 9: Municipal waste disposed by municipality of origin

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Waste number"\
        \[4\] "Waste name"\
        \[5\] "Waste disposed of by municipality of origin (kg)" \[6\] "Municipality code"\
        \[7\] "Name of municipality"

```{r waste_treatment_operators}

# how waste is used

# reports of waste treatment operators (ODP-Treatment) - poročil izvajalcev obdelave odpadkov
# wto2021 - waste treatment operators

# Specify the path to the Excel file
treatment_21.path <- "2021 data\\podatki LP ODP-obdelava 2021.xlsx"

# Get the sheet names
sheet_names <- excel_sheets(treatment_21.path)

# Initialize a list to store processed sheets
processed_sheets <- list()

# Define the sheets where n_max should be 3 (replace with actual sheet indices)
# if needed
sheets_with_n_max_3 <- c(2, 4, 5, 7)

sheets_with_n_max_4 <- 9

# Loop through each sheet
for (sheet_name in sheet_names) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else if (sheet_index == sheets_with_n_max_4) 4 else 2
  processed_sheet <- process_sheet(treatment_21.path, sheet_index, n_max)
  # print(sheet_name)
  # print(n_max)
  processed_sheets[[sheet_name]] <- processed_sheet
}

# Applying the function to each data frame in processed_sheets
processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

# define new sheet names
new_sheet_names <- c(
  "Waste storage", 
  "Waste received", 
  "Treatment of waste received", 
  "Management of waste from treatment operations and untreated waste", 
  "Management of treatment products that are no longer waste", 
  "Municipal waste received for treatment, separated by municipality of origin", 
  "Mass difference between waste input and treatment product volumes due to mass change during the treatment process", 
  "Landfill capacity and status (for inert, hazardous and non-hazardous waste, including municipal waste)", 
  "Landfill waste management", 
  "Municipal waste disposed by municipality of origin")

# add new sheeet names
# names(processed_sheets) <- new_sheet_names

# using openxlsx, export the list of sheets processed_sheets to one individual csv
write.xlsx(processed_sheets, "2021 data\\2021 filtered\\treatment_21.xlsx")

# Sheet 1: Waste storage
processed_sheets[[1]] |> filter(`Statistična regija` == "GORENJSKA")

# Sheet 2: Waste received
processed_sheets[[2]] |> filter(`Statistična regija` == "GORENJSKA")

# Sheet 3: Treatment of waste received
processed_sheets[[3]] |> filter(`Statistična regija` == "GORENJSKA")

# Sheet 4: Management of waste from treatment operations and untreated waste
processed_sheets[[4]] |> filter(`Statistična regija` == "GORENJSKA")

# Sheet 4a: Management of treatment products that are no longer waste
processed_sheets[[5]]

# Sheet 5: Municipal waste received for treatment, separated by municipality of origin
waste_treatment.21 <- processed_sheets[[6]]

waste_treatment.21 <- waste_treatment.21 |> 
  rename(waste_by_municipality = `Prevzeti odpadki glede na občino izvora (kg)`)

# go through all the regions (GORENJSKA, POMURKSA, etc.) and find municipality with most waste
find_municipality_with_most_waste(GORENJSKA, waste_treatment.21)
find_municipality_with_most_waste(POMURSKA, waste_treatment.21)
find_municipality_with_most_waste(KOROŠKA, waste_treatment.21)
find_municipality_with_most_waste(OBALNOKRAŠKA, waste_treatment.21)
find_municipality_with_most_waste(SAVINJSKA, waste_treatment.21)
find_municipality_with_most_waste(JUGOVZHODNA.SLOVENIJA, waste_treatment.21)
find_municipality_with_most_waste(OSREDNJESLOVENSKA, waste_treatment.21)
find_municipality_with_most_waste(GORIŠKA, waste_treatment.21)
find_municipality_with_most_waste(PODRAVSKA, waste_treatment.21)
find_municipality_with_most_waste(POSAVSKA, waste_treatment.21)
find_municipality_with_most_waste(PRIMORSKONOTRANJSKA, waste_treatment.21)
find_municipality_with_most_waste(ZASAVSKA, waste_treatment.21)



# Sheet 6: Mass difference between waste input and treatment product volumes due to mass change during the treatment process
processed_sheets[[7]]

# Sheet 7: Landfill capacity and status (for inert, hazardous and non-hazardous waste, including municipal waste)
processed_sheets[[8]]

# Sheet 8: Landfill waste management
processed_sheets[[9]]

# Sheet 9: Municipal waste disposed by municipality of origin
processed_sheets[[10]]
```

# Year 2020

## 2020 - Data from the annual reports of the original emitters

```{r waste_generation}

# Specify the path to the Excel file
waste_generation_20.path <- "2020 data\\podatki LP ODP-nastajanje 2020.xlsx"

# Get the sheet names
sheet_names <- excel_sheets(waste_generation_20.path)

# Initialize a list to store processed sheets
processed_sheets <- list()

# Define the sheets where n_max should be 3 (replace with actual sheet indices)
# if needed
sheets_with_n_max_3 <- c(2, 3, 5)

# Loop through each sheet
for (sheet_name in sheet_names) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else 2
  processed_sheet <- process_sheet(waste_generation_20.path, sheet_index, n_max)
  processed_sheets[[sheet_name]] <- processed_sheet
}

# Applying the function to each data frame in processed_sheets
processed_sheets <- lapply(processed_sheets, filter_df_by_codes)
```

## 2020 - Data from waste collectors' annual reports

```{r waste_collection}

# Specify the path to the Excel file
waste_collection_20.path <- "2020 data\\podatki LP ODP-obdelava 2020.xlsx"

# Get the sheet names
sheet_names <- excel_sheets(waste_collection_20.path)

# Initialize a list to store processed sheets
processed_sheets <- list()

# Define the sheets where n_max should be 3 (replace with actual sheet indices)
sheets_with_n_max_3 <- c(2, 4, 5, 9)

# Loop through each sheet
for (sheet_name in sheet_names) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else 2
  processed_sheet <- process_sheet(waste_collection_20.path, sheet_index, n_max)
  processed_sheets[[sheet_name]] <- processed_sheet
}

# Applying the function to each data frame in processed_sheets
processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

storing.20 <- processed_sheets[[1]]

```

## 2020 - Data from annual reports of waste treatment operators

```{r waste_collection_2020}

# Specify the path to the Excel file
waste_recovery_20.path <- "2020 data\\podatki LP ODP-zbiranje 2020.xlsx"

# Get the sheet names
sheet_names <- excel_sheets(waste_recovery_20.path)

# Initialize a list to store processed sheets
processed_sheets <- list()

# Define the sheets where n_max should be 3 (replace with actual sheet indices)
sheets_with_n_max_3 <- c(2, 3, 5)

# Loop through each sheet
for (sheet_name in sheet_names) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else 2
  processed_sheet <- process_sheet(waste_recovery_20.path, sheet_index, n_max)
  processed_sheets[[sheet_name]] <- processed_sheet
}

# Applying the function to each data frame in processed_sheets
processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

list_of_waste_by_municipality(OBALNOKRAŠKA, processed_sheets[[4]])
find_municipality_with_most_waste(OBALNOKRAŠKA, processed_sheets[[4]])

processed_sheets[[4]] <- processed_sheets[[4]] |> 
  rename(waste_by_municipality = `Komunalni odpadki po občini izvora kg`)

find_municipality_with_most_waste(GORENJSKA, processed_sheets[[4]])
find_municipality_with_most_waste(POMURSKA, processed_sheets[[4]])
find_municipality_with_most_waste(KOROŠKA, processed_sheets[[4]])
find_municipality_with_most_waste(OBALNOKRAŠKA, processed_sheets[[4]])
find_municipality_with_most_waste(SAVINJSKA, processed_sheets[[4]])
find_municipality_with_most_waste(JUGOVZHODNA.SLOVENIJA, processed_sheets[[4]])
find_municipality_with_most_waste(OSREDNJESLOVENSKA, processed_sheets[[4]])
find_municipality_with_most_waste(GORIŠKA, processed_sheets[[4]])
find_municipality_with_most_waste(PODRAVSKA, processed_sheets[[4]])
find_municipality_with_most_waste(POSAVSKA, processed_sheets[[4]])
find_municipality_with_most_waste(PRIMORSKONOTRANJSKA, processed_sheets[[4]])
find_municipality_with_most_waste(ZASAVSKA, processed_sheets[[4]])

treatment.20 <- processed_sheets[[1]]

# processed_sheets[[1]]
```

# Year 2019

## 2019 - Data from the annual reports of the original emitters

```{r waste_generation}

# Specify the path to the Excel file
waste_generation_19.path <- "2019 data\\podatki LP ODP-nastajanje 2019.xlsx"

# Get the sheet names
sheet_names <- excel_sheets(waste_generation_19.path)

# Initialize a list to store processed sheets
processed_sheets <- list()

# Define the sheets where n_max should be 3 (replace with actual sheet indices)
# if needed
sheets_with_n_max_3 <- c(2, 3, 5)

# Loop through each sheet
for (sheet_name in sheet_names) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else 2
  processed_sheet <- process_sheet(waste_generation_19.path, sheet_index, n_max)
  processed_sheets[[sheet_name]] <- processed_sheet
}

# Applying the function to each data frame in processed_sheets
processed_sheets <- lapply(processed_sheets, filter_df_by_codes)
```

## 2019 - Data from the annual reports on waste collection from manufacturing and service activities

```{r waste_collection_2019}
waste_collection_19.path <- "2019 data\\ODP_Z_2019_objava_21122020.xlsx"

waste_collection_19.sheet1 <- read_excel(waste_collection_19.path, skip = 2, sheet = 1)

waste_collection_19.by_codes1 <- waste_collection_19.sheet1 |>
  rename(waste_code = `ŠT. ODPADKA`) |> 
  filter(
    waste_code %in% codes  |
      grepl("^03 01 [0-9]", waste_code, perl = TRUE) &
      !grepl("03 01 04", waste_code, perl = TRUE)
    )

# change all NA to zero
waste_collection_19.by_codes1[is.na(waste_collection_19.by_codes1)] <- 0

waste_collection_19.by_codes1 |> 
  filter(`STATISTIČNA REGIJA` == "OBALNO-KRAŠKA") 
```

## 2019 - Data from the annual waste recovery/disposal reports

```{r waste_recovery}
waste_recovery_19.path <- "2019 data\\ODP_P_2019_objava_21122020.xlsx"
```

```{r waste_storage}
# WASTE STORAGE IN 2019

waste_recovery_19.sheet1 <- read_excel(waste_recovery_19.path, skip = 2, sheet = 1)

waste_recovery_19.by_codes1 <- waste_recovery_19.sheet1 |>
  rename(waste_code = `ŠT. ODPADKA`) |> 
  filter(
    waste_code %in% codes  |
      grepl("^03 01 [0-9]", waste_code, perl = TRUE) &
      !grepl("03 01 04", waste_code, perl = TRUE)
    )

# change all NA to zero
waste_recovery_19.by_codes1[is.na(waste_recovery_19.by_codes1)] <- 0
```

```{r waste_collected}
# WASTE COLLECTED IN 2019

waste_recovery_19.sheet2 <- read_excel(waste_recovery_19.path, skip = 2, sheet = 2)

waste_recovery_19.by_codes2 <- waste_recovery_19.sheet2 |>
  rename(waste_code = `ŠT. ODPADKA`) |> 
  filter(
    waste_code %in% codes  |
      grepl("^03 01 [0-9]", waste_code, perl = TRUE) &
      !grepl("03 01 04", waste_code, perl = TRUE)
    )

# change all NA to zero
waste_recovery_19.by_codes2[is.na(waste_recovery_19.by_codes2)] <- 0
```

```{r treatment_waste_received}
# TREATMENT OF WASTE RECEIVED IN 2019

waste_recovery_19.sheet3 <- read_excel(waste_recovery_19.path, skip = 2, sheet = 3)

waste_recovery_19.by_codes3 <- waste_recovery_19.sheet3 |>
  rename(waste_code = `ŠT. ODPADKA`) |> 
  filter(
    waste_code %in% codes  |
      grepl("^03 01 [0-9]", waste_code, perl = TRUE) &
      !grepl("03 01 04", waste_code, perl = TRUE)
    )

# change all NA to zero
waste_recovery_19.by_codes3[is.na(waste_recovery_19.by_codes3)] <- 0
```

```{r treatment_process_waste}
# WASTE GENERATED IN THE TREATMENT PROCESS AND 
# UNTREATED WASTE DELIVERED TO OTHERS IN 2019

waste_recovery_19.sheet4 <- read_excel(waste_recovery_19.path, skip = 2, sheet = 4)

waste_recovery_19.by_codes4 <- waste_recovery_19.sheet4 |>
  rename(waste_code = `ŠT. ODPADKA`) |> 
  filter(
    waste_code %in% codes  |
      grepl("^03 01 [0-9]", waste_code, perl = TRUE) &
      !grepl("03 01 04", waste_code, perl = TRUE)
    )
```

```{r municipal_waste_treatment}
# MUNICIPAL WASTE RECEIVED FOR TREATMENT, 
# SEPARATED BY MUNICIPALITY OF ORIGIN IN 2019

waste_recovery_19.sheet5 <- read_excel(waste_recovery_19.path, skip = 2, sheet = 5)

waste_recovery_19.by_codes5 <- waste_recovery_19.sheet5 |>
  rename(waste_code = `ŠT. ODPADKA`) |> 
  filter(
    waste_code %in% codes  |
      grepl("^03 01 [0-9]", waste_code, perl = TRUE) &
      !grepl("03 01 04", waste_code, perl = TRUE)
    )
```

```{r difference_waste_input_treatment_process}
# THE DIFFERENCE IN MASS BETWEEN THE WASTE INPUT AND 
# THE TREATMENT PRODUCT VOLUMES DUE TO LOSSES DURING 
# THE TREATMENT PROCESS IN 2019

waste_recovery_19.sheet6 <- read_excel(waste_recovery_19.path, skip = 2, sheet = 6)

waste_recovery_19.by_codes6 <- waste_recovery_19.sheet6 |>
  rename(waste_code = `ŠT. ODPADKA`) |> 
  filter(
    waste_code %in% codes  |
      grepl("^03 01 [0-9]", waste_code, perl = TRUE) &
      !grepl("03 01 04", waste_code, perl = TRUE)
    )
```

```{r landfill_capacity}
# LANDFILL CAPACITY AND STATUS IN 2019
waste_recovery_19.sheet7 <- read_excel(waste_recovery_19.path, skip = 2, sheet = 7)

# no codes to filter by
```

```{r waste_volumes_management_landfill}
# TOTAL WASTE VOLUMES AND MANAGEMENT IN LANDFILL IN 2019
waste_recovery_19.sheet8 <- read_excel(waste_recovery_19.path, skip = 2, sheet = 8)

waste_recovery_19.by_codes8 <- waste_recovery_19.sheet8 |>
  rename(waste_code = `ŠT. ODPADKA`) |> 
  filter(
    waste_code %in% codes  |
      grepl("^03 01 [0-9]", waste_code, perl = TRUE) &
      !grepl("03 01 04", waste_code, perl = TRUE)
    )
```

```{r municipal_waste_disposed}
# MUNICIPAL WASTE DISPOSED OF BY MUNICIPALITY IN 2019
waste_recovery_19.sheet9 <- read_excel(waste_recovery_19.path, skip = 2, sheet = 9)

# no code to filter by for wood
```

# Year 2018

## 2018 - Data from the annual reports received on waste generation in manufacturing and service activities

```{r waste_generation}
waste_generation_18.path <- "2018 data\\ODP_2018_objava21122020.xlsx"
region <- "ST. REGIJA                                           (1-POMURSKA,  2-PODRAVSKA,                                3-KOROŠKA,  4-SAVINJSKA,  5-ZASAVSKA,        6 -POSAVSKA,  7-JUGOVZHODNA SLOVENIJA,  8-OSREDNJESLOVENSKA, 9-GORENJSKA,      10-PRIMORSKO-NOTRANJSKA,  11-GORIŠKA,  12-OBALNO-KRAŠKA)"
```

```{r TABLE_1_WASTE_GENERATED}
# TYPE, QUANTITY AND TREATMENT OF WASTE 
# FROM MANUFACTURING AND SERVICE ACTIVITIES FOR 2018

data18.sheet1 <- read_excel(waste_generation_18.path, skip = 2, sheet = 1)

filtered_by_codes.sheet1 <- data18.sheet1 |> 
  filter(`ŠT. ODPADKA` %in% codes  | grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) & !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE))

filtered_by_codes.sheet1 <- filtered_by_codes.sheet1 |> 
  rename(Region = region)

# Create a bar chart
filtered_by_codes.sheet1 |> 
  ggplot(aes(x = factor(Region), fill = factor(Region))) +
  geom_bar() +
  labs(title = "WASTE GENERATED by Region", x = "Region", y = "Count") +
  scale_x_discrete(labels = c("0" = "Not Defined", "1" = "POMURSKA", "2" = "PODRAVSKA", "3" = "KOROŠKA", "4" = "SAVINJSKA", "5" = "ZASAVSKA", "6" = "POSAVSKA", "7" = "JUGOVZHODNA SLOVENIJA", "8" = "OSREDNJESLOVENSKA", "9" = "GORENJSKA", "10" = "PRIMORSKO-NOTRANJSKA", "11" = "GORIŠKA", "12" = "OBALNO-KRAŠKA"))

waste_per_company.sheet1 <- filtered_by_codes.sheet1 |> 
  group_by(NAZIV, `ŠT. ODPADKA`) |> 
  summarise(Count = n(),
            .groups = "drop_last")

# Create a pie chart
waste_per_company.sheet1 |> 
  ggplot(aes(x = "", y = Count, fill = `ŠT. ODPADKA`)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y", start = 0) +  # Convert to a pie chart
  labs(title = "Waste Type Proportion per Company", fill = "Waste Type") +
  theme_void()  # Remove unnecessary elements
```

```{r TABLE_2_WASTE_MANAGEMENT}

data18.sheet2 <- read_excel(waste_generation_18.path, skip = 2, sheet = 2)

filtered_by_codes.sheet2 <- data18.sheet2 |> 
  filter(`ŠT. ODPADKA` %in% codes  | grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) & !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE))

filtered_by_codes.sheet2 <- filtered_by_codes.sheet2 |> 
  rename(Region = `ST. REGIJA                                           (1-POMURSKA,  2-PODRAVSKA,                                3-KOROŠKA,  4-SAVINJSKA,  5-ZASAVSKA,                6 -POSAVSKA,  7-JUGOVZHODNA SLOVENIJA,  8-OSREDNJESLOVENSKA, 9-GORENJSKA,         10-PRIMORSKO-NOTRANJSKA,  11-GORIŠKA,  12-OBALNO-KRAŠKA)`)

waste_manag_company.sheet2 <- filtered_by_codes.sheet2 |> 
  group_by(`NAZIV`, `ŠT. ODPADKA`) |> 
  summarise(Count = n(),
            .groups = "drop_last")

waste_manag_company.sheet2 |> 
  group_by(`ŠT. ODPADKA`) |> 
  summarise(Count = n())

filtered_by_codes.sheet2 |> 
  ggplot(aes(x = factor(Region), fill = factor(Region))) +
  geom_bar() +
  labs(title = "WASTE MANAGEMENT by Region", x = "Region", y = "Count") +
  scale_x_discrete(labels = c("0" = "Not Defined", "1" = "POMURSKA", "2" = "PODRAVSKA", "3" = "KOROŠKA", "4" = "SAVINJSKA", "5" = "ZASAVSKA", "6" = "POSAVSKA", "7" = "JUGOVZHODNA", "8" = "OSREDNJESLOVENSKA", "9" = "GORENJSKA", "10" = "PRIMORSKO-NOTRANJSKA", "11" = "GORIŠKA", "12" = "OBALNO-KRAŠKA"))



#colnames(filtered)
#max(filtered[,6], na.rm = T)

# per region, per company
# number of companies
# type of waste per companies, how many different types
# node = a company in a region, point on a map
# cant just focus on headquarters (HQ) of the node
# try to figure out connection between operator, collector and storage


# descriptive statisc for all
```

## 2018 - Data from the annual reports received on waste collection from manufacturing and service activities

```{r waste_collection}
waste_collection_18.path <- "2018 data\\ODP_Z_2018_objava21122020.xlsx"
```

```{r waste_storage}
waste_collection_18.sheet1 <- read_excel(waste_collection_18.path, skip = 2, sheet = 1)

waste_collection_18.by_codes1 <- waste_collection_18.sheet1 |> 
  filter(
    `ŠT. ODPADKA` %in% codes  |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
      !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
    )

# Create a bar chart
waste_collection_18.by_codes1 |> 
  ggplot(aes(x = factor(`STATISTIČNA REGIJA`), fill = factor(`STATISTIČNA REGIJA`))) +
  geom_bar() +
  labs(title = "WASTE STORAGE by Region", x = "Region", y = "Count")
```

```{r waste_collected}
waste_collection_18.sheet2 <- read_excel(waste_collection_18.path, skip = 2, sheet = 2)

waste_collection_18.by_codes2 <- waste_collection_18.sheet2 |> 
  filter(
    `ŠT. ODPADKA` %in% codes  |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
      !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
    )

# Create a bar chart
waste_collection_18.by_codes2 |> 
  ggplot(aes(x = factor(`STATISTIČNA REGIJA`), fill = factor(`STATISTIČNA REGIJA`))) +
  geom_bar() +
  labs(title = "WASTE COLLECTED by Region", x = "Region", y = "Count")
```

```{r municipal_waste_collected}
waste_collection_18.sheet3 <- read_excel(waste_collection_18.path, skip = 2, sheet = 3)

waste_collection_18.by_codes3 <- waste_collection_18.sheet3 |> 
  filter(
    `ŠT. ODPADKA` %in% codes  |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
      !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
    )

waste_collection_18.by_codes3 <- waste_collection_18.by_codes3 |> 
  group_by(`NAZIV IN NASLOV`, `ŠT. ODPADKA`) |> 
  summarise(Count = n())

codes_occurrence <- waste_collection_18.by_codes3 |>
  group_by(`ŠT. ODPADKA`) |>
  summarise(Count = n())

codes_occurrence[1, 2]
codes_occurrence[2, 2]
codes_occurrence[3, 2]

codes_occurrence |> 
  ggplot(aes(x = "", y = Count, fill = `ŠT. ODPADKA`, label = Count)) +
  geom_bar(stat = "identity", width = 1) +
  geom_text(position = position_stack(vjust = 0.5), color = "white", size = 5) +  # Add text labels
  coord_polar("y", start = 0) +  # Convert to a pie chart
  labs(title = "Number of Companies per Waste Type", fill = "Waste Type") +
  theme_void()  # Remove unnecessary elements
```

```{r municipal_waste_collected_separated_by_mncplt_org}
waste_collection_18.sheet4 <- read_excel(waste_collection_18.path, skip = 2, sheet = 4)

waste_collection_18.by_codes4 <- waste_collection_18.sheet4 |> 
  filter(
    `ŠT. ODPADKA` %in% codes  |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
      !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
    )

waste_collection_18.by_codes4 <- waste_collection_18.by_codes4 |> 
  group_by(`NAZIV OBČINE`, `ŠT. ODPADKA`) |> 
  summarise(Count = n())

codes_occurrence.by_codes4 <- waste_collection_18.by_codes4 |> 
  group_by(`ŠT. ODPADKA`) |> 
  summarise(Count = n())

codes_occurrence.by_codes4 |> 
  ggplot(aes(x = "", y = Count, fill = `ŠT. ODPADKA`, label = Count)) +
  geom_bar(stat = "identity", width = 1) +
  geom_text(position = position_stack(vjust = 0.5), color = "white", size = 5) +  # Add text labels
  coord_polar("y", start = 0) +  # Convert to a pie chart
  labs(title = "Number of Municipalities per Waste Type", fill = "Waste Type") +
  theme_void()  # Remove unnecessary elements
```

```{r management_waste_collected}
waste_collection_18.sheet5 <- read_excel(waste_collection_18.path, skip = 2, sheet = 5)

waste_collection_18.by_codes5 <- waste_collection_18.sheet5 |> 
  filter(
    `ŠT. ODPADKA` %in% codes  |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
      !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
    )

waste_collection_18.by_codes5 <- waste_collection_18.by_codes5 |> 
  group_by(`STATISTIČNA REGIJA`, `ŠT. ODPADKA`) |> 
  summarise(Count = n())

# # Create a bar chart
# waste_collection_18.by_codes5 |> 
#   ggplot(aes(x = `STATISTIČNA REGIJA`, fill = factor(Count))) +
#   geom_bar() +
#   labs(title = "MANAGEMENT WASTE STORAGE by Region", x = "Region", y = "Count")

waste_collection_18.by_codes5 |> 
  ggplot(aes(x = `STATISTIČNA REGIJA`, y = Count, fill = factor(`ŠT. ODPADKA`))) +
  geom_tile() +
  labs(title = "MANAGEMENT WASTE STORAGE by Region", x = "Region", y = NULL) +
  theme_minimal()  # Adjust the theme as needed

codes_occurrence.by_codes5 <- waste_collection_18.by_codes5 |>
  group_by(`ŠT. ODPADKA`) |>
  summarise(Count = n())

codes_occurrence.by_codes5 |> 
  ggplot(aes(x = "", y = Count, fill = `ŠT. ODPADKA`, label = Count)) +
  geom_bar(stat = "identity", width = 1) +
  geom_text(position = position_stack(vjust = 0.5), color = "white", size = 5) +  # Add text labels
  coord_polar("y", start = 0) +  # Convert to a pie chart
  labs(title = "Number of Regions per Waste Type", fill = "Waste Type") +
  theme_void()  # Remove unnecessary elements
```

## 2018 - Data from the annual waste recovery/disposal reports received

```{r waste_recovery_disposal}
waste_recovery_18.path <- "2018 data\\ODP_P_2018_objava21122020.xlsx"
```

```{r waste_recovery_disposal_storage}
waste_recovery_18.sheet1 <- read_excel(waste_recovery_18.path, skip = 2, sheet = 1)

waste_recovery_18.by_codes1 <- waste_recovery_18.sheet1 |> 
  filter(
    `ŠT. ODPADKA` %in% codes  |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
      !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
    )
```

```{r waste_recovery/disposal_collected}
waste_recovery_18.sheet2 <- read_excel(waste_recovery_18.path, skip = 2, sheet = 2)

waste_recovery_18.by_codes2 <- waste_recovery_18.sheet2 |> 
  filter(
    `ŠT. ODPADKA` %in% codes  |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
      !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
    )
```

```{r treatment_of_waste}
waste_recovery_18.sheet3 <- read_excel(waste_recovery_18.path, skip = 2, sheet = 3)

waste_recovery_18.by_codes3 <- waste_recovery_18.sheet3 |> 
  filter(
    `ŠT. ODPADKA` %in% codes  |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
      !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
    )
```

```{r waste_generated}
# WASTE GENERATED IN THE TREATMENT PROCESS AND 
# UNTREATED WASTE DELIVERED TO OTHERS IN 2018
waste_recovery_18.sheet4 <- read_excel(waste_recovery_18.path, skip = 2, sheet = 4)

waste_recovery_18.by_codes4 <- waste_recovery_18.sheet4 |> 
  filter(
    `ŠT. ODPADKA` %in% codes  |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
      !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
    )
```

```{r municipal_waste_received}
# MUNICIPAL WASTE RECEIVED FOR TREATMENT, 
# SEPARATED BY MUNICIPALITY OF ORIGIN IN 2018
waste_recovery_18.sheet5 <- read_excel(waste_recovery_18.path, skip = 2, sheet = 5)

waste_recovery_18.by_codes5 <- waste_recovery_18.sheet5 |> 
  filter(
    `ŠT. ODPADKA` %in% codes  |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
      !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
    )
```

```{r difference_waste_input_treatment_process}
# MASS DIFFERENCE BETWEEN WASTE INPUT AND 
# TREATMENT PRODUCT VOLUMES DUE TO LOSSES 
# DURING THE TREATMENT PROCESS IN 2018

waste_recovery_18.sheet6 <- read_excel(waste_recovery_18.path, skip = 2, sheet = 6)

waste_recovery_18.by_codes6 <- waste_recovery_18.sheet6 |> 
  filter(
    `ŠT. ODPADKA` %in% codes  |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
      !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
    )
```

```{r landfill_capacity}
# LANDFILL CAPACITY AND STATUS IN 2018

waste_recovery_18.sheet7 <- read_excel(waste_recovery_18.path, skip = 2, sheet = 7)

# cannot filter by codes
# should try by company names? 
```

```{r landfill_quantities_management}
# TOTAL QUANTITIES AND MANAGEMENT OF WASTE IN LANDFILL IN 2018

waste_recovery_18.sheet8 <- read_excel(waste_recovery_18.path, skip = 2, sheet = 8)

waste_recovery_18.by_codes8 <- waste_recovery_18.sheet8 |> 
  filter(
    `ŠT. ODPADKA` %in% codes  |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
      !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
    )
```

```{r municipal_waste_disposed}
# MUNICIPAL WASTE DISPOSED BY MUNICIPALITY IN 2018

waste_recovery_18.sheet9 <- read_excel(waste_recovery_18.path, skip = 2, sheet = 9)

# no code to filter by for wood
```

# Year 2017

# Year 2016
