---
title: "Green UP Project - Waste Data"
author: "Nikola Kovačević"
date: "15/11/2023"
format: html
editor: source
---

## Short description of the project

Studying available statistical data in Slovenia for companies producing specific waste types, as well as, companies responsible for the uptake of this waste.

## Structure

The structure of various years seems to be very different in some cases, so the first task would actually be to make sense of all of this and actually see [what's the difference in available data between the various years]{.underline}.\

There are datasets for each year: [generated waste]{.underline}, [collected waste]{.underline} and for [how waste is used]{.underline}. Moreover, in some datasets, this is actually broken down by companies in other its by regions (of Slovenia).

## Setup

```{r setup}
library(tidyverse)
library(gt)
library(gtExtras)
library(readxl)
library(ggplot2)
library(purrr)
library(openxlsx)
library(scales)
library(rlang)

codes <- c("15 01 03", "15 01 01", "17 02 01", "20 01 38", "20 01 37")

# currently in the same column -> "Odpadki na vhodu v obdelavo in prevzeti neobdelani odpadki številka", "Odpadki na izhodu iz postopka obdelave in oddani neobdelani odpadki številka",

columns_to_rename <- c("Številka odpadka", "Odpadki na vhodu v obdelavo številka", "Odpadek na vhodu v postopek obdelave številka")

# List of municipalities for each region
POMURSKA <- c("APAČE", "BELTINCI", "CANKOVA", "ČRENŠOVCI", "DOBROVNIK", "DOBRONAK", "GORNJA RADGONA", "GORNJI PETROVCI", "GRAD", "HODOŠ","KOBILJE", "KRIŽEVCI", "KUZMA", "LENDAVA", "LJUTOMER", "MORAVSKE TOPLICE", "MURSKA SOBOTA", "ODRANCI", "PUCONCI", "RADENCI", "RAZKRIŽJE", "ROGAŠOVCI", "SVETI JURIJ OB ŠČAVNICI", "ŠALOVCI", "TIŠINA", "TURNIŠČE", "VELIKA POLANA", "VERŽEJ")

PODRAVSKA  <- c(
  "BENEDIKT", "CERKVENJAK", "CIRKULANE", "DESTRNIK", "DORNAVA", "DUPLEK", "GORIŠNICA", "HAJDINA", "HOČE-SLIVNICA",
  "JURŠINCI", "KIDRIČEVO", "KUNGOTA", "LENART", "LOVRENC NA POHORJU", "MAJŠPERK", "MAKOLE", "MARIBOR", "MARKOVCI",
  "MIKLAVŽ NA DRAVSKEM POLJU", "OPLOTNICA", "ORMOŽ", "PESNICA", "PODLEHNIK", "POLJČANE", "PTUJ", "RAČE-FRAM", "RUŠE",
  "SELNICA OB DRAVI", "SLOVENSKA BISTRICA", "SREDIŠČE OB DRAVI", "STARŠE", "SVETA ANA", "SVETA TROJICA V SLOV. GORICAH", "SVETA TROJICA V SLOVENSKIH GORICAH", "SV. TROJICA V SLOV. GORICAH", "SVETI ANDRAŽ V SLOV. GORICAH", "SVETI JURIJ V SLOV. GORICAH", "SVETI JURIJ V SLOVENSKIH GORICAH", "SVETI TOMAŽ", "ŠENTILJ", "TRNOVSKA VAS", "VIDEM", "ZAVRČ", "ŽETALE"
)

KOROŠKA <- c(
  "ČRNA NA KOROŠKEM", "DRAVOGRAD", "MEŽICA", "MISLINJA", "MUTA", "PODVELKA", "PREVALJE", "RADLJE OB DRAVI", "RAVNE NA KOROŠKEM",
  "RIBNICA NA POHORJU", "SLOVENJ GRADEC", "VUZENICA"
)

SAVINJSKA <- c(
  "BRASLOVČE", "CELJE", "DOBJE", "DOBRNA", "GORNJI GRAD", "KOZJE", "LAŠKO", "LJUBNO", "LUČE", "MOZIRJE", "NAZARJE",
  "PODČETRTEK", "POLZELA", "PREBOLD", "REČICA OB SAVINJI", "ROGAŠKA SLATINA", "ROGATEC", "SLOVENSKE KONJICE", "SOLČAVA", "ŠENTJUR",
  "ŠMARJE PRI JELŠAH", "ŠMARTNO OB PAKI", "ŠOŠTANJ", "ŠTORE", "TABOR", "VELENJE", "VITANJE", "VOJNIK", "VRANSKO", "ZREČE", "ŽALEC"
)

ZASAVSKA <- c("HRASTNIK", "LITIJA", "TRBOVLJE", "ZAGORJE OB SAVI")

POSAVSKA <- c("BISTRICA OB SOTLI", "BREŽICE", "KOSTANJEVICA NA KRKI", "KRŠKO", "RADEČE", "SEVNICA")

JUGOVZHODNA.SLOVENIJA <- c(
  "ČRNOMELJ", "DOLENJSKE TOPLICE", "KOČEVJE", "KOSTEL", "LOŠKI POTOK", "METLIKA", "MIRNA", "MIRNA PEČ", "MOKRONOG-TREBELNO",
  "NOVO MESTO", "OSILNICA", "RIBNICA", "SEMIČ", "SODRAŽICA", "STRAŽA", "ŠENTJERNEJ", "ŠENTRUPERT", "ŠKOCJAN", "ŠMARJEŠKE TOPLICE",
  "TREBNJE", "ŽUŽEMBERK"
)

OSREDNJESLOVENSKA <- c(
  "BOROVNICA", "BREZOVICA", "DOBREPOLJE", "DOBROVA-POLHOV GRADEC", "DOL PRI LJUBLJANI", "DOMŽALE", "GROSUPLJE", "HORJUL",
  "IG", "IVANČNA GORICA", "KAMNIK", "KOMENDA", "LJUBLJANA", "LOG-DRAGOMER", "LOGATEC", "LUKOVICA", "MEDVODE", "MENGEŠ",
  "MORAVČE", "ŠKOFLJICA", "ŠMARTNO PRI LITIJI", "TRZIN", "VELIKE LAŠČE", "VODICE", "VRHNIKA"
)

GORENJSKA <- c("BLED", "BOHINJ", "CERKLJE NA GORENJSKEM", "GORENJA VAS-POLJANE", "GORJE", "JESENICE", "JEZERSKO", "KRANJ", "KRANJSKA GORA", "NAKLO", "PREDDVOR", "RADOVLJICA", "ŠENČUR", "ŠKOFJA LOKA", "TRŽIČ", "ŽELEZNIKI", "ŽIRI", "ŽIROVNICA")

PRIMORSKONOTRANJSKA <- c("BLOKE", "CERKNICA", "ILIRSKA BISTRICA", "LOŠKA DOLINA", "PIVKA", "POSTOJNA")

GORIŠKA <- c("AJDOVŠČINA", "BOVEC", "BRDA", "CERKNO", "IDRIJA", "KANAL", "KOBARID", "MIREN-KOSTANJEVICA", "NOVA GORICA", "RENČE-VOGRSKO", "ŠEMPETER-VRTOJBA", "TOLMIN", "VIPAVA")

OBALNOKRAŠKA <- c("ANKARAN", "DIVAČA", "HRPELJE-KOZINA", "IZOLA", "KOMEN", "KOPER", "PIRAN", "SEŽANA")

NEOPREDELJENO <- "NEOPREDELJENO"

# Create a dataframe with all municipality-region mappings
municipality_region_mapping <- data.frame(
  name_of_municipality = c(
    POMURSKA, PODRAVSKA, KOROŠKA, SAVINJSKA, ZASAVSKA, POSAVSKA, JUGOVZHODNA.SLOVENIJA, 
    OSREDNJESLOVENSKA, GORENJSKA, PRIMORSKONOTRANJSKA, GORIŠKA, OBALNOKRAŠKA
  ),
  statistical_region = c(
    rep("POMURSKA", length(POMURSKA)),
    rep("PODRAVSKA", length(PODRAVSKA)),
    rep("KOROŠKA", length(KOROŠKA)),
    rep("SAVINJSKA", length(SAVINJSKA)),
    rep("ZASAVSKA", length(ZASAVSKA)),
    rep("POSAVSKA", length(POSAVSKA)),
    rep("JUGOVZHODNA SLOVENIJA", length(JUGOVZHODNA.SLOVENIJA)),
    rep("OSREDNJESLOVENSKA", length(OSREDNJESLOVENSKA)),
    rep("GORENJSKA", length(GORENJSKA)),
    rep("PRIMORSKONOTRANJSKA", length(PRIMORSKONOTRANJSKA)),
    rep("GORIŠKA", length(GORIŠKA)),
    rep("OBALNOKRAŠKA", length(OBALNOKRAŠKA))
  )
)

create_year_directories <- function(base_dir, years, sub_dirs) {
  for (year in years) {
    # Define the year directory
    year_dir <- file.path(base_dir, paste0(year, " data"), paste0(year, " filtered"))
    
    # Check if the year directory exists, if not, create it
    if (!dir.exists(year_dir)) {
      dir.create(year_dir, recursive = TRUE)
    }
    
    # Check if each subdirectory exists within the year directory, if not, create it
    for (sub_dir in sub_dirs) {
      sub_dir_path <- file.path(year_dir, sub_dir)
      if (!dir.exists(sub_dir_path)) {
        dir.create(sub_dir_path)
      }
    }
  }
}

base_dir <- "."
years <- 2018:2022
sub_dirs <- c("generation", "collection", "treatment")

create_year_directories(base_dir, years, sub_dirs)

```

## Functions

```{r functions}

# Function to read and process a sheet
process_sheet <- function(path, sheet_index, n_max = 2, skip = 7) {
  # Read the header rows
  header <- read_excel(path, skip = skip, sheet = sheet_index, col_names = FALSE, n_max = n_max)
  
  # Determine the number of header rows
  num_header_rows <- nrow(header)
  
  # Check for valid number of header rows
  if (num_header_rows == 2) {
    
    # Combine the header rows into one
    combined_header <- map2_chr(header[1, ], 
                                header[2, ],
                                ~ ifelse(!is.na(.y), paste(.x, .y), as.character(.x)))
    
  } else if (num_header_rows == 3) {
    
    # Find indices where NA occurs
    na_indices <- which(is.na(header[1, ]))
    
    # Iterate over each NA index and replace with the last non-NA value
    for (i in na_indices) {
      header[1, i] <- tail(header[1, 1:i][!is.na(header[1, 1:i])], 1)
    }

    combined_header <- map2_chr(header[1, ], 
                                header[2, ], 
                                ~ ifelse(!is.na(.y), paste(.x, .y), as.character(.x)))
    
    combined_header <- map2_chr(combined_header,
                                header[3, ], 
                                ~ ifelse(!is.na(.y), paste(.x, .y), as.character(.x)))
    
  
  } else if (num_header_rows == 4) {
    
    # Find indices where NA occurs
    na_indices <- which(is.na(header[1, ]))
    
    # Iterate over each NA index and replace with the last non-NA value
    for (i in na_indices) {
      header[1, i] <- tail(header[1, 1:i][!is.na(header[1, 1:i])], 1)
    }

    combined_header <- map2_chr(header[1, ], 
                                header[2, ], 
                                ~ ifelse(!is.na(.y), paste(.x, .y), as.character(.x)))
    
    combined_header <- map2_chr(combined_header,
                                header[3, ], 
                                ~ ifelse(!is.na(.y), paste(.x, .y), as.character(.x)))
    
    combined_header <- map2_chr(combined_header,
                                header[4, ], 
                                ~ ifelse(!is.na(.y), paste(.x, .y), as.character(.x)))
  } else {
    # Read the sheet data
  sheet_data <- read_excel(path, skip = 7 + num_header_rows, sheet = sheet_index, col_names = FALSE)
  
  # set column names without using combined_header
  colnames(sheet_data) <- header[1, ]
  
  # Set the new column names
  #colnames(sheet_data) <- combined_header
  
  return(sheet_data)
    stop("Unexpected number of header rows. Only 1, 2, 3 or 4 header rows are supported.")
    
  }
  
  # Read the sheet data
  sheet_data <- read_excel(path, skip = 7 + num_header_rows, sheet = sheet_index, col_names = FALSE)
  
  
  # Set the new column names
  colnames(sheet_data) <- combined_header
  
  return(sheet_data)
}

# ------------------------------------------------------------

# Function to filter bz waste codes
filter_df_by_codes <- function(df) {
  # Replace NA values with 0 in numeric columns
  numeric_columns <- sapply(df, is.numeric)
  df[, numeric_columns][is.na(df[, numeric_columns])] <- 0
  
  # df <- df |> select_if(~ !any(is.na(.)))
  
  # character_columns <- sapply(df, is.character)
  # df[, character_columns][is.na(df[, character_columns])] <- "ne"
  
  # Check if any columns from the given exist and rename accordingly
  if (any(columns_to_rename %in% colnames(df))) {
    
    df <- df |> 
      rename_with(~ ifelse(. %in% columns_to_rename, "waste_code", .), 
                  cols = columns_to_rename) |> 
      filter(waste_code %in% 
               codes |
               grepl("^03 01 [0-9]", waste_code, perl = TRUE) &
               !grepl("03 01 04", waste_code, perl = TRUE)
      )
  }
  
  if (any(c("Odpadki na vhodu v obdelavo in prevzeti neobdelani odpadki številka", "Odpadki na izhodu iz postopka obdelave in oddani neobdelani odpadki številka") %in% colnames(df))) {
    df <- df |> 
      rename(treatment_input_waste_received_code = `Odpadki na vhodu v obdelavo in prevzeti neobdelani odpadki številka`,
             treatment_outlet_delivered_waste_code = `Odpadki na izhodu iz postopka obdelave in oddani neobdelani odpadki številka`)
    
    df <- df |> 
      filter(treatment_input_waste_received_code %in% 
               codes |
               grepl("^03 01 [0-9]", treatment_input_waste_received_code, perl = TRUE) &
               !grepl("03 01 04", treatment_input_waste_received_code, perl = TRUE)
      )
    
    df <- df |> 
      filter(treatment_outlet_delivered_waste_code %in% 
               codes |
               grepl("^03 01 [0-9]", treatment_outlet_delivered_waste_code, perl = TRUE) &
               !grepl("03 01 04", treatment_outlet_delivered_waste_code, perl = TRUE)
      )
  }
  
  # if there is a need to drop specific column
  
  # column_name <- "Odpadne nagrobne sveče (da/ne)"
  # 
  # if (column_name %in% colnames(df)) {
  #   df <- df |> 
  #     select(-column_name)
  # }
  
  return(df)
}

# ------------------------------------------------------------

# Function to find municipality with most waste in a region
find_municipality_with_most_waste <- function(region_municipalities, waste_df) {
  # Filter data for the specified region
  region_data <- waste_df[waste_df$name_of_municipality %in% region_municipalities, ]

  if (nrow(region_data) == 0) {
    print("No data available for the specified region.")
    return(NULL)
  }

  # `Komunalni odpadki po občini izvora kg`
  # `Komunalni odpadki in odpadek 16 01 03 po občini izvora kg`
  
  # Find the municipality with the most waste in the specified region
  municipality_with_most_waste <- aggregate(waste_by_municipality ~ name_of_municipality, data = region_data, FUN = sum)
  municipality_with_most_waste <- municipality_with_most_waste[which.max(municipality_with_most_waste$`waste_by_municipality`), ]
  
  # add a column with the region name, use the name of the variable
  municipality_with_most_waste$region <- deparse(substitute(region_municipalities))

  # Print the result
  print(municipality_with_most_waste)
}

# ------------------------------------------------------------

# Function to find the list of municipalities sorted by waste amount in a region
list_of_waste_by_municipality <- function(region_municipalities, waste_df) {
  # Filter data for the specified region
  region_data <- waste_df[waste_df$name_of_municipality %in% region_municipalities, ]
  print(region_data)
  
  if (nrow(region_data) == 0) {
    print("No data available for the specified region.")
    return(NULL)
  }
  
  # Calculate total waste for each municipality in the specified region
  total_waste_by_municipality <- aggregate(waste_by_municipality ~ name_of_municipality, data = region_data, FUN = sum)
  # Sort municipalities by waste amount in descending order
  sorted_municipalities <- total_waste_by_municipality[order(-total_waste_by_municipality$waste_by_municipality), ]

  # Print the result
  print(sorted_municipalities)
}

# ------------------------------------------------------------

# Define a function to rename the names of the waste in the rows
rename_waste_names <- function(df, column_name = "type_of_waste") {
  column_name <- sym(column_name)
  
  df |> 
    mutate(!!column_name := case_when(
      !!column_name == "Les, ki ni naveden v 20 01 37" ~ "Wood, not specified in 20 01 37",
      !!column_name == "Žagovina, oblanci, odrezki, les, iverne plošče in furnir, ki niso navedeni v 03 01 04" ~ "Sawdust/Chips/Wood, not specified in 03 01 04",
      !!column_name == "Odpadki, ki niso navedeni drugje" ~ "Miscellaneous Waste",
      !!column_name == "Papirna in kartonska embalaža ter embalaža iz lepenke" ~ "Paper/Cardboard Packaging",
      !!column_name == "Lesena embalaža" ~ "Wooden packaging",
      !!column_name == "Les" ~ "Wood",
      !!column_name == "Odpadna lubje in pluta" ~ "Bark and Cork Waste",
    ))
}

# ------------------------------------------------------------

# Define a function to rename the description of treatment
rename_treatment_description <- function(df) {
  df |> 
    mutate(description_of_treatment = case_when(
      description_of_treatment == "20 – uporaba kot gorivo ali druga sredstva za pridobivanje energije" ~ "use as fuel/energy production",
      description_of_treatment == "2 – predobdelava (sortiranje, šrediranje, sušenje, ločevanje itd.)" ~ "pre-treatment", # pre-treatment (sorting, grading, drying, separation, etc.)
      description_of_treatment == "99 – brez obdelave" ~ "no treatment",
      description_of_treatment == "7 – predelava odpadkov v premični napravi" ~ "recovery of waste in a mobile installation",
      description_of_treatment == "22 – sosežig" ~ "co-incineration",
      description_of_treatment == "23 – drug postopek predelave" ~ "other recovery operation",
      description_of_treatment == "9 – predelava odpadkov v polnilo pri gradnji objektov" ~ "processing into aggregate for construction",
      description_of_treatment == "4 – recikliranje" ~ "recycling",
      description_of_treatment == "6 – aerobna predelava (kompostarne)" ~ "aerobic treatment (composting plants)",
      description_of_treatment == "27 – drug postopek odstranjevanja" ~ "other disposal operation",
      description_of_treatment == "1 – priprava za ponovno uporabo" ~ "preparation for re-use",
      description_of_treatment == "19 – predelava v trdno gorivo (R12)" ~ "conversion to solid fuel",
      description_of_treatment == "26 – odlaganje" ~ "disposal"
    ))
}

```

## Initial questions

We would like to see:

-   who are the companies that produce wood waste \> 2019

    -   assume number of companies for recent years 2021 to 2019
    -   take account covid years

    at what location (or municipality) the waste is produced

-   who are the companies that collect and process this

-   (potentially) see how actually the waste is processed and used

We would like to filter by actual codes for the waste:

-   03 01 ?? (anything that is in this category, except for 03 01 04\* )
-   15 01 03 lesena embalaza (wooden packaging)
-   15 01 01 papirna embalaza (paper packaging)
-   17 02 01 Les (construction waste)
-   20 01 38 Les, ki ni naveden pod (wood not specified under)
-   20 01 37 Les, ki vsebuje nevarne snovi (wood containing hazardous substances)

## Update 1 - 18/12/2023

-   compare by years\
    important info\
    by company/region

-   at least get some companies for the map

-   stick for 12 regions for now\
    get a center point per region

-   one producer and handler\
    try to connect the points between those two\
    where to ship, where to store

-   how much was recycled\
    flow/material balance checks out in the end\
    startyear - generated + stored = should equal to 0\
    see for regions to municipalities

## Update 2 - 17/01/2024

-   filtered csv/excels -\> summary

## Update 3 - 23/02/2024

-   sum up sheets
-   sum up per region
-   compare the regions in different sheets
-   see what is the difference in numbers, how big the discrepancy is

### AnyLogic

-   rate of generation, collecting, processing

-   where to store, storage space, cost of storage per unit, revenue

-   how much is stored

-   waste streams

-   how much is recycled

-   take the regions, one point for collection and processing, determine this point

-   hover over the point, info to show: generated, collected, processed

# Year 2022

## 2022 - Data from the annual reports of the original generators

```{r waste_generation_2022}

# Specify the path to the Excel file
waste_generation_22.path <- "2022 data\\podatki LP ODP-nastajanje 2022.xlsx"

# Get the sheet names
sheet_names <- excel_sheets(waste_generation_22.path)

# Initialize a list to store processed sheets
processed_sheets <- list()

# Define the sheets where n_max should be 3 (replace with actual sheet indices)
# if needed
sheets_with_n_max_3 <- c(2, 3, 5)

# Loop through each sheet
for (sheet_name in sheet_names) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else 2
  processed_sheet <- process_sheet(waste_generation_22.path, sheet_index, n_max)
  processed_sheets[[sheet_name]] <- processed_sheet
}

# Applying the function to each data frame in processed_sheets
processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

generation.22 <- processed_sheets[[1]]

english_colnames <- c("year", "report", "statistical_region", 
                      "waste_code", "type_of_waste", "total_waste_generated_stored",
                      "temporarily_stored_start_year", "generated_in_the_year",
                      "temporarily_stored_end_year",
                      "waste_treated_by_original_generator",
                      "waste_transferred_for_treatment_in_RS",
                      "waste_sent_for_treatment_EU",
                      "waste_sent_for_treatment_outside_EU")

# Rename the columns
colnames(generation.22) <- english_colnames

generation.22 <- generation.22 |> select(-report)

# Rename the waste names
generation.22 <- rename_waste_names(generation.22)

generation.22 |> 
  filter(statistical_region == "GORENJSKA")

# Save as .csv to the generation folder
write.csv(generation.22, "2022 data\\2022 filtered\\generation\\generation_22.csv", row.names = FALSE)
```

## 2022 - Data on waste collected and its subsequent management from waste collectors' reports

```{r waste_collection_2022}

# Specify the path to the Excel file
waste_collection_22.path <- "2022 data\\podatki LP ODP-zbiranje 2022.xlsx"

# Get the sheet names
sheet_names <- excel_sheets(waste_collection_22.path)

# Initialize a list to store processed sheets
processed_sheets <- list()

# Define the sheets where n_max should be 3 (replace with actual sheet indices)
# if needed
sheets_with_n_max_3 <- c(2, 3, 5)

# header is 8 in this case
skip <- 8

processed_sheets <- lapply(sheet_names, function(sheet_name) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else 2
  
  if (sheet_index == 1) {
    processed_sheet <- process_sheet(waste_collection_22.path, sheet_index, n_max, skip)
  } else if (sheet_index == 6) {
    processed_sheet <- process_sheet(waste_collection_22.path, sheet_index, 1)
  } else {
    processed_sheet <- process_sheet(waste_collection_22.path, sheet_index, n_max)
  }

  # for the first 5 sheets deselect the last column
  # this is done to skip the candles on graves
  processed_sheets[[sheet_name]] <- if (sheet_index <= 5) {
    processed_sheet[, -ncol(processed_sheet)]
  } else {
    processed_sheet
  }
})

# Applying the function to each data frame in processed_sheets
processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

# Pre-storage of waste
pre_collection.22 <- processed_sheets[[1]] |> select(-Poročilo)

## Rename 
colnames(pre_collection.22)

pre_collection.22 <- pre_collection.22 |> 
  rename(year = `Leto`,
         statistical_region = `Statistična regija`,
         type_of_waste = `Naziv odpadka`,
         previous_stored_start_year = `Predhodno skladiščenje - količina skladiščenih odpadkov na dan 1.1.2022 kg`,
         previous_stored_end_year = `Predhodno skladiščenje - količina skladiščenih odpadkov na dan 31.12.2022 kg`)

pre_collection.22 <- rename_waste_names(pre_collection.22)

processed_sheets[[1]] <- pre_collection.22

# Waste collected
collected.22 <- processed_sheets[[2]] |>  select(-Poročilo)

## Rename 
colnames(collected.22)

collected.22 <- collected.22 |> 
  rename(statistical_region = `Statistična regija`,
         year = `Leto`,
         type_of_waste = `Naziv odpadka`,
         waste_from_producers_no_record = `Zbrani odpadki, prevzeti od izvirnih povzročiteljev brez evidenčnega lista (prepuščeni) kg`,
         waste_from_producers_with_record = `Zbrani odpadki, prevzeti od izvirnih povzročiteljev z evidenčnim listom (oddani) kg`,
         waste_from_collectors_RS = `Zbrani odpadki prevzeti od drugih imetnikov od zbiralcev v RS kg`,
         waste_from_processors_RS = `Zbrani odpadki prevzeti od drugih imetnikov od izvajalcev obdelave v RS kg`)
         
collected.22 <- rename_waste_names(collected.22)

processed_sheets[[2]] <- collected.22

# Municipal waste collected by source of generation
collected_mun.22 <- processed_sheets[[3]] |> select(-Poročilo)

## Rename 
colnames(collected_mun.22)

# TOTAL WASTE AND WASTE 16 01 03
collected_mun.22 <- collected_mun.22 |>  
  rename(year = `Leto`,
         type_of_waste = `Naziv odpadka`,
         total_mun_waste_collected = `Zbrani komunalni odpadki in odpadek 16 01 03 glede na dejavnost nastanka SKUPAJ kg`, 
         mun_waste_collected_by_househoulds_gen = `Zbrani komunalni odpadki in odpadek 16 01 03 glede na dejavnost nastanka iz gospodinjstev kg`,
         mun_waste_collected_by_companies_gen = `Zbrani komunalni odpadki in odpadek 16 01 03 glede na dejavnost nastanka iz dejavnosti kg`)

collected_mun.22 <- rename_waste_names(collected_mun.22)

processed_sheets[[3]] <- collected_mun.22

# Municipal waste collected by municipality of origin
collected_org_mun.22 <- processed_sheets[[4]] |> select(-Poročilo, -`Šifra občine 1`)

## Rename
colnames(collected_org_mun.22)

collected_org_mun.22 <- collected_org_mun.22 |> 
  rename(year = `Leto`,
         type_of_waste = `Naziv odpadka`,
         name_of_municipality = `Naziv občine`,
         waste_by_municipality = `Komunalni odpadki in odpadek 16 01 03 po občini izvora kg`)

collected_org_mun.22 <- rename_waste_names(collected_org_mun.22)

# add the statistical region to the collected_org_mun.22
collected_org_mun.22 <- collected_org_mun.22 |> 
  left_join(municipality_region_mapping, by = "name_of_municipality")

find_municipality_with_most_waste(GORENJSKA, collected_org_mun.22)
list_of_waste_by_municipality(GORENJSKA, collected_org_mun.22)

processed_sheets[[4]] <- collected_org_mun.22

# Management of collected waste
management.22 <- processed_sheets[[5]] |> select(-Poročilo)

## Rename
colnames(management.22)

management.22 <- management.22 |> 
  rename(statistical_region = `Statistična regija`,
         year = `Leto`,
         type_of_waste = `Naziv odpadka`,
         waste_handed_to_collectors_RS = `Odpadki, oddani v nadaljnje ravnanje zbiralcem v RS kg`,
         waste_delivered_to_operators_RS = `Odpadki, oddani v nadaljnje ravnanje izvajalcem obdelave v RS kg`,
         waste_sent_to_EU = `Odpadki, oddani v nadaljnje ravnanje v druge države članice EU kg`,
         waste_sent_to_non_EU = `Odpadki, oddani v nadaljnje ravnanje v države izven EU kg`)

management.22 <- rename_waste_names(management.22)

processed_sheets[[5]] <- management.22

# Household composting
composting.22 <- processed_sheets[[6]] |> select(-Poročilo, -`Šifra občine 1`)

## Rename
colnames(composting.22)

composting.22 <- composting.22 |> 
  rename(year = `Leto`,
         name_of_municipality = `Naziv občine`,
         number_of_households = `Število gospodinjstev v občini 2`,
         number_of_households_composting = `Število gospodinjstev, ki hišno kompostirajo`)

processed_sheets[[6]] <- composting.22

# waste oils EXCLUDED
waste_oils.22 <- processed_sheets[[7]]

sheet_names <- c(
  "Waste storage",
  "Waste received",
  "Waste source of generation",
  "Waste municipality of origin",
  "Municipal waste management",
  "Household composting"
)

# add the new names
names(processed_sheets) <- sheet_names

# For each sheet in processed_sheets, write the data to a .csv file
for (sheet_name in sheet_names) {
  write_excel_csv(processed_sheets[[sheet_name]], paste0("2022 data\\2022 filtered\\collection\\", tolower(gsub(" ", "_", sheet_name)), "_22.csv"))
}

```

## 2022 - Data from waste treatment operators' reports

```{r waste_treatment_2022}

# Specify the path to the Excel file
waste_treatment_22.path <- "2022 data\\podatki LP ODP-obdelava 2022.xlsx"

# Get the sheet names
sheet_names <- excel_sheets(waste_treatment_22.path)

# Initialize a list to store processed sheets
processed_sheets <- list()

# Define the sheets where n_max should be 3 (replace with actual sheet indices)
# if needed
sheets_with_n_max_3 <- c(2, 4, 5, 7)

sheets_with_n_max_4 <- 9

processed_sheets <- lapply(sheet_names, function(sheet_name) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else if (sheet_index == sheets_with_n_max_4) 4 else 2
  
  processed_sheet <- process_sheet(waste_treatment_22.path, sheet_index, n_max)

  processed_sheets[[sheet_name]] <- processed_sheet
  
})

processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

# Treatment in previous years, as of 1.1.2022
treatment.22 <- processed_sheets[[1]] |> select(-Poročilo, -`V postopku obdelave nastala snov ali predmet`)

## Rename
colnames(treatment.22)

treatment.22 <- treatment.22 |> 
  rename(year = `Leto`,
         statistical_region = `Statistična regija`,
         type_of_waste = `Naziv odpadka`,
         quantity_stored_start_year = `Skladiščena količina na dan 1.1.2022 kg`)

treatment.22 <- rename_waste_names(treatment.22)

processed_sheets[[1]] <- treatment.22

# Waste received
waste_received.22 <- processed_sheets[[2]] |> select(-Poročilo, -`Odpadne sveče pri odpadku 20 02 03 (da/ne)`, -`Predviden postopek obdelave (R, D)`)

## Rename
colnames(waste_received.22)

waste_received.22 <- waste_received.22 |> 
  rename(year = `Leto`,
         statistical_region = `Statistična regija`,
         type_of_waste = `Naziv odpadka`,
         untreated_waste_from_storage_start_year = `Prevzeti odpadki neobdelani odpadki iz skladišča (stanje na dan 1.1.) kg`,
         waste_received_own_waste = `Prevzeti odpadki lastni odpadki kg`,
         waste_received_from_generators = `Prevzeti odpadki od drugih izvirnih povzročiteljev v RS kg`,
         waste_received_from_collectors = `Prevzeti odpadki od zbiralcev odpadkov v RS kg`,
         waste_received_from_treatment = `Prevzeti odpadki od izvajalcev obdelave v RS kg`,
         waste_received_from_EU = `Prevzeti odpadki iz drugih držav članic EU kg`,
         waste_received_from_non_EU = `Prevzeti odpadki iz držav izven EU kg`,
         total_waste_received = `Prevzeti odpadki SKUPAJ kg`,)

waste_received.22 <- rename_waste_names(waste_received.22)

processed_sheets[[2]] <- waste_received.22

# Treatment of waste received
waste_treated.22 <- processed_sheets[[3]] |> select(-Poročilo, -`Postopek obdelave (R, D)`, -`Odpadne sveče pri odpadku 20 02 03 (da/ne)`)

## Rename
colnames(waste_treated.22)

waste_treated.22 <- waste_treated.22 |> 
  rename(year = `Leto`,
         statistical_region = `Statistična regija`,
         type_of_waste = `Naziv odpadka`,
         waste_quantity_per_treatment = `Količina odpadkov, na vhod v postopek obdelave (kg)`,
         description_of_treatment = `Opis postopka obdelave`,)

waste_treated.22 <- rename_waste_names(waste_treated.22)

waste_treated.22 <- rename_treatment_description(waste_treated.22)

processed_sheets[[3]] <- waste_treated.22

# Management of waste from the treatment process and untreated waste
management.22 <- processed_sheets[[4]] |> select(-Poročilo, -`Odpadne sveče pri odpadku 20 02 03 (da/ne)`)

## Rename 
colnames(management.22)

management.22 <- management.22 |> 
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    input_waste_name = `Odpadki na vhodu v obdelavo in prevzeti neobdelani odpadki naziv`,
    treatment_operation = `Postopek obdelave (R/D)`,
    output_waste_name = `Odpadki na izhodu iz postopka obdelave in oddani neobdelani odpadki naziv`,
    waste_sent_to_self_storage_end_year = `Odpadki, oddani v nadaljnje ravnanje sami sebi v skladiščenje (stanje na dan 31.12.) kg`,
    waste_sent_to_collector_SI = `Odpadki, oddani v nadaljnje ravnanje zbiralcu odpadkov v SI kg`,
    waste_sent_to_treatment_operator = `Odpadki, oddani v nadaljnje ravnanje izvajalcu obdelave v SI kg`,
    waste_sent_to_EU_member_states = `Odpadki, oddani v nadaljnje ravnanje v druge države članice EU kg`,
    waste_sent_to_non_EU_countries = `Odpadki, oddani v nadaljnje ravnanje v države izven EU kg`,
    waste_sent_to_no_further_management = `Odpadki, oddani v nadaljnje ravnanje ni nadaljnjega ravnanja kg`,
    further_treatment_envisaged = `Predviden nadaljnji postopek obdelave (R/D)`
  )

management.22 <- rename_waste_names(management.22, "input_waste_name")

management.22 <- rename_waste_names(management.22, "output_waste_name")

processed_sheets[[4]] <- management.22

# Management of treatment products that are no longer waste
management_no_waste.22 <- processed_sheets[[5]] |> select(-Poročilo)

## Rename
colnames(management_no_waste.22)

management_no_waste.22 <- management_no_waste.22 |> 
  rename(
    year = `Leto`,
    type_of_waste = `Odpadki na vhodu v obdelavo naziv`,
    treatment_operation = `Postopek obdelave (R/D)`,
    non_waste_substances = `V postopku obdelave nastale snovi in predmeti, ki niso več odpadki`,
    storage_operator_end_year = `Količina nastalih snovi in predmetov oddana v skladiščenje pri izvajalcu obdelave (stanje na dan 31.12.) kg`,
    delivered_company_and_person_RS_kg = `Količina nastalih snovi in predmetov oddana podjetju in fizični osebi v RS kg`,
    delivered_to_EU = `Količina nastalih snovi in predmetov oddana podjetju v drugi državi članici EU kg`,
    delivered_to_non_EU = `Količina nastalih snovi in predmetov oddana podjetju v državi izven EU kg`
  )

management_no_waste.22 <- rename_waste_names(management_no_waste.22, "type_of_waste")

## rename the non_waste_substances content
management_no_waste.22 <- management_no_waste.22 |> 
  mutate(non_waste_substances = case_when(
    non_waste_substances == "7 – les" ~ "wood",
    non_waste_substances == "99 – drugo" ~ "other",
    non_waste_substances == "16 – kompost (proizvod)" ~ "compost (product)",
    non_waste_substances == "11 – tekstil in usnje" ~ "textiles and leather",
    non_waste_substances == "5 – papir in karton" ~ "paper and cardboard",
    non_waste_substances == "22 – gradbeno polnilo" ~ "building filler"
  ))

processed_sheets[[5]] <- management_no_waste.22

# Mechanical-biological treatment of mixed municipal waste, separated by municipality of origin
mech_bio_treatment.22 <- processed_sheets[[6]] |> select(-Poročilo, -`Šifra občine 1`)

## Rename
colnames(mech_bio_treatment.22)

mech_bio_treatment.22 <- mech_bio_treatment.22 |> 
  rename(
    year = `Leto`,
    name_of_municipality = `Naziv občine`,
    mixed_waste_mech_bio_treatment = `V mehansko-biološko obdelavo prevzeti mešani komunalni odpadki (kg)`
  )

## add statistical regions to the mech_bio_treatment.22
mech_bio_treatment.22 <- mech_bio_treatment.22 |> 
  left_join(municipality_region_mapping, by = "name_of_municipality")

processed_sheets[[6]] <- mech_bio_treatment.22

# Mass difference between waste input and treatment product volumes
mass_difference.22 <- processed_sheets[[7]] |> select(-Poročilo, -`Odpadne sveče pri odpadku 20 02 03 (da/ne)`)

## Rename
colnames(mass_difference.22)

mass_difference.22 <- mass_difference.22 |> 
  rename(
    year = `Leto`,
    type_of_waste = `Odpadek na vhodu v postopek obdelave naziv`,
    treatment_operation = `Postopek obdelave (R/D)`,
    reduction_or_increase_of_mass_during_treatment = `Zmanjšanje ali povečanje mase med postopkom obdelave (kg)`,)

mass_difference.22 <- rename_waste_names(mass_difference.22)

processed_sheets[[7]] <- mass_difference.22

# Landfill capacity and status
landfill_capacity.22 <- processed_sheets[[8]] |> select(-Poročilo)

## Rename
colnames(landfill_capacity.22)

landfill_capacity.22 <- landfill_capacity.22 |> 
  rename(
    year = `Leto`,
    landfill_site = `Odlagališče`,
    volume_filled_start_year_m3 = `Zapolnjen volumen na odlagalnem polju na začetku leta m3`,
    area_filled_start_year_m2 = `Zapolnjena površina na odlagalnem polju na začetku leta m2`,
    volume_free_end_year_m3 = `Volumen proste kapacitete odlagalnega polja na koncu leta m3`,
    area_free_end_year_m2 = `Površina proste kapacitete odlagalnega polja na koncu leta m2`,
    total_capacity_t = `Celotna zmogljivost odlaganja t`,
    remaining_capacity_start_year_t = `Preostala zmogljivost na dan 1.1. t`,
    remaining_capacity_end_year_t = `Preostala zmogljivost na dan 31.12. t`
  )

## Rename the landfill site
landfill_capacity.22 <- landfill_capacity.22 |> 
  mutate(landfill_site = case_when(
    landfill_site == "Odlagališče 1" ~ "Landfill 1",
    landfill_site == "Odlagališče 2" ~ "Landfill 2",
    landfill_site == "Odlagališče 3" ~ "Landfill 3",
    landfill_site == "Odlagališče 4" ~ "Landfill 4",
    landfill_site == "Odlagališče 5" ~ "Landfill 5",
    landfill_site == "Odlagališče 6" ~ "Landfill 6",
    landfill_site == "Odlagališče 7" ~ "Landfill 7",
    landfill_site == "Odlagališče 8" ~ "Landfill 8",
    landfill_site == "Odlagališče 9" ~ "Landfill 9",
    landfill_site == "Odlagališče 10a" ~ "Landfill 10a",
    landfill_site == "Odlagališče 10b" ~ "Landfill 10b",
    landfill_site == "Odlagališče 11" ~ "Landfill 11",
    landfill_site == "Odlagališče 12" ~ "Landfill 12",
    landfill_site == "Odlagališče 13" ~ "Landfill 13",
    landfill_site == "Odlagališče 14" ~ "Landfill 14",
    landfill_site == "Odlagališče 15" ~ "Landfill 15",
    landfill_site == "Odlagališče 16" ~ "Landfill 16"
  ))

processed_sheets[[8]] <- landfill_capacity.22

# Waste management in landfill
landfill_management.22 <- processed_sheets[[9]] |> select(-Poročilo)

## Rename
colnames(landfill_management.22)

landfill_management.22 <- landfill_management.22 |> 
  rename(
    year = `Leto`,
    waste_code = `waste_code`,
    type_of_waste = `Naziv odpadka`,
    received_all_waste_kg = `Prevzeti odpadki vsi odpadki kg`,
    received_without_assessment_kg = `Prevzeti odpadki od tega odpadki brez ocene odpadka kg`,
    total_disposed_waste_kg = `Ravnanje z odpadki na odlagališču Odloženi odpadki (D1) skupaj kg`,
    hazardous_waste_kg = `Ravnanje z odpadki na odlagališču nevarni odpadki kg`,
    non_hazardous_waste_kg = `Ravnanje z odpadki na odlagališču nenevarni odpadki kg`,
    inert_waste_kg = `Ravnanje z odpadki na odlagališču inertni odpadki kg`,
    construction_waste_kg = `Ravnanje z odpadki na odlagališču Odpadki za gradnjo objektov odlagališča kg`,
    cover_waste_kg = `Ravnanje z odpadki na odlagališču Odpadki za prekrivanje odlagališča kg`
  )

landfill_management.22 <- rename_waste_names(landfill_management.22)

processed_sheets[[9]] <- landfill_management.22

# Disposed waste resulting from municipal waste treatment (from mechanical-biological treatment of mixed municipal waste and from treatment operations of separated fractions of municipal waste), by municipality of origin
# no data
disposed_waste.22 <- processed_sheets[[10]]

# Production of compost or digestate
compost_digestate.22 <- processed_sheets[[11]] |> select(-Poročilo)

## Rename
colnames(compost_digestate.22)

compost_digestate.22 <- compost_digestate.22 |> 
  rename(
    year = `Leto`,
    produced_compost_digestate = `Proizveden kompost/digestat`,
    quality_class = `Kakovostni razred`,
    quantity_produced_kg = `Proizvedena količina kg`,
    quantity_handled_market_kg = `Količina oddana v nadaljnje ravnanje ali dana na trg kg`,
    type_of_use = `Vrsta uporabe`
  )

## if column contains NA, then insert "Not specified"
compost_digestate.22 <- compost_digestate.22 |> 
  mutate(type_of_use = ifelse(is.na(type_of_use), "Not specified", type_of_use))

compost_digestate.22 <- compost_digestate.22 |> 
  mutate(
    produced_compost_digestate = case_when(
      produced_compost_digestate == "1 –  kompost (proizvod)" ~ "1 – compost (product)",
      produced_compost_digestate == "2 –  digestat (proizvod)" ~ "2 – digestate (product)",
      produced_compost_digestate == "3 –  19 05 03 (kompost)" ~ "3 – 19 05 03 (compost)",
      produced_compost_digestate == "4 –  19 06 04 (digestat iz anaerobne obdelave komunalnih odpadkov)" ~ "4 – 19 06 04 (digestate from anaerobic treatment of municipal waste)",
      produced_compost_digestate == "5 –  19 06 06 (digestat iz anaerobne obdelave živalskih in rastlinskih odpadkov)" ~ "5 – 19 06 06 (digestate from anaerobic treatment of animal and plant waste)"
    ),
    quality_class = case_when(
      quality_class == "1 – 1. kakovostni razred" ~ "1 – 1st quality class",
      quality_class == "2 – 2. kakovostni razred" ~ "2 – 2nd quality class",
      quality_class == "3 – ne ustreza specifikaciji" ~ "3 – does not meet specifications"
    ),
    type_of_use = case_when(
      type_of_use == "1 – vnos v ali na tla na kmetijskih zemljiščih" ~ "1 – application on agricultural land",
      type_of_use == "2 – vnos v ali na tla na nekmetijskih zemljiščih" ~ "2 – application on non-agricultural land",
      type_of_use == "Not specified" ~ "Not specified",
      type_of_use == "4 – v nadaljnjo obdelavo odpadkov" ~ "4 – further waste treatment"
    )
  )

processed_sheets[[11]] <- compost_digestate.22

# Production of compost or digestate, that are waste
compost_digestate_waste.22 <- processed_sheets[[12]] |> select(-Poročilo)

## Rename
colnames(compost_digestate_waste.22)

compost_digestate_waste.22 <- compost_digestate_waste.22 |> 
  rename(
    year = `Leto`,
    compost_digestate = `Kompost/digestat`,
    quality_class = `Kakovostni razred`,
    quantity_applied_land_m3 = `Vnešena količina v ali na tla m3`,
    land_use = `Raba zemljišča`
  )

compost_digestate_waste.22 <- compost_digestate_waste.22 |> 
  mutate(
    compost_digestate = case_when(
      compost_digestate == "1 – 19 05 03 (Kompost)" ~ "1 - 19 05 03 (Compost)"
    ),
    quality_class = case_when(
      quality_class == "1 – 1. kakovostni razred" ~ "1 - 1st quality class",
      quality_class == "2 – 2. kakovostni razred" ~ "2 - 2nd quality class"
    ),
    land_use = case_when(
      land_use == "4 – nekmetijsko zemljišče: park, zelenica ali površina za šport, rekreacijo ali prosti čas" ~ "4 - Park/Green Space",
      land_use == "6 – nekmetijsko zemljišče: odlagališče odpadkov" ~ "6 - Waste Disposal Site",
      land_use == "8 – nekmetijsko zemljišče: biofilter" ~ "8 - Biofilter"
    )
  )

processed_sheets[[12]] <- compost_digestate_waste.22

sheet_names <- c(
  "Prev Treatment",
  "Waste Received",
  "Waste Treatment",
  "Waste Management",
  "Non Waste Management",
  "MBT Municipal Origin",
  "Mass Diff",
  "Landfill Capacity",
  "Landfill Management",
  "Disposed Waste Municipal Origin",
  "Compost Digestate Prod",
  "Waste Compost Digestate Prod"
)

# add the new names
names(processed_sheets) <- sheet_names

for (sheet_name in sheet_names) {
  write_excel_csv(processed_sheets[[sheet_name]], paste0("2022 data\\2022 filtered\\treatment\\", tolower(gsub(" ", "_", sheet_name)), "_22.csv"))
}

```

# Year 2021

## 2021 - Original Generators

Contains only one sheet.

Columns (translated to English):

-   \[1\] "Year"\
    \[2\] "Report"\
    \[3\] "Statistical region of waste generation"\
    \[4\] "Waste number"\
    \[5\] "Waste name"\
    \[6\] 'Total waste: generated and stored (in kilograms)'\
    \[7\] "Waste in temporary storage on 1.1.2021 (in kilograms)"\
    \[8\] "Waste generated in 2021 (in kilograms)"\
    \[9\] "Waste in temporary storage on 31.12.2021 (in kilograms)"\
    \[10\] "Waste treated by the original generator (in kilograms)"\
    \[11\] "Waste delivered for further management to other persons in the Republic of Slovenia (in kilograms)"\
    \[12\] "Waste sent for treatment to other EU Member States (in kilograms)"\
    \[13\] "Waste sent for treatment to non-EU countries (in kilograms)"

```{r waste_generation_2021}

# generated waste

# Reminder: 
# Data are based on the ODP-Settlement Reports submitted for 2021. 
# The quantities of waste generated are not in all cases equal to the quantities of waste sent for further management (storage, collectors, waste treatment operators, export).

# oe2021 original emitters
# original emitters (ODP-sequestration) - poročil izvirnih povzročiteljev

# Specify the path to the Excel file
waste_generation_21.path <- "2021 data\\podatki LP ODP-nastajanje 2021.xlsx"

# Get the sheet names
sheet_names <- excel_sheets(waste_generation_21.path)

# Initialize a list to store processed sheets
processed_sheets <- list()

# Define the sheets where n_max should be 3 (replace with actual sheet indices)
# if needed
sheets_with_n_max_3 <- c(2, 3, 5)

# Loop through each sheet
for (sheet_name in sheet_names) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else 2
  processed_sheet <- process_sheet(waste_generation_21.path, sheet_index, n_max)
  processed_sheets[[sheet_name]] <- processed_sheet
}

# Applying the function to each data frame in processed_sheets
processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

generation.21 <- processed_sheets[[1]]

# Original Slovenian column names and their English translations
original_colnames <- colnames(generation.21)
english_colnames <- c("year", "report", "statistical_region", 
                      "waste_code", "type_of_waste", "total_waste_generated_stored",
                      "temporarily_stored_start_year", "generated_in_the_year",
                      "temporarily_stored_end_year",
                      "waste_treated_by_original_generator",
                      "waste_transferred_for_treatment_in_RS",
                      "waste_sent_for_treatment_EU",
                      "waste_sent_for_treatment_outside_EU")

# Rename the columns
colnames(generation.21) <- english_colnames

generation.21 <- generation.21 |> select(-report)

# translate the Name of Waste column to english
# possible cases are Les, ki ni naveden v 20 01 37
# Žagovina, oblanci, odrezki, les, iverne plošče in furnir, ki niso navedeni v 03 01 04
# Odpadki, ki niso navedeni drugje
# Papirna in kartonska embalaža ter embalaža iz lepenke
# Lesena embalaža
generation.21 <- rename_waste_names(generation.21)

# Summarize total waste by region
total_waste_by_region <- generation.21 |>
  group_by(statistical_region) |>
  summarize(total_waste = sum(generated_in_the_year))

# Summarize total waste by type
total_waste_by_type <- generation.21 |>
  group_by(type_of_waste) |>
  summarize(total_waste = sum(generated_in_the_year))

# Bar plot of total waste by region
ggplot(total_waste_by_region, aes(x = reorder(statistical_region, -total_waste), y = total_waste)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  labs(title = "Total Waste Generated by Region in 2021", x = "Region", y = "Total Waste")

# Pie chart of waste types
ggplot(total_waste_by_type, aes(x = "", y = total_waste, fill = type_of_waste)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar(theta = "y") +
  labs(title = "Waste Type Distribution in 2021")


# create a csv
write_excel_csv(generation.21, "2021 data\\2021 filtered\\generation\\generation_21.csv")

# create a .xlsx
# write.xlsx(generation.21, "2021 data\\2021 filtered\\generation_21.xlsx")
```

## 2021 - Collectors

Contains 6 sheets (translated to English):

-   Sheet 1: Pre-storage of waste, 2021

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Statistical region"\
        \[4\] "Waste number"\
        \[5\] "Waste name"\
        \[6\] "Waste grave candles (yes/no)" ?\
        \[7\] "Pre-stored waste on 1.1.2021"\
        \[8\] "Pre-stored waste on 31.12.2021"

-   Sheet 2: Waste collected, 2021

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Statistical region"\
        \[4\] "Waste number"\
        \[5\] "Waste name"\
        \[6\] "Waste grave candles (yes/no)"\
        \[7\] "Waste collected from original producers without record sheet (left behind) (kg)" 
        \[8\] 'Waste collected from original producers with a record sheet (discarded) (kg)'\
        \[9\] "Waste collected from other holders by collectors in the RS (kg)"\
        \[10\] "Waste collected from other holders from treatment operators in RS (kg)"

-   Sheet 3: Municipal waste collected by source of generation, 2021

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Waste number"\
        \[4\] "Waste name"\
        \[5\] "Waste grave candles (yes/no)"\
        \[6\] "Total municipal waste collected"\
        \[7\] "Municipal waste collected by source from households (kg)"\
        \[8\] 'Municipal waste collected by source of generation from activities (kg)'

-   Sheet 4: Municipal waste collected by municipality of origin, 2021

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Waste number"\
        \[4\] "Waste name"\
        \[5\] "Waste grave candles (yes/no)"\
        \[6\] "Municipal waste by municipality of origin (kg)"\
        \[7\] "Municipality code"\
        \[8\] "Name of municipality"

-   Sheet 5: Management of collected waste, 2021

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Statistical region"\
        \[4\] "Waste number"\
        \[5\] "Waste name"\
        \[6\] "Waste grave candles (yes/no)"\
        \[7\] "Waste handed over to collectors in the RS (kg)"\
        \[8\] "Waste delivered to treatment operators in the RS for further management (kg)"\
        \[9\] "Waste sent for further management to other EU Member States (kg)"\
        \[10\] "Waste sent for further management to non-EU countries (kg)"

-   Sheet 6: Household composting, 2021

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Municipality code"\
        \[4\] "Name of municipality"\
        \[5\] "Number of households per municipality"\
        \[6\] "Number of households per municipality that home compost"

```{r waste_collection_2021}

# collected waste
# skipping header files, fixing column names and removing initial empty rows

# collectors' annual reports (ODP-collection) - poročil zbiralcev odpadkov
# c2021 - collectors'

# Specify the path to the Excel file
waste_collectors_21.path <- "2021 data\\podatki LP ODP-zbiranje 2021.xlsx"

# Get the sheet names
sheet_names <- excel_sheets(waste_collectors_21.path)

# Initialize a list to store processed sheets
processed_sheets <- list()

# Define the sheets where n_max should be 3 (replace with actual sheet indices)
# if needed
sheets_with_n_max_3 <- c(2, 3, 5)

skip <- 7

# Loop through each sheet
for (sheet_name in sheet_names) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else 2
  if (sheet_index == 6) {
    processed_sheet <- process_sheet(waste_collectors_21.path, sheet_index, 1)
  } else {
    processed_sheet <- process_sheet(waste_collectors_21.path, sheet_index, n_max)
  }
  processed_sheets[[sheet_name]] <- processed_sheet
}

# Applying the function to each data frame in processed_sheets to filter by codes
processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

# Sheet 1: Pre-storage of waste, 2021
processed_sheets[[1]] 

## Rename the columns of the first sheet
processed_sheets[[1]]  <- processed_sheets[[1]] |> 
  select(-Poročilo, -`Odpadne nagrobne sveče (da/ne)`) |> 
  rename(statistical_region = `Statistična regija`,
         year = `Leto`,
         type_of_waste = `Naziv odpadka`,
         previous_stored_start_year = `Predhodno skladiščeni odpadki na dan 1.1.2021 kg`,
         previous_stored_end_year = `Predhodno skladiščeni odpadki na dan 31.12.2021 kg`)

list_of_waste_pre_stored <- function(region, df) {
  df |> 
    filter(statistical_region == region) |> 
    select((ncol(df) - 1):ncol(df)) |> 
    summarise(across(everything(), sum, na.rm = TRUE)) |> 
    pivot_longer(everything(), names_to = "waste_type", values_to = "waste_pre_stored") |> 
    summarise(total_waste = sum(waste_pre_stored, na.rm = TRUE))
}

# Sheet 2: Waste collected, 2021
processed_sheets[[2]] 

## Rename the columns of the second sheet
processed_sheets[[2]] <- processed_sheets[[2]] |> 
  select(-Poročilo, -`Odpadne nagrobne sveče (da/ne)`) |> 
  rename(statistical_region = `Statistična regija`,
         year = `Leto`,
         type_of_waste = `Naziv odpadka`,
         waste_from_producers_no_record = `Zbrani odpadki, prevzeti od izvirnih povzročiteljev brez evidenčnega lista (prepuščeni) kg`,
         waste_from_producers_with_record = `Zbrani odpadki, prevzeti od izvirnih povzročiteljev z evidenčnim listom (oddani) kg`,
         waste_from_collectors_RS = `Zbrani odpadki prevzeti od drugih imetnikov od zbiralcev v RS kg`,
         waste_from_processors_RS = `Zbrani odpadki prevzeti od drugih imetnikov od izvajalcev obdelave v RS kg`)

# define a function for the previous code
list_of_waste_collected <- function(region, df) {
  df |> 
    filter(statistical_region == region) |> 
    select(5:8) |> 
    summarise(across(everything(), sum, na.rm = TRUE)) |> 
    pivot_longer(everything(), names_to = "waste_type", values_to = "waste_collected") |> 
    summarise(total_waste = sum(waste_collected, na.rm = TRUE))
}

list_of_waste_collected("POMURSKA", processed_sheets[[2]])
list_of_waste_collected("KOROŠKA", processed_sheets[[2]])
list_of_waste_collected("OBALNO-KRAŠKA", processed_sheets[[2]])
list_of_waste_collected("PODRAVSKA", processed_sheets[[2]])
list_of_waste_collected("SAVINJSKA", processed_sheets[[2]])
list_of_waste_collected("ZASAVSKA", processed_sheets[[2]])
list_of_waste_collected("JUGOVZHODNA SLOVENIJA", processed_sheets[[2]])
list_of_waste_collected("OSREDNJESLOVENSKA", processed_sheets[[2]])
list_of_waste_collected("PRIMORSKO-NOTRANJSKA", processed_sheets[[2]])

# Sheet 3: Municipal waste collected by source of generation, 2021
processed_sheets[[3]]

## Rename the columns of the third sheet
processed_sheets[[3]] <- processed_sheets[[3]] |> 
  select(-Poročilo, -`Odpadne nagrobne sveče (da/ne)`) |> 
  rename(year = `Leto`,
         type_of_waste = `Naziv odpadka`,
         total_municipal_waste_collected = `Zbrani komunalni odpadki skupaj kg`,
         municipal_waste_from_households = `Zbrani komunalni odpadki glede na vir nastanka iz gospodinjstev kg`,
         municipal_waste_from_activities = `Zbrani komunalni odpadki glede na vir nastanka iz dejavnosti kg`)

# Sheet 4: Municipal waste collected by municipality of origin, 2021
wc_by_origin <- processed_sheets[[4]]
wc_by_origin <- wc_by_origin |> 
  select(-Poročilo, -`Odpadne nagrobne sveče (da/ne)`, -`Šifra občine 1`) |> 
  rename(waste_by_municipality = `Komunalni odpadki po občini izvora kg`,
         name_of_municipality = `Naziv občine`,
         type_of_waste = `Naziv odpadka`,
         year = `Leto`)

## Rename the columns of the fourth sheet
processed_sheets[[4]] <- wc_by_origin

# ------------------
# can create center points per municipalities with this
# use the one with the most waste
list_of_waste_by_municipality(GORENJSKA, wc_by_origin)

# each municipality should have its own region assign to it via a new column

# sum up the waste_by_municipality column
municipal_waste_collected.gorenjska <- list_of_waste_by_municipality(GORENJSKA, wc_by_origin) |> 
  select(waste_by_municipality) |>
  summarise(total_waste = sum(waste_by_municipality, na.rm = TRUE))

municipal_waste_collected.gorenjska <- municipal_waste_collected.gorenjska$total_waste
# sum up per sheet

find_municipality_with_most_waste(GORENJSKA, wc_by_origin)

# go through all the regions (GORENJSKA, POMURKSA, etc.) and find municipality with most waste
find_municipality_with_most_waste(GORENJSKA, wc_by_origin)
find_municipality_with_most_waste(POMURSKA, wc_by_origin)
find_municipality_with_most_waste(KOROŠKA, wc_by_origin)
find_municipality_with_most_waste(OBALNOKRAŠKA, wc_by_origin)
find_municipality_with_most_waste(SAVINJSKA, wc_by_origin)
find_municipality_with_most_waste(JUGOVZHODNA.SLOVENIJA, wc_by_origin)
find_municipality_with_most_waste(OSREDNJESLOVENSKA, wc_by_origin)
find_municipality_with_most_waste(GORIŠKA, wc_by_origin)
find_municipality_with_most_waste(PODRAVSKA, wc_by_origin)
find_municipality_with_most_waste(POSAVSKA, wc_by_origin)
find_municipality_with_most_waste(PRIMORSKONOTRANJSKA, wc_by_origin)
find_municipality_with_most_waste(ZASAVSKA, wc_by_origin)


# Merge the mapping dataframe with the wc_by_origin dataframe
wc_by_origin <- wc_by_origin |>
  left_join(municipality_region_mapping, by = "name_of_municipality")

# Check the result
head(wc_by_origin)

processed_sheets[[4]] <- wc_by_origin

# Sheet 5: Management of collected waste, 2021
processed_sheets[[5]] 

## Rename the columns of the fifth sheet
processed_sheets[[5]] <- processed_sheets[[5]] |> 
  select(-Poročilo, -`Odpadne nagrobne sveče (da/ne)`) |> 
  rename(statistical_region = `Statistična regija`,
         year = `Leto`,
         type_of_waste = `Naziv odpadka`,
         waste_handed_to_collectors_RS = `Odpadki oddani v nadaljnje ravnanje zbiralcem v RS kg`,
         waste_delivered_to_operators_RS = `Odpadki oddani v nadaljnje ravnanje izvajalcem obdelave v RS kg`,
         waste_sent_to_EU = `Odpadki oddani v nadaljnje ravnanje v druge države članice EU kg`,
         waste_sent_to_non_EU = `Odpadki oddani v nadaljnje ravnanje v države izven EU kg`)

list_of_waste_managed <- function(region, df) {
  df |> 
    filter(statistical_region == region) |> 
    select(5:8) |> 
    summarise(across(everything(), sum, na.rm = TRUE)) |> 
    pivot_longer(everything(), names_to = "waste_type", values_to = "waste_managed") |> 
    summarise(total_waste = sum(waste_managed, na.rm = TRUE))
}

# define variables for the table
waste_pre_stored.gorenjska <- list_of_waste_pre_stored("GORENJSKA", processed_sheets[[1]])$total_waste
waste_collected.gorenjska <- list_of_waste_collected("GORENJSKA", processed_sheets[[2]])$total_waste

municipal_waste_collected.gorenjska <- list_of_waste_by_municipality(GORENJSKA, wc_by_origin) |> 
  select(waste_by_municipality) |>
  summarise(total_waste = sum(waste_by_municipality, na.rm = TRUE))

municipal_waste_collected.gorenjska <- municipal_waste_collected.gorenjska$total_waste

waste_managed.gorenjska <- list_of_waste_managed("GORENJSKA", processed_sheets[[5]])$total_waste

# create a table with all sums per region, municipal_waste_collected, waste_managed, waste_collected, waste_pre_stored
table <- tibble(
  type = c("waste_pre_stored", "waste_collected", "waste_managed", "municipal_waste_collected"),
  GORENJSKA = c(waste_pre_stored.gorenjska, waste_collected.gorenjska, waste_managed.gorenjska, municipal_waste_collected.gorenjska)
)

table

# create a function to easily creates tables for other regions
create_table <- function(region, municipality_region, df = processed_sheets) {
  waste_pre_stored <- list_of_waste_pre_stored(region, df[[1]])$total_waste
  waste_collected <- list_of_waste_collected(region, df[[2]])$total_waste
  
  collection_by_origin <- df[[4]] 
  
  municipal_waste_collected <- list_of_waste_by_municipality(municipality_region, collection_by_origin) |> 
    select(waste_by_municipality) |>
    summarise(total_waste = sum(waste_by_municipality, na.rm = TRUE))
  municipal_waste_collected <- municipal_waste_collected$total_waste
  waste_managed <- list_of_waste_managed(region, df[[5]])$total_waste
  
  table <- tibble(
    type = c("waste_pre_stored", "waste_collected", "waste_managed", "municipal_waste_collected"),
    !!region := c(waste_pre_stored, waste_collected, waste_managed, municipal_waste_collected)
  )
  
  return(table)
}

create_table("GORENJSKA", GORENJSKA, processed_sheets)
create_table("POMURSKA", POMURSKA, processed_sheets)
create_table("KOROŠKA", KOROŠKA, processed_sheets)
create_table("OBALNO-KRAŠKA", OBALNOKRAŠKA, processed_sheets)
create_table("SAVINJSKA", SAVINJSKA, processed_sheets)
create_table("JUGOVZHODNA SLOVENIJA", JUGOVZHODNA.SLOVENIJA, processed_sheets)
create_table("OSREDNJESLOVENSKA", OSREDNJESLOVENSKA, processed_sheets)
create_table("GORIŠKA", GORIŠKA, processed_sheets)
create_table("PODRAVSKA", PODRAVSKA, processed_sheets)
create_table("POSAVSKA", POSAVSKA, processed_sheets)
create_table("PRIMORSKO-NOTRANJSKA", PRIMORSKONOTRANJSKA, processed_sheets)
create_table("ZASAVSKA", ZASAVSKA, processed_sheets)

summary_gorenjska <- create_table("GORENJSKA", GORENJSKA, processed_sheets)

ggplot(summary_gorenjska, aes(x = type, y = GORENJSKA)) +
  geom_bar(stat = "identity") +
  labs(title = "Summary of Waste Management in Gorenjska", x = "Type of Waste", y = "Total Waste (kg)")


# Sheet 6: Household composting, 2021
processed_sheets[[6]] 

## Rename the columns of the sixth sheet
processed_sheets[[6]] <- processed_sheets[[6]] |> 
  select(-`Šifra občine 1`, -Poročilo) |> 
  rename(year = `Leto`,
         name_of_municipality = `Naziv občine`,
         number_of_households = `Število gospodinjstev na občino 2`,
         number_of_households_composting = `Število gospodinjstev na občino, ki hišno kompostirajo`)

processed_sheets[[6]] <- processed_sheets[[6]] |> 
  left_join(municipality_region_mapping, by = "name_of_municipality")

# household composting is based on municipalities, not regions
# we need to filter by municipality name
# check if the name of the municipality is stored in one of the regions
processed_sheets[[6]] |> group_by(statistical_region) |> summarise(n = n())

# configure sheet names
sheet_names <- c(
  "Waste storage",
  "Waste received",
  "Waste source of generation",
  "Waste municipality of origin",
  "Municipal waste management",
  "Household composting"
)

# add the new names
names(processed_sheets) <- sheet_names


# For each sheet in processed_sheets, write the data to a .csv file
for (sheet_name in sheet_names) {
  write_excel_csv(processed_sheets[[sheet_name]], paste0("2021 data\\2021 filtered\\collection\\", tolower(gsub(" ", "_", sheet_name)), "_21.csv"))
}

# export to .xlsx
# write.xlsx(processed_sheets, "2021 data\\2021 filtered\\collection_21.xlsx")

```

## 2021 - Waste Treatment Operators

Contains 9 sheets (translated to English):

-   Sheet 1: Waste storage

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Statistical region"\
        \[4\] "Waste number"\
        \[5\] "Waste name"\
        \[6\] "Waste grave candles (yes/no)"\
        \[7\] "Waste in storage on 1.1.2021 (kg)"\
        \[8\] "Waste in storage on 31.12.2021 (kg)"\
        \[9\] 'Stored on 31.12.2021, scheduled for operation (R,D)'

-   Sheet 2: Waste received

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Statistical region"\
        \[4\] "Waste number"\
        \[5\] "Waste name"\
        \[6\] "Waste tombstone candles (yes/no)"\
        \[7\] "Waste received, own waste (kg)"\
        \[8\] "Waste received, from other original producers in the RS (kg)" \[9\] "Waste collected, from waste collectors in RS (kg)"\
        \[10\] "Waste received from treatment operators in RS (kg)"\
        \[11\] "Waste received from other EU Member States (kg)"\
        \[12\] "Waste received, from non-EU countries (kg)"\
        \[13\] "Waste received, TOTAL (kg)"\
        \[14\] "Treatment operation (R, D)"

-   Sheet 3: Treatment of waste received

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Statistical region"\
        \[4\] "Waste number"\
        \[5\] "Waste name"\
        \[6\] "Waste grave candles (yes/no)"\
        \[7\] 'Waste entering the treatment process (kg)' 'Treatment process (R, D)'

-   Sheet 4: Management of waste from treatment operations and untreated waste

    -   \[1\] "Summer"\
        \[2\] "Report"\
        \[3\] "Statistical region"\
        \[4\] "Waste incoming and waste received untreated number"\
        \[5\] "Waste incoming and accepted untreated waste name"\
        \[6\] "Waste leaving treatment and delivered untreated waste number" \[7\] "Waste exiting treatment and delivered untreated waste name"\
        \[8\] "Waste tombstone candles (yes/no)"\
        \[9\] "Waste delivered to SI waste collector for further management (kg)"\
        \[10\] 'Waste sent for further treatment to a treatment operator in SI (kg)'\
        \[11\] 'Waste sent for further management to other EU Member States (kg)'\
        \[12\] "Waste sent for further management to non-EU countries (kg)"

-   Sheet 4a: Management of treatment products that are no longer waste

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Waste to incoming treatment number"\
        \[4\] "Waste to incoming treatment name"\
        \[5\] "Treated substance or object that has lost its waste status at the exit of the treatment operation"\
        \[6\] "Delivered to storage or to other persons in the RS in kg"\
        \[7\] "Shipped to other EU Member States in kg"\
        \[8\] "Shipped to non-EU countries in kg"

-   Sheet 5: Municipal waste received for treatment, separated by municipality of origin

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Waste number"\
        \[4\] "Waste name"\
        \[5\] "Waste grave candles (yes/no)"\
        \[6\] "Waste collected by municipality of origin (kg)"\
        \[7\] "Commune code"\
        \[8\] "Name of municipality"

-   Sheet 6: Mass difference between waste input and treatment product volumes due to mass change during the treatment process

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Waste at treatment input number"\
        \[4\] "Waste at treatment input name"\
        \[5\] "Waste tombstone candles (yes/no)"\
        \[6\] 'Mass reduction or increase during the treatment process (kg)'

-   Sheet 7: Landfill capacity and status (for inert, hazardous and non-hazardous waste, including municipal waste)

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Landfill site"\
        \[4\] "Volume filled in the disposal field at the beginning of the year (in m\^3)"\
        \[5\] "Filled area on the disposal site at the beginning of the year (in m\^2)"\
        \[6\] "Volume of free capacity of the disposal site at the end of the year (in m\^3)"\
        \[7\] "Area of free capacity of the disposal site at the end of the year (in m\^2)"\
        \[8\] "Total disposal capacity (t)"\
        \[9\] "Remaining capacity on 1.1. (in t)"\
        \[10\] 'Remaining capacity on 31.12. (in t)'\
        \[11\] "Date of commencement of disposal"\
        \[12\] "Date of end of disposal"

-   Sheet 8: Landfill waste management

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Waste number"\
        \[4\] "Waste name"\
        \[5\] 'Waste received, all waste (kg)'\
        \[6\] "Waste received, of which waste without waste assessment (kg)"\
        \[7\] 'Landfill waste management, Disposed waste (D1), total (kg)'\
        \[8\] "Landfill waste management, Disposed waste (D1), hazardous waste (kg)"\
        \[9\] 'Landfill waste management, Disposed waste (D1), non-hazardous waste (kg)'\
        \[10\] "Landfill waste management, Disposed waste (D1), Inert waste (kg)"\
        \[11\] "Landfill waste management, Waste for construction of landfill facilities (kg)"\
        \[12\] "Landfill waste management, Waste for landfill cover (kg)"\
        \[13\] "Landfill waste management, Waste rejected (kg)"

-   Sheet 9: Municipal waste disposed by municipality of origin

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Waste number"\
        \[4\] "Waste name"\
        \[5\] "Waste disposed of by municipality of origin (kg)" \[6\] "Municipality code"\
        \[7\] "Name of municipality"

```{r waste_treatment_2021}

# how waste is used

# reports of waste treatment operators (ODP-Treatment) - poročil izvajalcev obdelave odpadkov
# wto2021 - waste treatment operators

# Specify the path to the Excel file
treatment_21.path <- "2021 data\\podatki LP ODP-obdelava 2021.xlsx"

# Get the sheet names
sheet_names <- excel_sheets(treatment_21.path)

# Initialize a list to store processed sheets
processed_sheets <- list()

# Define the sheets where n_max should be 3 (replace with actual sheet indices)
# if needed
sheets_with_n_max_3 <- c(2, 4, 5, 7)

sheets_with_n_max_4 <- 9

# Loop through each sheet
for (sheet_name in sheet_names) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else if (sheet_index == sheets_with_n_max_4) 4 else 2
  processed_sheet <- process_sheet(treatment_21.path, sheet_index, n_max)
  # print(sheet_name)
  # print(n_max)
  processed_sheets[[sheet_name]] <- processed_sheet
}

# Applying the function to each data frame in processed_sheets
processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

# define new sheet names
new_sheet_names <- c(
  "Waste storage", 
  "Waste received", 
  "Treatment of waste received", 
  "Management of waste from treatment operations and untreated waste", 
  "Management of treatment products that are no longer waste", 
  "Municipal waste received for treatment, separated by municipality of origin", 
  "Mass difference between waste input and treatment product volumes due to mass change during the treatment process", 
  "Landfill capacity and status (for inert, hazardous and non-hazardous waste, including municipal waste)", 
  "Landfill waste management", 
  "Municipal waste disposed by municipality of origin")

# add new sheeet names
# names(processed_sheets) <- new_sheet_names

# using openxlsx, export the list of sheets processed_sheets to one individual csv
# write.xlsx(processed_sheets, "2021 data\\2021 filtered\\treatment_21.xlsx")

# Sheet 1: Waste storage
waste_storage.21 <- processed_sheets[[1]]

## Rename
colnames(waste_storage.21)

waste_storage.21 <- waste_storage.21 |> 
  select(-Poročilo, -`Odpadne nagrobne sveče (da/ne)`) |> 
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    waste_code = `waste_code`,
    type_of_waste = `Naziv odpadka`,
    waste_stored_start_year = `Skladiščeni odpadki na dan 1.1.2021 kg`,
    waste_stored_end_year = `Skladiščeni odpadki na dan 31.12.2021 kg`,
    scheduled_for_treatment_end_year = `Skladiščeno na 31.12.2021, predvideno za postopek (R,D)`
  )

waste_storage.21 <- rename_waste_names(waste_storage.21)

# if NA, then "Not Specified" for the scheduled_for_treatment_end_year column
waste_storage.21$scheduled_for_treatment_end_year[is.na(waste_storage.21$scheduled_for_treatment_end_year)] <- "Not Specified"

processed_sheets[[1]] <- waste_storage.21


# Sheet 2: Waste received
waste_received.21 <- processed_sheets[[2]] 

## Rename
colnames(waste_received.21)

waste_received.21 <- waste_received.21 |> 
  select(-Poročilo, -`Odpadne nagrobne sveče (da/ne)`) |> 
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    type_of_waste = `Naziv odpadka`,
    waste_received_own_waste = `Prevzeti odpadki lastni odpadki kg`,
    waste_received_from_producers_RS = `Prevzeti odpadki od drugih izvirnih povzročiteljev v RS kg`,
    waste_received_from_collectors_RS = `Prevzeti odpadki od zbiralcev odpadkov v RS kg`,
    waste_received_from_processors_RS = `Prevzeti odpadki od izvajalcev obdelave v RS kg`,
    waste_received_from_EU = `Prevzeti odpadki iz drugih držav članic EU kg`,
    waste_received_from_non_EU = `Prevzeti odpadki iz držav izven EU kg`,
    total_waste_received = `Prevzeti odpadki SKUPAJ kg`,
    treatment_operation = `Postopek obdelave (R, D)`
  )

waste_received.21 <- rename_waste_names(waste_received.21)

processed_sheets[[2]] <- waste_received.21

# Sheet 3: Treatment of waste received
treating_waste.21 <- processed_sheets[[3]]

## Rename
colnames(treating_waste.21)

treating_waste.21 <- treating_waste.21 |> 
  select(-Poročilo, -`Odpadne nagrobne sveče (da/ne)`) |> 
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    type_of_waste = `Naziv odpadka`,
    waste_entering_treatment_process = `Odpadki, ki vstopajo v postopek obdelave (kg)`,
    treatment_process = `Postopek obdelave (R, D)`
  )

treating_waste.21 <- rename_waste_names(treating_waste.21)

processed_sheets[[3]] <- treating_waste.21

# Sheet 4: Management of waste from treatment operations and untreated waste
management_waste.21 <- processed_sheets[[4]] 

## Rename
colnames(management_waste.21)

management_waste.21 <- management_waste.21 |> 
  select(-Poročilo, -`Odpadne nagrobne sveče (da/ne)`) |> 
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    input_waste_name = `Odpadki na vhodu v obdelavo in prevzeti neobdelani odpadki naziv`,
    output_waste_name = `Odpadki na izhodu iz postopka obdelave in oddani neobdelani odpadki naziv`,
    waste_handed_to_collectors_RS = `Odpadki, oddani v nadaljnje ravnanje zbiralcu odpadkov v SI kg`,
    waste_delivered_to_operators_RS = `Odpadki, oddani v nadaljnje ravnanje izvajalcu obdelave v SI kg`,
    waste_sent_to_EU = `Odpadki, oddani v nadaljnje ravnanje v druge države članice EU kg`,
    waste_sent_to_non_EU = `Odpadki, oddani v nadaljnje ravnanje v države izven EU kg`
  )

management_waste.21 <- rename_waste_names(management_waste.21, "input_waste_name")

management_waste.21 <- rename_waste_names(management_waste.21, "output_waste_name")

processed_sheets[[4]] <- management_waste.21

# Sheet 4a: Management of treatment products that are no longer waste
management_waste.21a <- processed_sheets[[5]]

## Rename
colnames(management_waste.21a)

management_waste.21a <- management_waste.21a |> 
  select(-Poročilo) |> 
  rename(
    year = `Leto`,
    input_waste_name = `Odpadki na vhodu v obdelavo naziv`,
    output_waste_name = `Predelana snov ali predmet, ki je izgubil status odpadka, na izhodu iz postopka obdelave`,
    delivered_to_storage_or_other_persons_RS = `Oddano v skladišče ali drugim osebam v RS kg`,
    shipped_to_EU = `Oddano v druge države članice EU kg`,
    shipped_to_non_EU = `Oddano v države izven EU kg`
  )

management_waste.21a <- rename_waste_names(management_waste.21a, "input_waste_name")

management_waste.21a$output_waste_name <- case_when(
  management_waste.21a$output_waste_name == "kompost" ~ "compost",
  management_waste.21a$output_waste_name == "les" ~ "wood",
  management_waste.21a$output_waste_name == "papir in karton" ~ "paper and cardboard",
  management_waste.21a$output_waste_name == "tekstil in usnje" ~ "textiles and leather",
  management_waste.21a$output_waste_name == "drugo" ~ "other",
  management_waste.21a$output_waste_name == "kovine železo in jeklo" ~ "iron and steel metals"
)

processed_sheets[[5]] <- management_waste.21a

# Sheet 5: Municipal waste received for treatment, separated by municipality of origin
waste_treatment.21 <- processed_sheets[[6]]

## Rename
colnames(waste_treatment.21)


waste_treatment.21 <- waste_treatment.21 |> 
  select(-Poročilo, -`Odpadne nagrobne sveče (da/ne)`, -`Šifra občine 1`) |> 
  rename(
    year = `Leto`,
    waste_code = `waste_code`,
    type_of_waste = `Naziv odpadka`,
    waste_collected_by_municipality = `Prevzeti odpadki glede na občino izvora (kg)`,
    name_of_municipality = `Naziv občine`
  )

waste_treatment.21 <- rename_waste_names(waste_treatment.21)

waste_treatment.21 <- waste_treatment.21 |> 
  left_join(municipality_region_mapping, by = "name_of_municipality")

processed_sheets[[6]] <- waste_treatment.21

# Sheet 6: Mass difference between waste input and treatment product volumes due to mass change during the treatment process
mass_difference.21 <- processed_sheets[[7]]

## Rename
colnames(mass_difference.21)

mass_difference.21 <- mass_difference.21 |> 
  select(-Poročilo, -`Odpadne nagrobne sveče (da/ne)`) |> 
  rename(
    year = `Leto`,
    input_waste_name = `Odpadek na vhodu v postopek obdelave naziv`,
    mass_change = `Zmanjšanje ali povečanje mase med postopkom obdelave (kg)`
  )

mass_difference.21 <- rename_waste_names(mass_difference.21, "input_waste_name")

processed_sheets[[7]] <- mass_difference.21

# Sheet 7: Landfill capacity and status (for inert, hazardous and non-hazardous waste, including municipal waste)
landfill_capacity.21 <- processed_sheets[[8]]

## Rename
colnames(landfill_capacity.21)

landfill_capacity.21 <- landfill_capacity.21 |> 
  select(-Poročilo) |> 
  rename(
    year = `Leto`,
    landfill_site = `Odlagališče`,
    volume_filled_start_year = `Zapolnjen volumen na odlagalnem polju na začetku leta m3`,
    area_filled_start_year = `Zapolnjena površina na odlagalnem polju na začetku leta m2`,
    volume_free_end_year = `Volumen proste kapacitete odlagalnega polja na koncu leta m3`,
    area_free_end_year = `Površina proste kapacitete odlagalnega polja na koncu leta m2`,
    total_disposal_capacity = `Celotna zmogljivost odlaganja t`,
    remaining_capacity_start_year = `Preostala zmogljivost na dan 1.1. t`,
    remaining_capacity_end_year = `Preostala zmogljivost na dan 31.12. t`,
    start_date_disposal = `Datum začetka odlaganja`,
    end_date_disposal = `Datum konca odlaganja`
  )

landfill_capacity.21 <- landfill_capacity.21 |> 
  mutate(landfill_site = case_when(
    landfill_site == "Odlagališče 1" ~ "Landfill 1",
    landfill_site == "Odlagališče 2" ~ "Landfill 2",
    landfill_site == "Odlagališče 3" ~ "Landfill 3",
    landfill_site == "Odlagališče 4" ~ "Landfill 4",
    landfill_site == "Odlagališče 5" ~ "Landfill 5",
    landfill_site == "Odlagališče 6" ~ "Landfill 6",
    landfill_site == "Odlagališče 7" ~ "Landfill 7",
    landfill_site == "Odlagališče 8" ~ "Landfill 8",
    landfill_site == "Odlagališče 9" ~ "Landfill 9",
    landfill_site == "Odlagališče 10a" ~ "Landfill 10a",
    landfill_site == "Odlagališče 10b" ~ "Landfill 10b",
    landfill_site == "Odlagališče 11" ~ "Landfill 11",
    landfill_site == "Odlagališče 12" ~ "Landfill 12",
    landfill_site == "Odlagališče 13" ~ "Landfill 13",
    landfill_site == "Odlagališče 14" ~ "Landfill 14",
    landfill_site == "Odlagališče 15" ~ "Landfill 15",
    landfill_site == "Odlagališče 16" ~ "Landfill 16"
  ))

processed_sheets[[8]] <- landfill_capacity.21

# Sheet 8: Landfill waste management
landfill_waste.21 <- processed_sheets[[9]]

## Rename
colnames(landfill_waste.21)

landfill_waste.21 <- landfill_waste.21 |> 
  select(-Poročilo) |> 
  rename(
    year = `Leto`,
    type_of_waste = `Naziv odpadka`,
    total_waste_received = `Prevzeti odpadki vsi odpadki kg`,
    waste_without_assessment = `Prevzeti odpadki od tega odpadki brez ocene odpadka kg`,
    disposed_waste_total = `Ravnanje z odpadki na odlagališču Odloženi odpadki (D1) skupaj kg`,
    disposed_waste_hazardous = `Ravnanje z odpadki na odlagališču nevarni odpadki kg`,
    disposed_waste_non_hazardous = `Ravnanje z odpadki na odlagališču nenevarni odpadki kg`,
    disposed_waste_inert = `Ravnanje z odpadki na odlagališču inertni odpadki kg`,
    disposed_waste_for_construction = `Ravnanje z odpadki na odlagališču Odpadki za gradnjo objektov odlagališča kg`,
    disposed_waste_for_covering = `Ravnanje z odpadki na odlagališču Odpadki za prekrivanje odlagališča kg`
  )

landfill_waste.21 <- rename_waste_names(landfill_waste.21)

processed_sheets[[9]] <- landfill_waste.21

# Sheet 9: Municipal waste disposed by municipality of origin - EXCLUDED
municipal_waste_disposed.21 <- processed_sheets[[10]]

## Rename
colnmaes(municiapl_waste_disposed.21)

sheet_names <- c(
  "Waste storage", 
  "Waste received", 
  "Treatment of waste received", 
  "Management of waste from treatment operations and untreated waste", 
  "Management of treatment products that are no longer waste", 
  "Municipal waste received for treatment, separated by municipality of origin", 
  "Mass difference between waste input and treatment product volumes due to mass change during the treatment process", 
  "Landfill capacity and status (for inert, hazardous and non-hazardous waste, including municipal waste)", 
  "Landfill waste management"
)

names(processed_sheets) <- sheet_names

for (sheet_name in sheet_names) {
  write_excel_csv(processed_sheets[[sheet_name]], paste0("2021 data\\2021 filtered\\treatment\\", tolower(gsub(" ", "_", sheet_name)), "_21.csv"))
}

```

# Year 2020

## 2020 - Data from the annual reports of the original emitters

```{r waste_generation_2020}

# Specify the path to the Excel file
waste_generation_20.path <- "2020 data\\podatki LP ODP-nastajanje 2020.xlsx"

# Get the sheet names
sheet_names <- excel_sheets(waste_generation_20.path)

# Initialize a list to store processed sheets
processed_sheets <- list()

# Define the sheets where n_max should be 3 (replace with actual sheet indices)
# if needed
sheets_with_n_max_3 <- c(2, 3, 5)

# Loop through each sheet
for (sheet_name in sheet_names) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else 2
  processed_sheet <- process_sheet(waste_generation_20.path, sheet_index, n_max)
  processed_sheets[[sheet_name]] <- processed_sheet
}

# Applying the function to each data frame in processed_sheets
processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

generation.20 <- processed_sheets[[1]]

## Rename
colnames(generation.20)

generation.20 <- generation.20 |> 
  select(-Poročilo) |> 
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija kraja nastanka odpadkov`,
    waste_code = `waste_code`,
    type_of_waste = `Naziv odpadka`,
    total_waste_generated = `Odpadki skupaj: nastalo in skladiščeno kg`,
    temporary_stored_start_year = `Začasno skladiščeni odpadki na dan 1.1.2020 kg`,
    waste_generated_2020 = `Odpadki nastali v letu 2020 kg`,
    temporary_stored_end_year = `Začasno skladiščeni odpadki na dan 31.12.2020 kg`,
    waste_treated_by_producer = `Odpadki, ki jih je izvirni povzročitelj obdelal sam kg`,
    waste_handed_to_others_RS = `Odpadki oddani v nadaljnje ravnanje drugim osebam v RS kg`,
    waste_sent_to_EU = `Odpadki poslani v obdelavo v druge države članice EU kg`,
    waste_sent_to_non_EU = `Odpadki poslani v obdelavo v države izven EU kg`
  )

generation.20 <- rename_waste_names(generation.20)

processed_sheets[[1]] <- generation.20

# to csv
write_excel_csv(processed_sheets[[1]], "2020 data\\2020 filtered\\generation\\generation_20.csv")

```

## 2020 - Data from waste collectors' annual reports

```{r waste_collection_2020}

# Specify the path to the Excel file
collection_20.path <- "2020 data\\podatki LP ODP-zbiranje 2020.xlsx"

# Get the sheet names
sheet_names <- excel_sheets(collection_20.path)

# Initialize a list to store processed sheets
processed_sheets <- list()

# Define the sheets where n_max should be 3 (replace with actual sheet indices)
sheets_with_n_max_3 <- c(2, 3, 5)

# Loop through each sheet
for (sheet_name in sheet_names) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else 2
  processed_sheet <- process_sheet(collection_20.path, sheet_index, n_max)
  processed_sheets[[sheet_name]] <- processed_sheet
}

# Applying the function to each data frame in processed_sheets
processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

# Table 1: Preliminary storage of waste in 2020
waste_storage.20 <- processed_sheets[[1]]

## Rename
colnames(waste_storage.20)

waste_storage.20 <- waste_storage.20 |> 
  select(-Poročilo) |> 
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    waste_code = `waste_code`,
    type_of_waste = `Naziv odpadka`,
    waste_stored_start_year = `Predhodno skladiščeni odpadki na dan 1.1.2020 kg`,
    waste_stored_end_year = `Predhodno skladiščeni odpadki na dan 31.12.2020 kg`
  )

waste_storage.20 <- rename_waste_names(waste_storage.20)


processed_sheets[[1]] <- waste_storage.20

# Table 2: Collected waste in 2020
collected_waste.20 <- processed_sheets[[2]]

## Rename
colnames(collected_waste.20)

collected_waste.20 <- collected_waste.20 |> 
  select(-Poročilo) |> 
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    waste_code = `waste_code`,
    type_of_waste = `Naziv odpadka`,
    waste_received_from_producers_no_list = `Zbrani odpadki, prevzeti od izvirnih povzročiteljev brez evidenčnega lista (prepuščeni) kg`,
    waste_received_from_producers_with_list = `Zbrani odpadki, prevzeti od izvirnih povzročiteljev z evidenčnim listom (oddani) kg`,
    waste_received_from_collectors_RS = `Zbrani odpadki prevzeti od drugih imetnikov od zbiralcev v RS kg`,
    waste_received_from_processors_RS = `Zbrani odpadki prevzeti od drugih imetnikov od izvajalcev obdelave v RS kg`
  )

collected_waste.20 <- rename_waste_names(collected_waste.20)

processed_sheets[[2]] <- collected_waste.20

# Table 3: Collected municipal waste in 2020 by source of origin
municipal_waste.20 <- processed_sheets[[3]]

## Rename
colnames(municipal_waste.20)

municipal_waste.20 <- municipal_waste.20 |> 
  select(-Poročilo) |> 
  rename(
    year = `Leto`,
    waste_code = `waste_code`,
    type_of_waste = `Naziv odpadka`,
    total_municipal_waste_collected = `Zbrani komunalni odpadki skupaj kg`,
    municipal_waste_collected_from_households = `Zbrani komunalni odpadki glede na vir nastanka iz gospodinjstev kg`,
    municipal_waste_collected_from_activities = `Zbrani komunalni odpadki glede na vir nastanka iz dejavnosti kg`
  )

municipal_waste.20 <- rename_waste_names(municipal_waste.20)

processed_sheets[[3]] <- municipal_waste.20

# Table 4: Collected municipal waste in 2020 by municipality of origin
municipal_waste_origin.20 <- processed_sheets[[4]]

## Rename
colnames(municipal_waste_origin.20)

municipal_waste_origin.20 <- municipal_waste_origin.20 |> 
  select(-Poročilo, -`Šifra občine 1`) |> 
  rename(
    year = `Leto`,
    waste_code = `waste_code`,
    type_of_waste = `Naziv odpadka`,
    municipal_waste_collected_by_municipality = `Komunalni odpadki po občini izvora kg`,
    name_of_municipality = `Naziv občine`
  )

municipal_waste_origin.20 <- rename_waste_names(municipal_waste_origin.20)

municipal_waste_origin.20 <- municipal_waste_origin.20 |> 
  left_join(municipality_region_mapping, by = "name_of_municipality")

processed_sheets[[4]] <- municipal_waste_origin.20

# Table 5: Management of collected waste in 2020
management_collected_waste.20 <- processed_sheets[[5]]

## Rename
colnames(management_collected_waste.20)

management_collected_waste.20 <- management_collected_waste.20 |> 
  select(-Poročilo) |> 
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    waste_code = `waste_code`,
    type_of_waste = `Naziv odpadka`,
    waste_handed_to_collectors_RS = `Odpadki oddani v nadaljnje ravnanje zbiralcem v RS kg`,
    waste_delivered_to_operators_RS = `Odpadki oddani v nadaljnje ravnanje izvajalcem obdelave v RS kg`,
    waste_sent_to_EU = `Odpadki oddani v nadaljnje ravnanje v druge države članice EU kg`,
    waste_sent_to_non_EU = `Odpadki oddani v nadaljnje ravnanje v države izven EU kg`
  )

management_collected_waste.20 <- rename_waste_names(management_collected_waste.20)

processed_sheets[[5]] <- management_collected_waste.20

# Table 6: Home composting in 2020
home_composting.20 <- processed_sheets[[6]]

## Rename
colnames(home_composting.20)

home_composting.20 <- home_composting.20 |> 
  select(-`Poročilo ODP-zbiranje`, -`Šifra občine 1 1`) |> 
  rename(
    year = `Leto 2020`,
    name_of_municipality = `Naziv občine AJDOVŠČINA`,
    total_households = `Število gospodinjstev na občino 2 7035`,
    households_composting = `Število gospodinjstev na občino, ki hišno kompostirajo 1740`
  )

home_composting.20 <- home_composting.20 |> 
  left_join(municipality_region_mapping, by = "name_of_municipality")

processed_sheets[[6]] <- home_composting.20

sheet_names <- c(
  "Waste storage", 
  "Waste received", 
  "Municipal waste received for treatment, separated by municipality of origin", 
  "Management of collected waste", 
  "Home composting"
)

names(processed_sheets) <- sheet_names

for (sheet_name in sheet_names) {
  write_excel_csv(processed_sheets[[sheet_name]], paste0("2020 data\\2020 filtered\\collection\\", tolower(gsub(" ", "_", sheet_name)), "_20.csv"))
}

```

## 2020 - Data from annual reports of waste treatment operators

```{r waste_treatment_2020}

# Specify the path to the Excel file
treatment_20.path <- "2020 data\\podatki LP ODP-obdelava 2020.xlsx"

# Get the sheet names
sheet_names <- excel_sheets(treatment_20.path)

# Initialize a list to store processed sheets
processed_sheets <- list()

# Define the sheets where n_max should be 3 (replace with actual sheet indices)
sheets_with_n_max_3 <- c(2, 4, 5, 9)

# Loop through each sheet
for (sheet_name in sheet_names) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else 2
  processed_sheet <- process_sheet(treatment_20.path, sheet_index, n_max)
  processed_sheets[[sheet_name]] <- processed_sheet
}

# Applying the function to each data frame in processed_sheets
processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

# Table 1: Waste storage in 2020
waste_storage.20 <- processed_sheets[[1]]

## Rename
colnames(waste_storage.20)

waste_storage.20 <- waste_storage.20 |> 
  select(-Poročilo) |> 
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    type_of_waste = `Naziv odpadka`,
    waste_stored_start_year = `Skladiščeni odpadki na dan 1.1.2020 kg`,
    waste_stored_end_year = `Skladiščeni odpadki na dan 31.12.2020 kg`
  )

waste_storage.20 <- rename_waste_names(waste_storage.20)

processed_sheets[[1]] <- waste_storage.20

# Table 2: Waste received in 2020
waste_received.20 <- processed_sheets[[2]]

## Rename
colnames(waste_received.20)

waste_received.20 <- waste_received.20 |> 
  select(-Poročilo) |> 
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    type_of_waste = `Naziv odpadka`,
    waste_received_own_waste = `Prevzeti odpadki lastni odpadki kg`,
    waste_received_from_producers_RS = `Prevzeti odpadki od drugih izvirnih povzročiteljev v RS kg`,
    waste_received_from_collectors_RS = `Prevzeti odpadki od zbiralcev odpadkov v RS kg`,
    waste_received_from_processors_RS = `Prevzeti odpadki od izvajalcev obdelave v RS kg`,
    waste_received_from_EU = `Prevzeti odpadki iz drugih držav članic EU kg`,
    waste_received_from_non_EU = `Prevzeti odpadki iz držav izven EU kg`,
    total_waste_received = `Prevzeti odpadki SKUPAJ kg`,
    treatment_operation = `Postopek obdelave (R, D)`
  )

waste_received.20 <- rename_waste_names(waste_received.20)

# Table 3: Treatment of waste received in 2020
treating_waste.20 <- processed_sheets[[3]]

## Rename
colnames(treating_waste.20) 

treating_waste.20 <- treating_waste.20 |> 
  select(-Poročilo) |> 
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    type_of_waste = `Naziv odpadka`,
    waste_entering_treatment_process = `Odpadki, ki vstopajo v postopek obdelave (kg)`,
    treatment_process = `Postopek obdelave (R, D)`
  )

treating_waste.20 <- rename_waste_names(treating_waste.20)

processed_sheets[[3]] <- treating_waste.20

# Table 4: Waste at the exit of the treatment process and untreated waste delivered for further management in 2020
management_waste.20 <- processed_sheets[[4]]

## Rename
colnames(management_waste.20)

management_waste.20 <- management_waste.20 |> 
  select(-Poročilo) |> 
  rename(
    year = `Leto`,
    input_waste_name = `Odpadki na vhodu v obdelavo in prevzeti neobdelani odpadki naziv`,
    output_waste_name = `Odpadki na izhodu iz postopka obdelave in oddani neobdelani odpadki naziv`,
    waste_handed_to_collectors_RS = `Odpadki, oddani v nadaljnje ravnanje zbiralcu odpadkov v SI kg`,
    waste_delivered_to_operators_RS = `Odpadki, oddani v nadaljnje ravnanje izvajalcu obdelave v SI kg`,
    waste_sent_to_EU = `Odpadki, oddani v nadaljnje ravnanje v druge države članice EU kg`,
    waste_sent_to_non_EU = `Odpadki, oddani v nadaljnje ravnanje v države izven EU kg`
  )

management_waste.20 <- rename_waste_names(management_waste.20, "input_waste_name")

management_waste.20 <- rename_waste_names(management_waste.20, "output_waste_name")

processed_sheets[[4]] <- management_waste.20

# Table 4a: Recovered substances or objects that lost their waste status and were delivered for further use in 2020
management_waste.20a <- processed_sheets[[5]]

## Rename
colnames(management_waste.20a)

management_waste.20a <- management_waste.20a |> 
  select(-Poročilo) |> 
  rename(
    year = `Leto`,
    input_waste_name = `Odpadki na vhodu v obdelavo naziv`,
    output_waste_name = `Predelana snov ali predmet, ki je izgubil status odpadka, na izhodu iz postopka obdelave`,
    delivered_to_storage_or_other_persons_RS = `Oddano v skladišče ali drugim osebam v RS kg`,
    shipped_to_EU = `Oddano v druge države članice EU kg`,
    shipped_to_non_EU = `Oddano v države izven EU kg`
  )

management_waste.20a <- rename_waste_names(management_waste.20a, "input_waste_name")

management_waste.20a$output_waste_name <- case_when(
  management_waste.20a$output_waste_name == "les" ~ "wood",
  management_waste.20a$output_waste_name == "drugo" ~ "other"
)

processed_sheets[[5]] <- management_waste.20a

# Table 5: Municipal waste received for treatment, separated by municipality of origin in 2020
waste_treatment.20 <- processed_sheets[[6]]

## Rename
colnames(waste_treatment.20)

waste_treatment.20 <- waste_treatment.20 |> 
  select(-Poročilo, -`Šifra občine 1`) |> 
  rename(
    year = `Leto`,
    waste_code = `waste_code`,
    type_of_waste = `Naziv odpadka`,
    waste_collected_by_municipality = `Prevzeti odpadki glede na občino izvora (kg)`,
    name_of_municipality = `Naziv občine`
  )

waste_treatment.20 <- rename_waste_names(waste_treatment.20)

waste_treatment.20 <- waste_treatment.20 |> 
  left_join(municipality_region_mapping, by = "name_of_municipality")

processed_sheets[[6]] <- waste_treatment.20

# Table 6: Mass difference between waste input and treatment product volumes due to mass change during the treatment process
mass_difference.20 <- processed_sheets[[7]]

## Rename
colnames(mass_difference.20)

mass_difference.20 <- mass_difference.20 |> 
  select(-Poročilo) |> 
  rename(
    year = `Leto`,
    input_waste_name = `NA naziv`,
    mass_change = `Zmanjšanje ali povečanje mase med postopkom obdelave`
  )

mass_difference.20 <- rename_waste_names(mass_difference.20, "input_waste_name")

processed_sheets[[7]] <- mass_difference.20

# Table 7: Capacity and status of landfills (for inert, hazardous, and non-hazardous waste, including municipal waste) in 2021
landfill_capacity.20 <- processed_sheets[[8]]

## Rename
colnames(landfill_capacity.20)

landfill_capacity.20 <- landfill_capacity.20 |> 
  select(-Poročilo) |> 
  rename(
    year = `Leto`,
    landfill_site = `Odlagališče`,
    volume_filled_start_year = `Zapolnjen volumen na odlagalnem polju na začetku leta m3`,
    area_filled_start_year = `Zapolnjena površina na odlagalnem polju na začetku leta m2`,
    volume_free_end_year = `Volumen proste kapacitete odlagalnega polja na koncu leta m3`,
    area_free_end_year = `Površina proste kapacitete odlagalnega polja na koncu leta m2`,
    total_disposal_capacity = `Celotna zmogljivost odlaganja t`,
    remaining_capacity_start_year = `Preostala zmogljivost na dan 1.1. t`,
    remaining_capacity_end_year = `Preostala zmogljivost na dan 31.12. t`,
    start_date_disposal = `Datum začetka odlaganja`,
    end_date_disposal = `Datum konca odlaganja`
  )

landfill_capacity.20 <- landfill_capacity.20 |>
  mutate(landfill_site = case_when(
    landfill_site == "Odlagališče 1" ~ "Landfill 1",
    landfill_site == "Odlagališče 2" ~ "Landfill 2",
    landfill_site == "Odlagališče 3" ~ "Landfill 3",
    landfill_site == "Odlagališče 4a" ~ "Landfill 4a",
    landfill_site == "Odlagališče 4b" ~ "Landfill 4b",
    landfill_site == "Odlagališče 5a" ~ "Landfill 5a",
    landfill_site == "Odlagališče 5b" ~ "Landfill 5b",
    landfill_site == "Odlagališče 6" ~ "Landfill 6",
    landfill_site == "Odlagališče 7" ~ "Landfill 7",
    landfill_site == "Odlagališče 8" ~ "Landfill 8",
    landfill_site == "Odlagališče 9" ~ "Landfill 9",
    landfill_site == "Odlagališče 10" ~ "Landfill 10",
    landfill_site == "Odlagališče 11" ~ "Landfill 11",
    landfill_site == "Odlagališče 12" ~ "Landfill 12",
    landfill_site == "Odlagališče 13" ~ "Landfill 13",
    landfill_site == "Odlagališče 14" ~ "Landfill 14",
    landfill_site == "Odlagališče 15" ~ "Landfill 15",
    landfill_site == "Odlagališče 16" ~ "Landfill 16"
  ))

processed_sheets[[8]] <- landfill_capacity.20

# Table 8: Waste management at landfills in 2020
landfill_waste.20 <- processed_sheets[[9]]

## Rename
colnames(landfill_waste.20)

landfill_waste.20 <- landfill_waste.20 |> 
  select(-Poročilo) |> 
  rename(
    year = `Leto`,
    type_of_waste = `Naziv odpadka`,
    total_waste_received = `Prevzeti odpadki vsi odpadki`,
    waste_without_assessment = `Prevzeti odpadki od tega odpadki brez ocene odpadka`,
    disposed_waste_total = `Ravnanje z odpadki na odlagališču Odloženi odpadki (D1) skupaj`,
    disposed_waste_hazardous = `Ravnanje z odpadki na odlagališču nevarni odpadki`,
    disposed_waste_non_hazardous = `Ravnanje z odpadki na odlagališču nenevarni odpadki`,
    disposed_waste_inert = `Ravnanje z odpadki na odlagališču inertni odpadki`,
    disposed_waste_for_construction = `Ravnanje z odpadki na odlagališču Odpadki za gradnjo objektov odlagališča`,
    disposed_waste_for_covering = `Ravnanje z odpadki na odlagališču Odpadki za prekrivanje odlagališča`
  )

landfill_waste.20 <- rename_waste_names(landfill_waste.20)

## Drop columns containing NA values
landfill_waste.20 <- select_if(landfill_waste.20, ~!all(is.na(.)))

# Table 9: Municipal waste disposed of by municipality of origin in 2020 - EXCLUDED
municipal_waste_disposed.20 <- processed_sheets[[10]]

sheet_names <- c(
  "Waste storage", 
  "Waste received", 
  "Treatment of waste received", 
  "Management of waste from treatment operations and untreated waste", 
  "Management of treatment products that are no longer waste", 
  "Municipal waste received for treatment, separated by municipality of origin", 
  "Mass difference between waste input and treatment product volumes due to mass change during the treatment process", 
  "Landfill capacity and status (for inert, hazardous and non-hazardous waste, including municipal waste)", 
  "Landfill waste management"
)

names(processed_sheets) <- sheet_names

for (sheet_name in sheet_names) {
  write_excel_csv(processed_sheets[[sheet_name]], paste0("2020 data\\2020 filtered\\treatment\\", tolower(gsub(" ", "_", sheet_name)), "_20.csv"))
}

```

# Year 2019

## 2019 - Data from the annual reports of the original emitters

```{r waste_generation}

# Specify the path to the Excel file
waste_generation_19.path <- "2019 data\\podatki LP ODP-nastajanje 2019.xlsx"

# Get the sheet names
sheet_names <- excel_sheets(waste_generation_19.path)

# Initialize a list to store processed sheets
processed_sheets <- list()

# Define the sheets where n_max should be 3 (replace with actual sheet indices)
# if needed
sheets_with_n_max_3 <- c(2, 3, 5)

# Loop through each sheet
for (sheet_name in sheet_names) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else 2
  processed_sheet <- process_sheet(waste_generation_19.path, sheet_index, n_max)
  processed_sheets[[sheet_name]] <- processed_sheet
}

# Applying the function to each data frame in processed_sheets
processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

generation.19 <- processed_sheets[[1]]

## Rename
colnames(generation.19)

generation.19 <- generation.19 |> 
  select(-Poročilo) |> 
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija kraja nastanka odpadkov`,
    waste_code = `waste_code`,
    type_of_waste = `Naziv odpadka`,
    total_waste_generated = `Odpadki skupaj: nastalo in skladiščeno kg`,
    temporary_stored_start_year = `Začasno skladiščeni odpadki na dan 1.1.2019 kg`,
    waste_generated_2019 = `Odpadki nastali v letu 2019 kg`,
    temporary_stored_end_year = `Začasno skladiščeni odpadki na dan 31.12.2019 kg`,
    waste_treated_by_producer = `Odpadki, ki jih je izvirni povzročitelj obdelal sam kg`,
    waste_handed_to_others_RS = `Odpadki oddani v nadaljnje ravnanje drugim osebam v RS kg`,
    waste_sent_to_EU = `Odpadki poslani v obdelavo v druge države članice EU kg`,
    waste_sent_to_non_EU = `Odpadki poslani v obdelavo v države izven EU kg`
  )

generation.19 <- rename_waste_names(generation.19)

processed_sheets[[1]] <- generation.19

# to csv
write_excel_csv(processed_sheets[[1]], "2019 data\\2019 filtered\\generation\\generation_19.csv")
```

## 2019 - Data from the annual reports on waste collection from manufacturing and service activities

```{r waste_collection_2019}
waste_collection_19.path <- "2019 data\\ODP_Z_2019_objava_21122020.xlsx"

waste_collection_19.sheet1 <- read_excel(waste_collection_19.path, skip = 2, sheet = 1)

waste_collection_19.by_codes1 <- waste_collection_19.sheet1 |>
  rename(waste_code = `ŠT. ODPADKA`) |> 
  filter(
    waste_code %in% codes  |
      grepl("^03 01 [0-9]", waste_code, perl = TRUE) &
      !grepl("03 01 04", waste_code, perl = TRUE)
    )

# change all NA to zero
waste_collection_19.by_codes1[is.na(waste_collection_19.by_codes1)] <- 0

waste_collection_19.by_codes1 |> 
  filter(`STATISTIČNA REGIJA` == "OBALNO-KRAŠKA") 
```

## 2019 - Data from the annual waste recovery/disposal reports

```{r waste_recovery}
waste_recovery_19.path <- "2019 data\\ODP_P_2019_objava_21122020.xlsx"
```

```{r waste_storage}
# WASTE STORAGE IN 2019

waste_recovery_19.sheet1 <- read_excel(waste_recovery_19.path, skip = 2, sheet = 1)

waste_recovery_19.by_codes1 <- waste_recovery_19.sheet1 |>
  rename(waste_code = `ŠT. ODPADKA`) |> 
  filter(
    waste_code %in% codes  |
      grepl("^03 01 [0-9]", waste_code, perl = TRUE) &
      !grepl("03 01 04", waste_code, perl = TRUE)
    )

# change all NA to zero
waste_recovery_19.by_codes1[is.na(waste_recovery_19.by_codes1)] <- 0
```

```{r waste_collected}
# WASTE COLLECTED IN 2019

waste_recovery_19.sheet2 <- read_excel(waste_recovery_19.path, skip = 2, sheet = 2)

waste_recovery_19.by_codes2 <- waste_recovery_19.sheet2 |>
  rename(waste_code = `ŠT. ODPADKA`) |> 
  filter(
    waste_code %in% codes  |
      grepl("^03 01 [0-9]", waste_code, perl = TRUE) &
      !grepl("03 01 04", waste_code, perl = TRUE)
    )

# change all NA to zero
waste_recovery_19.by_codes2[is.na(waste_recovery_19.by_codes2)] <- 0
```

```{r treatment_waste_received}
# TREATMENT OF WASTE RECEIVED IN 2019

waste_recovery_19.sheet3 <- read_excel(waste_recovery_19.path, skip = 2, sheet = 3)

waste_recovery_19.by_codes3 <- waste_recovery_19.sheet3 |>
  rename(waste_code = `ŠT. ODPADKA`) |> 
  filter(
    waste_code %in% codes  |
      grepl("^03 01 [0-9]", waste_code, perl = TRUE) &
      !grepl("03 01 04", waste_code, perl = TRUE)
    )

# change all NA to zero
waste_recovery_19.by_codes3[is.na(waste_recovery_19.by_codes3)] <- 0
```

```{r treatment_process_waste}
# WASTE GENERATED IN THE TREATMENT PROCESS AND 
# UNTREATED WASTE DELIVERED TO OTHERS IN 2019

waste_recovery_19.sheet4 <- read_excel(waste_recovery_19.path, skip = 2, sheet = 4)

waste_recovery_19.by_codes4 <- waste_recovery_19.sheet4 |>
  rename(waste_code = `ŠT. ODPADKA`) |> 
  filter(
    waste_code %in% codes  |
      grepl("^03 01 [0-9]", waste_code, perl = TRUE) &
      !grepl("03 01 04", waste_code, perl = TRUE)
    )
```

```{r municipal_waste_treatment}
# MUNICIPAL WASTE RECEIVED FOR TREATMENT, 
# SEPARATED BY MUNICIPALITY OF ORIGIN IN 2019

waste_recovery_19.sheet5 <- read_excel(waste_recovery_19.path, skip = 2, sheet = 5)

waste_recovery_19.by_codes5 <- waste_recovery_19.sheet5 |>
  rename(waste_code = `ŠT. ODPADKA`) |> 
  filter(
    waste_code %in% codes  |
      grepl("^03 01 [0-9]", waste_code, perl = TRUE) &
      !grepl("03 01 04", waste_code, perl = TRUE)
    )
```

```{r difference_waste_input_treatment_process}
# THE DIFFERENCE IN MASS BETWEEN THE WASTE INPUT AND 
# THE TREATMENT PRODUCT VOLUMES DUE TO LOSSES DURING 
# THE TREATMENT PROCESS IN 2019

waste_recovery_19.sheet6 <- read_excel(waste_recovery_19.path, skip = 2, sheet = 6)

waste_recovery_19.by_codes6 <- waste_recovery_19.sheet6 |>
  rename(waste_code = `ŠT. ODPADKA`) |> 
  filter(
    waste_code %in% codes  |
      grepl("^03 01 [0-9]", waste_code, perl = TRUE) &
      !grepl("03 01 04", waste_code, perl = TRUE)
    )
```

```{r landfill_capacity}
# LANDFILL CAPACITY AND STATUS IN 2019
waste_recovery_19.sheet7 <- read_excel(waste_recovery_19.path, skip = 2, sheet = 7)

# no codes to filter by
```

```{r waste_volumes_management_landfill}
# TOTAL WASTE VOLUMES AND MANAGEMENT IN LANDFILL IN 2019
waste_recovery_19.sheet8 <- read_excel(waste_recovery_19.path, skip = 2, sheet = 8)

waste_recovery_19.by_codes8 <- waste_recovery_19.sheet8 |>
  rename(waste_code = `ŠT. ODPADKA`) |> 
  filter(
    waste_code %in% codes  |
      grepl("^03 01 [0-9]", waste_code, perl = TRUE) &
      !grepl("03 01 04", waste_code, perl = TRUE)
    )
```

```{r municipal_waste_disposed}
# MUNICIPAL WASTE DISPOSED OF BY MUNICIPALITY IN 2019
waste_recovery_19.sheet9 <- read_excel(waste_recovery_19.path, skip = 2, sheet = 9)

# no code to filter by for wood
```

# Year 2018

## 2018 - Data from the annual reports received on waste generation in manufacturing and service activities

```{r waste_generation}
waste_generation_18.path <- "2018 data\\ODP_2018_objava21122020.xlsx"
region <- "ST. REGIJA                                           (1-POMURSKA,  2-PODRAVSKA,                                3-KOROŠKA,  4-SAVINJSKA,  5-ZASAVSKA,        6 -POSAVSKA,  7-JUGOVZHODNA SLOVENIJA,  8-OSREDNJESLOVENSKA, 9-GORENJSKA,      10-PRIMORSKO-NOTRANJSKA,  11-GORIŠKA,  12-OBALNO-KRAŠKA)"
```

```{r TABLE_1_WASTE_GENERATED}
# TYPE, QUANTITY AND TREATMENT OF WASTE 
# FROM MANUFACTURING AND SERVICE ACTIVITIES FOR 2018

data18.sheet1 <- read_excel(waste_generation_18.path, skip = 2, sheet = 1)

filtered_by_codes.sheet1 <- data18.sheet1 |> 
  filter(`ŠT. ODPADKA` %in% codes  | grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) & !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE))

filtered_by_codes.sheet1 <- filtered_by_codes.sheet1 |> 
  rename(Region = region)

# Create a bar chart
filtered_by_codes.sheet1 |> 
  ggplot(aes(x = factor(Region), fill = factor(Region))) +
  geom_bar() +
  labs(title = "WASTE GENERATED by Region", x = "Region", y = "Count") +
  scale_x_discrete(labels = c("0" = "Not Defined", "1" = "POMURSKA", "2" = "PODRAVSKA", "3" = "KOROŠKA", "4" = "SAVINJSKA", "5" = "ZASAVSKA", "6" = "POSAVSKA", "7" = "JUGOVZHODNA SLOVENIJA", "8" = "OSREDNJESLOVENSKA", "9" = "GORENJSKA", "10" = "PRIMORSKO-NOTRANJSKA", "11" = "GORIŠKA", "12" = "OBALNO-KRAŠKA"))

waste_per_company.sheet1 <- filtered_by_codes.sheet1 |> 
  group_by(NAZIV, `ŠT. ODPADKA`) |> 
  summarise(Count = n(),
            .groups = "drop_last")

# Create a pie chart
waste_per_company.sheet1 |> 
  ggplot(aes(x = "", y = Count, fill = `ŠT. ODPADKA`)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y", start = 0) +  # Convert to a pie chart
  labs(title = "Waste Type Proportion per Company", fill = "Waste Type") +
  theme_void()  # Remove unnecessary elements
```

```{r TABLE_2_WASTE_MANAGEMENT}

data18.sheet2 <- read_excel(waste_generation_18.path, skip = 2, sheet = 2)

filtered_by_codes.sheet2 <- data18.sheet2 |> 
  filter(`ŠT. ODPADKA` %in% codes  | grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) & !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE))

filtered_by_codes.sheet2 <- filtered_by_codes.sheet2 |> 
  rename(Region = `ST. REGIJA                                           (1-POMURSKA,  2-PODRAVSKA,                                3-KOROŠKA,  4-SAVINJSKA,  5-ZASAVSKA,                6 -POSAVSKA,  7-JUGOVZHODNA SLOVENIJA,  8-OSREDNJESLOVENSKA, 9-GORENJSKA,         10-PRIMORSKO-NOTRANJSKA,  11-GORIŠKA,  12-OBALNO-KRAŠKA)`)

waste_manag_company.sheet2 <- filtered_by_codes.sheet2 |> 
  group_by(`NAZIV`, `ŠT. ODPADKA`) |> 
  summarise(Count = n(),
            .groups = "drop_last")

waste_manag_company.sheet2 |> 
  group_by(`ŠT. ODPADKA`) |> 
  summarise(Count = n())

filtered_by_codes.sheet2 |> 
  ggplot(aes(x = factor(Region), fill = factor(Region))) +
  geom_bar() +
  labs(title = "WASTE MANAGEMENT by Region", x = "Region", y = "Count") +
  scale_x_discrete(labels = c("0" = "Not Defined", "1" = "POMURSKA", "2" = "PODRAVSKA", "3" = "KOROŠKA", "4" = "SAVINJSKA", "5" = "ZASAVSKA", "6" = "POSAVSKA", "7" = "JUGOVZHODNA", "8" = "OSREDNJESLOVENSKA", "9" = "GORENJSKA", "10" = "PRIMORSKO-NOTRANJSKA", "11" = "GORIŠKA", "12" = "OBALNO-KRAŠKA"))



#colnames(filtered)
#max(filtered[,6], na.rm = T)

# per region, per company
# number of companies
# type of waste per companies, how many different types
# node = a company in a region, point on a map
# cant just focus on headquarters (HQ) of the node
# try to figure out connection between operator, collector and storage


# descriptive statisc for all
```

## 2018 - Data from the annual reports received on waste collection from manufacturing and service activities

```{r waste_collection}
waste_collection_18.path <- "2018 data\\ODP_Z_2018_objava21122020.xlsx"
```

```{r waste_storage}
waste_collection_18.sheet1 <- read_excel(waste_collection_18.path, skip = 2, sheet = 1)

waste_collection_18.by_codes1 <- waste_collection_18.sheet1 |> 
  filter(
    `ŠT. ODPADKA` %in% codes  |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
      !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
    )

# Create a bar chart
waste_collection_18.by_codes1 |> 
  ggplot(aes(x = factor(`STATISTIČNA REGIJA`), fill = factor(`STATISTIČNA REGIJA`))) +
  geom_bar() +
  labs(title = "WASTE STORAGE by Region", x = "Region", y = "Count")
```

```{r waste_collected}
waste_collection_18.sheet2 <- read_excel(waste_collection_18.path, skip = 2, sheet = 2)

waste_collection_18.by_codes2 <- waste_collection_18.sheet2 |> 
  filter(
    `ŠT. ODPADKA` %in% codes  |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
      !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
    )

# Create a bar chart
waste_collection_18.by_codes2 |> 
  ggplot(aes(x = factor(`STATISTIČNA REGIJA`), fill = factor(`STATISTIČNA REGIJA`))) +
  geom_bar() +
  labs(title = "WASTE COLLECTED by Region", x = "Region", y = "Count")
```

```{r municipal_waste_collected}
waste_collection_18.sheet3 <- read_excel(waste_collection_18.path, skip = 2, sheet = 3)

waste_collection_18.by_codes3 <- waste_collection_18.sheet3 |> 
  filter(
    `ŠT. ODPADKA` %in% codes  |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
      !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
    )

waste_collection_18.by_codes3 <- waste_collection_18.by_codes3 |> 
  group_by(`NAZIV IN NASLOV`, `ŠT. ODPADKA`) |> 
  summarise(Count = n())

codes_occurrence <- waste_collection_18.by_codes3 |>
  group_by(`ŠT. ODPADKA`) |>
  summarise(Count = n())

codes_occurrence[1, 2]
codes_occurrence[2, 2]
codes_occurrence[3, 2]

codes_occurrence |> 
  ggplot(aes(x = "", y = Count, fill = `ŠT. ODPADKA`, label = Count)) +
  geom_bar(stat = "identity", width = 1) +
  geom_text(position = position_stack(vjust = 0.5), color = "white", size = 5) +  # Add text labels
  coord_polar("y", start = 0) +  # Convert to a pie chart
  labs(title = "Number of Companies per Waste Type", fill = "Waste Type") +
  theme_void()  # Remove unnecessary elements
```

```{r municipal_waste_collected_separated_by_mncplt_org}
waste_collection_18.sheet4 <- read_excel(waste_collection_18.path, skip = 2, sheet = 4)

waste_collection_18.by_codes4 <- waste_collection_18.sheet4 |> 
  filter(
    `ŠT. ODPADKA` %in% codes  |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
      !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
    )

waste_collection_18.by_codes4 <- waste_collection_18.by_codes4 |> 
  group_by(`NAZIV OBČINE`, `ŠT. ODPADKA`) |> 
  summarise(Count = n())

codes_occurrence.by_codes4 <- waste_collection_18.by_codes4 |> 
  group_by(`ŠT. ODPADKA`) |> 
  summarise(Count = n())

codes_occurrence.by_codes4 |> 
  ggplot(aes(x = "", y = Count, fill = `ŠT. ODPADKA`, label = Count)) +
  geom_bar(stat = "identity", width = 1) +
  geom_text(position = position_stack(vjust = 0.5), color = "white", size = 5) +  # Add text labels
  coord_polar("y", start = 0) +  # Convert to a pie chart
  labs(title = "Number of Municipalities per Waste Type", fill = "Waste Type") +
  theme_void()  # Remove unnecessary elements
```

```{r management_waste_collected}
waste_collection_18.sheet5 <- read_excel(waste_collection_18.path, skip = 2, sheet = 5)

waste_collection_18.by_codes5 <- waste_collection_18.sheet5 |> 
  filter(
    `ŠT. ODPADKA` %in% codes  |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
      !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
    )

waste_collection_18.by_codes5 <- waste_collection_18.by_codes5 |> 
  group_by(`STATISTIČNA REGIJA`, `ŠT. ODPADKA`) |> 
  summarise(Count = n())

# # Create a bar chart
# waste_collection_18.by_codes5 |> 
#   ggplot(aes(x = `STATISTIČNA REGIJA`, fill = factor(Count))) +
#   geom_bar() +
#   labs(title = "MANAGEMENT WASTE STORAGE by Region", x = "Region", y = "Count")

waste_collection_18.by_codes5 |> 
  ggplot(aes(x = `STATISTIČNA REGIJA`, y = Count, fill = factor(`ŠT. ODPADKA`))) +
  geom_tile() +
  labs(title = "MANAGEMENT WASTE STORAGE by Region", x = "Region", y = NULL) +
  theme_minimal()  # Adjust the theme as needed

codes_occurrence.by_codes5 <- waste_collection_18.by_codes5 |>
  group_by(`ŠT. ODPADKA`) |>
  summarise(Count = n())

codes_occurrence.by_codes5 |> 
  ggplot(aes(x = "", y = Count, fill = `ŠT. ODPADKA`, label = Count)) +
  geom_bar(stat = "identity", width = 1) +
  geom_text(position = position_stack(vjust = 0.5), color = "white", size = 5) +  # Add text labels
  coord_polar("y", start = 0) +  # Convert to a pie chart
  labs(title = "Number of Regions per Waste Type", fill = "Waste Type") +
  theme_void()  # Remove unnecessary elements
```

## 2018 - Data from the annual waste recovery/disposal reports received

```{r waste_recovery_disposal}
waste_recovery_18.path <- "2018 data\\ODP_P_2018_objava21122020.xlsx"
```

```{r waste_recovery_disposal_storage}
waste_recovery_18.sheet1 <- read_excel(waste_recovery_18.path, skip = 2, sheet = 1)

waste_recovery_18.by_codes1 <- waste_recovery_18.sheet1 |> 
  filter(
    `ŠT. ODPADKA` %in% codes  |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
      !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
    )
```

```{r waste_recovery/disposal_collected}
waste_recovery_18.sheet2 <- read_excel(waste_recovery_18.path, skip = 2, sheet = 2)

waste_recovery_18.by_codes2 <- waste_recovery_18.sheet2 |> 
  filter(
    `ŠT. ODPADKA` %in% codes  |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
      !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
    )
```

```{r treatment_of_waste}
waste_recovery_18.sheet3 <- read_excel(waste_recovery_18.path, skip = 2, sheet = 3)

waste_recovery_18.by_codes3 <- waste_recovery_18.sheet3 |> 
  filter(
    `ŠT. ODPADKA` %in% codes  |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
      !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
    )
```

```{r waste_generated}
# WASTE GENERATED IN THE TREATMENT PROCESS AND 
# UNTREATED WASTE DELIVERED TO OTHERS IN 2018
waste_recovery_18.sheet4 <- read_excel(waste_recovery_18.path, skip = 2, sheet = 4)

waste_recovery_18.by_codes4 <- waste_recovery_18.sheet4 |> 
  filter(
    `ŠT. ODPADKA` %in% codes  |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
      !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
    )
```

```{r municipal_waste_received}
# MUNICIPAL WASTE RECEIVED FOR TREATMENT, 
# SEPARATED BY MUNICIPALITY OF ORIGIN IN 2018
waste_recovery_18.sheet5 <- read_excel(waste_recovery_18.path, skip = 2, sheet = 5)

waste_recovery_18.by_codes5 <- waste_recovery_18.sheet5 |> 
  filter(
    `ŠT. ODPADKA` %in% codes  |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
      !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
    )
```

```{r difference_waste_input_treatment_process}
# MASS DIFFERENCE BETWEEN WASTE INPUT AND 
# TREATMENT PRODUCT VOLUMES DUE TO LOSSES 
# DURING THE TREATMENT PROCESS IN 2018

waste_recovery_18.sheet6 <- read_excel(waste_recovery_18.path, skip = 2, sheet = 6)

waste_recovery_18.by_codes6 <- waste_recovery_18.sheet6 |> 
  filter(
    `ŠT. ODPADKA` %in% codes  |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
      !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
    )
```

```{r landfill_capacity}
# LANDFILL CAPACITY AND STATUS IN 2018

waste_recovery_18.sheet7 <- read_excel(waste_recovery_18.path, skip = 2, sheet = 7)

# cannot filter by codes
# should try by company names? 
```

```{r landfill_quantities_management}
# TOTAL QUANTITIES AND MANAGEMENT OF WASTE IN LANDFILL IN 2018

waste_recovery_18.sheet8 <- read_excel(waste_recovery_18.path, skip = 2, sheet = 8)

waste_recovery_18.by_codes8 <- waste_recovery_18.sheet8 |> 
  filter(
    `ŠT. ODPADKA` %in% codes  |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
      !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
    )
```

```{r municipal_waste_disposed}
# MUNICIPAL WASTE DISPOSED BY MUNICIPALITY IN 2018

waste_recovery_18.sheet9 <- read_excel(waste_recovery_18.path, skip = 2, sheet = 9)

# no code to filter by for wood
```

# Year 2017

# Year 2016
