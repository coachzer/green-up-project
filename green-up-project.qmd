---
title: "Green UP Project - Waste Data"
author: "Nikola Kovačević"
date: "15/11/2023"
format: html
editor: source
---

## Short description of the project

Studying available statistical data in Slovenia for companies producing specific waste types, as well as, companies responsible for the uptake of this waste.

## Structure

The structure of various years seems to be very different in some cases, so the first task would actually be to make sense of all of this and actually see [what's the difference in available data between the various years]{.underline}.\

There are data-sets for each year: [generated waste]{.underline}, [collected waste]{.underline} and for [how waste is used]{.underline}. Moreover, in some data-sets, this is actually broken down by companies in other its by regions (of Slovenia).

## Navigation
 - Ctrl + f
  - TO-DO
  - TO-CHECK
  - STOPPED FOR NOW

## Setup

```{r setup, message = FALSE, warning = FALSE}

# Get the current working directory
current_dir <- getwd()

# Define the desired working directory
desired_dir <- "C:/Users/kovac/Desktop/Work/Green UP Project/green-up-project"

# Check if the current working directory is different from the desired one
if (file.exists(desired_dir)) {
  setwd(desired_dir)
  cat("Working directory has been changed to:", desired_dir, "\n")
} else {
  cat("The directory does not exist:", desired_dir, "\n")
}

# List of required packages
packages <- c(
  "tidyverse", "gt", "gtExtras", "readxl", "ggplot2",
  "purrr", "openxlsx", "scales", "rlang", "scales"
)

# Function to check if a package is installed, and install it if not
install_and_load <- function(pkg) {
  if (!require(pkg, character.only = TRUE)) {
    install.packages(pkg, dependencies = TRUE)
    library(pkg, character.only = TRUE)
  }
}

# Apply the function to each package in the list
lapply(packages, install_and_load)

# 02 - Agricultural, horticultural, aqua cultural, forestry, hunting, and fishing waste
# 02 01 07 - Forestry waste

# 03 - Wood processing, panel & furniture production, paper & cardboard waste
# 03 01 - Wood processing & panel production waste
# 03 01 01 - Bark & cork waste
# 03 01 05 - Sawdust, shavings, cuttings, wood, particle board, veneer (excluding 03 01 04)
# 03 01 99 - Other unspecified wood waste (unregistered in data)
# 03 03 - Pulp, paper & cardboard production waste
# 03 03 01 - Bark & wood waste

# 15 - Waste packaging; absorbents, wipes, filter materials, protective clothing
# 15 01 - Packaging (including separately collected municipal packaging waste)
# 15 01 01 - Paper packaging
# 15 01 03 - Wooden packaging

# 17 - Construction & demolition waste (including excavated soil from contaminated sites)
# 17 02 - Wood, glass, and plastic
# 17 02 01 - Construction wood

# 19 - Waste from waste treatment, water treatment, and water preparation
# 19 12 - Mechanically processed waste (e.g., sorting, crushing, compacting, pelleting)
# 19 12 01 - Paper & cardboard
# 19 12 07 - Wood (not listed under 19 12 06)

# 20 - Municipal waste (household & similar commercial/industrial/institutional waste)
# 20 01 - Separately collected fractions (excluding 15 01)
# 20 01 01 - Paper & cardboard
# 20 01 37* - Hazardous-substance-containing wood
# 20 01 38 - Non-hazardous wood (unspecified)
# 20 03 - Other municipal waste
# 20 03 07 - Bulky waste

codes <- c(
  "02 01 07",
  "03 01 01",
  "03 01 05",
  "03 01 99",
  "03 03 01",
  "15 01 01",
  "15 01 03",
  "17 02 01",
  "19 12 01",
  "19 12 07",
  "20 01 01",
  "20 01 37",
  "20 01 38",
  "20 03 07"
)

# Custom color palette with 15 distinct colors
waste_palette <- c(
  "#1f77b4", "#aec7e8", "#ff7f0e", "#ffbb78", "#2ca02c", 
  "#98df8a", "#d62728", "#ff9896", "#9467bd", "#c5b0d5",
  "#8c564b", "#c49c94", "#e377c2", "#f7b6d2", "#7f7f7f"
)

# currently in the same column -> "Odpadki na vhodu v obdelavo in prevzeti neobdelani odpadki številka", "Odpadki na izhodu iz postopka obdelave in oddani neobdelani odpadki številka",

columns_to_rename <- c("Številka odpadka", "Odpadki na vhodu v obdelavo številka", "Odpadek na vhodu v postopek obdelave številka")

# List of municipalities for each region
POMURSKA <- c("APAČE", "BELTINCI", "CANKOVA", "ČRENŠOVCI", "DOBROVNIK", "DOBRONAK", "GORNJA RADGONA", "GORNJI PETROVCI", "GRAD", "HODOŠ", "KOBILJE", "KRIŽEVCI", "KUZMA", "LENDAVA", "LENDAVA - LENDVA", "LJUTOMER", "MORAVSKE TOPLICE", "MURSKA SOBOTA", "ODRANCI", "PUCONCI", "RADENCI", "RAZKRIŽJE", "ROGAŠOVCI", "SVETI JURIJ OB ŠČAVNICI", "ŠALOVCI", "TIŠINA", "TURNIŠČE", "VELIKA POLANA", "VERŽEJ")

PODRAVSKA <- c(
  "BENEDIKT", "CERKVENJAK", "CIRKULANE", "DESTRNIK", "DORNAVA", "DUPLEK", "GORIŠNICA", "HAJDINA", "HOČE-SLIVNICA",
  "JURŠINCI", "KIDRIČEVO", "KUNGOTA", "LENART", "LOVRENC NA POHORJU", "MAJŠPERK", "MAKOLE", "MARIBOR", "MARKOVCI",
  "MIKLAVŽ NA DRAVSKEM POLJU", "OPLOTNICA", "ORMOŽ", "PESNICA", "PODLEHNIK", "POLJČANE", "PTUJ", "RAČE-FRAM", "RUŠE",
  "SELNICA OB DRAVI", "SLOVENSKA BISTRICA", "SREDIŠČE OB DRAVI", "STARŠE", "SVETA ANA", "SVETA TROJICA V SLOV. GORICAH", "SVETA TROJICA V SLOVENSKIH GORICAH", "SV. TROJICA V SLOV. GORICAH", "SVETI ANDRAŽ V SLOV. GORICAH", "SVETI JURIJ V SLOV. GORICAH", "SVETI JURIJ V SLOVENSKIH GORICAH", "SVETI TOMAŽ", "ŠENTILJ", "TRNOVSKA VAS", "VIDEM", "ZAVRČ", "ŽETALE"
)

KOROŠKA <- c(
  "ČRNA NA KOROŠKEM", "DRAVOGRAD", "MEŽICA", "MISLINJA", "MUTA", "PODVELKA", "PREVALJE", "RADLJE OB DRAVI", "PROŠKEM", "RAVNE NA KOROŠKEM", "RIBNICA NA POHORJU", "SLOVENJ GRADEC", "VUZENICA"
)

SAVINJSKA <- c(
  "BRASLOVČE", "CELJE", "DOBJE", "DOBRNA", "GORNJI GRAD", "KOZJE", "LAŠKO", "LJUBNO", "LUČE", "MOZIRJE", "NAZARJE",
  "PODČETRTEK", "POLZELA", "PREBOLD", "REČICA OB SAVINJI", "ROGAŠKA SLATINA", "ROGATEC", "SLOVENSKE KONJICE", "SOLČAVA", "ŠENTJUR",
  "ŠMARJE PRI JELŠAH", "ŠMARTNO OB PAKI", "ŠOŠTANJ", "ŠTORE", "TABOR", "VELENJE", "VITANJE", "VOJNIK", "VRANSKO", "ZREČE", "ŽALEC"
)

ZASAVSKA <- c("HRASTNIK", "LITIJA", "TRBOVLJE", "ZAGORJE OB SAVI")

POSAVSKA <- c("BISTRICA OB SOTLI", "BREŽICE", "KOSTANJEVICA NA KRKI", "KRŠKO", "RADEČE", "SEVNICA")

JUGOVZHODNA.SLOVENIJA <- c(
  "ČRNOMELJ", "DOLENJSKE TOPLICE", "KOČEVJE", "KOSTEL", "LOŠKI POTOK", "METLIKA", "MIRNA", "MIRNA PEČ", "MOKRONOG-TREBELNO",
  "NOVO MESTO", "OSILNICA", "RIBNICA", "SEMIČ", "SODRAŽICA", "STRAŽA", "ŠENTJERNEJ", "ŠENTRUPERT", "ŠKOCJAN", "ŠMARJEŠKE TOPLICE",
  "TREBNJE", "ŽUŽEMBERK"
)

OSREDNJESLOVENSKA <- c(
  "BOROVNICA", "BREZOVICA", "DOBREPOLJE", "DOBROVA-POLHOV GRADEC", "DOL PRI LJUBLJANI", "DOMŽALE", "GROSUPLJE", "HORJUL",
  "IG", "IVANČNA GORICA", "KAMNIK", "KOMENDA", "LJUBLJANA", "LOG-DRAGOMER", "LOGATEC", "LUKOVICA", "MEDVODE", "MENGEŠ",
  "MORAVČE", "ŠKOFLJICA", "ŠMARTNO PRI LITIJI", "TRZIN", "VELIKE LAŠČE", "VODICE", "VRHNIKA"
)

GORENJSKA <- c("BLED", "BOHINJ", "BOHINJSKA BISTRICA", "CERKLJE NA GORENJSKEM", "GORENJA VAS-POLJANE", "GORENJA VAS", "GORJE", "JESENICE", "JEZERSKO", "KRANJ", "KRANJSKA GORA", "NAKLO", "PREDDVOR", "RADOVLJICA", "ŠENČUR", "ŠKOFJA LOKA", "TRŽIČ", "ŽELEZNIKI", "ŽIRI", "ŽIROVNICA", "GOZD MARTULJEK")

PRIMORSKONOTRANJSKA <- c("BLOKE", "CERKNICA", "ILIRSKA BISTRICA", "LOŠKA DOLINA", "PIVKA", "POSTOJNA", "NOVA VAS")

GORIŠKA <- c("AJDOVŠČINA", "BOVEC", "BRDA", "CERKNO", "IDRIJA", "KANAL", "KOBARID", "MIREN-KOSTANJEVICA", "NOVA GORICA", "RENČE-VOGRSKO", "ŠEMPETER-VRTOJBA", "TOLMIN", "VIPAVA")

OBALNOKRAŠKA <- c("ANKARAN", "DIVAČA", "HRPELJE-KOZINA", "IZOLA", "IZOLA - ISOLA", "KOMEN", "KOPER", "KOPER - CAPODISTRIA", "PIRAN", "PIRAN - PIRANO", "SEŽANA")

NEOPREDELJENO <- "NEOPREDELJENO"

UNDEFINED <- "UNDEFINED"

# Create a dataframe with all municipality-region mappings
municipality_region_mapping <- data.frame(
  name_of_municipality = c(
    POMURSKA, PODRAVSKA, KOROŠKA, SAVINJSKA, ZASAVSKA, POSAVSKA, JUGOVZHODNA.SLOVENIJA,
    OSREDNJESLOVENSKA, GORENJSKA, PRIMORSKONOTRANJSKA, GORIŠKA, OBALNOKRAŠKA, NEOPREDELJENO, UNDEFINED
  ),
  statistical_region = c(
    rep("POMURSKA", length(POMURSKA)),
    rep("PODRAVSKA", length(PODRAVSKA)),
    rep("KOROŠKA", length(KOROŠKA)),
    rep("SAVINJSKA", length(SAVINJSKA)),
    rep("ZASAVSKA", length(ZASAVSKA)),
    rep("POSAVSKA", length(POSAVSKA)),
    rep("JUGOVZHODNA SLOVENIJA", length(JUGOVZHODNA.SLOVENIJA)),
    rep("OSREDNJESLOVENSKA", length(OSREDNJESLOVENSKA)),
    rep("GORENJSKA", length(GORENJSKA)),
    rep("PRIMORSKONOTRANJSKA", length(PRIMORSKONOTRANJSKA)),
    rep("GORIŠKA", length(GORIŠKA)),
    rep("OBALNOKRAŠKA", length(OBALNOKRAŠKA)),
    rep("NEOPREDELJENO", 1),
    rep("UNDEFINED", 1)
  )
)

```

## Functions

```{r functions}

create_year_directories <- function(base_dir, years, sub_dirs) {
  for (year in years) {
    # Define the year directory
    year_dir <- file.path(base_dir, paste0(year, " data"), paste0(year, " filtered"))

    # Check if the year directory exists, if not, create it
    if (!dir.exists(year_dir)) {
      dir.create(year_dir, recursive = TRUE)
    }

    # Check if each sub-directory exists within the year directory, if not, create it
    for (sub_dir in sub_dirs) {
      sub_dir_path <- file.path(year_dir, sub_dir)
      if (!dir.exists(sub_dir_path)) {
        dir.create(sub_dir_path)
      }
    }
  }
}

base_dir <- "."
years <- 2016:2023
sub_dirs <- c("generation", "collection", "treatment")

create_year_directories(base_dir, years, sub_dirs)

# Function to read and process a sheet
process_sheet <- function(path, sheet_index, n_max = 2, skip = 7) {
  # Read the header rows
  header <- read_excel(path, skip = skip, sheet = sheet_index, col_names = FALSE, n_max = n_max)

  # Determine the number of header rows
  num_header_rows <- nrow(header)

  # Check for valid number of header rows
  if (num_header_rows == 2) {
    # Combine the header rows into one
    combined_header <- map2_chr(
      header[1, ],
      header[2, ],
      ~ ifelse(!is.na(.y), paste(.x, .y), as.character(.x))
    )
  } else if (num_header_rows == 3) {
    # Find indices where NA occurs
    na_indices <- which(is.na(header[1, ]))

    # Iterate over each NA index and replace with the last non-NA value
    for (i in na_indices) {
      header[1, i] <- tail(header[1, 1:i][!is.na(header[1, 1:i])], 1)
    }

    combined_header <- map2_chr(
      header[1, ],
      header[2, ],
      ~ ifelse(!is.na(.y), paste(.x, .y), as.character(.x))
    )

    combined_header <- map2_chr(
      combined_header,
      header[3, ],
      ~ ifelse(!is.na(.y), paste(.x, .y), as.character(.x))
    )
  } else if (num_header_rows == 4) {
    # Find indices where NA occurs
    na_indices <- which(is.na(header[1, ]))

    # Iterate over each NA index and replace with the last non-NA value
    for (i in na_indices) {
      header[1, i] <- tail(header[1, 1:i][!is.na(header[1, 1:i])], 1)
    }

    combined_header <- map2_chr(
      header[1, ],
      header[2, ],
      ~ ifelse(!is.na(.y), paste(.x, .y), as.character(.x))
    )

    combined_header <- map2_chr(
      combined_header,
      header[3, ],
      ~ ifelse(!is.na(.y), paste(.x, .y), as.character(.x))
    )

    combined_header <- map2_chr(
      combined_header,
      header[4, ],
      ~ ifelse(!is.na(.y), paste(.x, .y), as.character(.x))
    )
  } else {
    # Read the sheet data
    sheet_data <- read_excel(path, skip = 7 + num_header_rows, sheet = sheet_index, col_names = FALSE)

    # set column names without using combined_header
    colnames(sheet_data) <- header[1, ]

    # Set the new column names
    # colnames(sheet_data) <- combined_header

    return(sheet_data)
    stop("Unexpected number of header rows. Only 1, 2, 3 or 4 header rows are supported.")
  }

  # Read the sheet data
  sheet_data <- read_excel(
    path, 
    skip = skip + num_header_rows, 
    sheet = sheet_index, 
    col_names = FALSE
  )


  # Set the new column names
  colnames(sheet_data) <- combined_header

  return(sheet_data)
}

# ------------------------------------------------------------

# Function to filter by waste codes
filter_df_by_codes <- function(df) {
  # Validate input parameters
  if (is.null(codes)) {
    stop("'codes' parameter must be provided")
  }

  if (!is.data.frame(df)) {
    stop("Input must be a data frame")
  }

  # Replace NA values in numeric columns
  numeric_columns <- sapply(df, is.numeric)
  df[, numeric_columns][is.na(df[, numeric_columns])] <- 0

  # Handle empty strings and NA in character columns containing waste codes
  waste_code_columns <- grep("waste_code|številka", tolower(colnames(df)), value = TRUE)
  for (col in waste_code_columns) {
    if (is.character(df[[col]]) || is.factor(df[[col]])) {
      df[[col]] <- as.character(df[[col]])
      df[[col]][df[[col]] == ""] <- NA
    }
  }

  # Initialize list to collect filter conditions
  conditions <- list()

  # Handle columns_to_rename and add condition if present
  columns_to_rename <- c("Številka odpadka") # Adjust based on actual columns
  if (any(columns_to_rename %in% colnames(df))) {
    df <- df |>
      rename_with(~ ifelse(. %in% columns_to_rename, "waste_code", .),
        cols = columns_to_rename
      )
    if ("waste_code" %in% colnames(df)) {
      conditions <- c(
        conditions,
        expr(
          waste_code %in% codes |
            grepl("^03 01 [0-9]", waste_code) & !grepl("03 01 04", waste_code) |
            is.na(waste_code)
        )
      )
    }
  }

  # Check and rename other relevant columns, adding their conditions

  if ("Številka odloženih odpadkov" %in% colnames(df)) {
    df <- df |> rename(deposited_waste_code = `Številka odloženih odpadkov`)
    conditions <- c(
      conditions,
      expr(
        deposited_waste_code %in% codes |
          grepl("^03 01 [0-9]", deposited_waste_code) & !grepl("03 01 04", deposited_waste_code) |
          is.na(deposited_waste_code)
      )
    )
  }

  if ("Odpadek na vhodu v postopek obdelave številka" %in% colnames(df)) {
    df <- df |> rename(input_waste_code = `Odpadek na vhodu v postopek obdelave številka`)
    conditions <- c(
      conditions,
      expr(
        input_waste_code %in% codes |
          grepl("^03 01 [0-9]", input_waste_code) & !grepl("03 01 04", input_waste_code) |
          is.na(input_waste_code)
      )
    )
  }

  if ("Odpadki na izhodu iz postopka drobljenja naziv" %in% colnames(df)) {
    df <- df |> rename(shredding_outlet_waste_name = `Odpadki na izhodu iz postopka drobljenja naziv`)
    conditions <- c(
      conditions,
      expr(
        shredding_outlet_waste_name %in% codes |
          grepl("^03 01 [0-9]", shredding_outlet_waste_name) & !grepl("03 01 04", shredding_outlet_waste_name) |
          is.na(shredding_outlet_waste_name)
      )
    )
  }

  if ("Odpadki na vhodu v obdelavo številka" %in% colnames(df)) {
    df <- df |> rename(input_waste_code = `Odpadki na vhodu v obdelavo številka`)
    conditions <- c(
      conditions,
      expr(
        input_waste_code %in% codes |
          grepl("^03 01 [0-9]", input_waste_code) & !grepl("03 01 04", input_waste_code) |
          is.na(input_waste_code)
      )
    )
  }

  if ("Odpadki na vhodu v obdelavo in prevzeti neobdelani odpadki številka" %in% colnames(df)) {
    df <- df |> rename(treatment_inlet_delivered_waste_code = `Odpadki na vhodu v obdelavo in prevzeti neobdelani odpadki številka`)
    conditions <- c(
      conditions,
      expr(
        treatment_inlet_delivered_waste_code %in% codes |
          grepl("^03 01 [0-9]", treatment_inlet_delivered_waste_code) & !grepl("03 01 04", treatment_inlet_delivered_waste_code) |
          is.na(treatment_inlet_delivered_waste_code)
      )
    )
  }

  if ("Odpadki na izhodu iz postopka obdelave in oddani neobdelani odpadki številka" %in% colnames(df)) {
    df <- df |> rename(treatment_outlet_delivered_waste_code = `Odpadki na izhodu iz postopka obdelave in oddani neobdelani odpadki številka`)
    conditions <- c(
      conditions,
      expr(
        treatment_outlet_delivered_waste_code %in% codes |
          grepl("^03 01 [0-9]", treatment_outlet_delivered_waste_code) & !grepl("03 01 04", treatment_outlet_delivered_waste_code) |
          is.na(treatment_outlet_delivered_waste_code)
      )
    )
  }

  if ("Številka odpadka na vhodu v postopek obdelave" %in% colnames(df)) {
    df <- df |> rename(treatment_inlet_waste_code = `Številka odpadka na vhodu v postopek obdelave`)
    conditions <- c(
      conditions,
      expr(
        treatment_inlet_waste_code %in% codes |
          grepl("^03 01 [0-9]", treatment_inlet_waste_code) & !grepl("03 01 04", treatment_inlet_waste_code) |
          is.na(treatment_inlet_waste_code)
      )
    )
  }

  if ("Številka v postopku obdelave nastalih odpadkov" %in% colnames(df)) {
    df <- df |> rename(treatment_outlet_waste_code = `Številka v postopku obdelave nastalih odpadkov`)
    conditions <- c(
      conditions,
      expr(
        treatment_outlet_waste_code %in% codes |
          grepl("^03 01 [0-9]", treatment_outlet_waste_code) & !grepl("03 01 04", treatment_outlet_waste_code) |
          is.na(treatment_outlet_waste_code)
      )
    )
  }

  # if there is a need to drop specific column/s

  # column_name <- c("Odpadne nagrobne sveče (da/ne)", "Odpadne sveče pri odpadku 20 02 03 (da/ne)")
  #
  # if (column_name %in% colnames(df)) {
  #   df <- df |>
  #     select(-column_name)
  # }

  # Combine all conditions with OR and apply the filter
  if (length(conditions) > 0) {
    combined_condition <- Reduce(function(x, y) expr(!!x | !!y), conditions)
    df <- df |> filter(!!combined_condition)
  }

  return(df)
}

# ------------------------------------------------------------

# Function to find municipality with most waste in a region
find_municipality_with_most_waste <- function(region_municipalities, waste_df) {
  # Filter data for the specified region
  region_data <- waste_df[waste_df$name_of_municipality %in% region_municipalities, ]

  if (nrow(region_data) == 0) {
    print("No data available for the specified region.")
    return(NULL)
  }

  # `Komunalni odpadki po občini izvora kg`
  # `Komunalni odpadki in odpadek 16 01 03 po občini izvora kg`

  # Find the municipality with the most waste in the specified region
  municipality_with_most_waste <- aggregate(waste_by_municipality ~ name_of_municipality, data = region_data, FUN = sum)
  municipality_with_most_waste <- municipality_with_most_waste[which.max(municipality_with_most_waste$`waste_by_municipality`), ]

  # add a column with the region name, use the name of the variable
  municipality_with_most_waste$region <- deparse(substitute(region_municipalities))

  # Print the result
  print(municipality_with_most_waste)
}

# ------------------------------------------------------------

# Function to find the list of municipalities sorted by waste amount in a region
list_of_waste_by_municipality <- function(region_municipalities, waste_df) {
  # Filter data for the specified region
  region_data <- waste_df[waste_df$name_of_municipality %in% region_municipalities, ]
  print(region_data)

  if (nrow(region_data) == 0) {
    print("No data available for the specified region.")
    return(NULL)
  }

  # Calculate total waste for each municipality in the specified region
  total_waste_by_municipality <- aggregate(waste_by_municipality ~ name_of_municipality, data = region_data, FUN = sum)
  # Sort municipalities by waste amount in descending order
  sorted_municipalities <- total_waste_by_municipality[order(-total_waste_by_municipality$waste_by_municipality), ]

  # Print the result
  print(sorted_municipalities)
}

# ------------------------------------------------------------

# Define a function to rename the type_of_waste based on the code
categorize_waste <- function(data, waste_code_col = "waste_code") {
  data |>
    mutate(
      type_of_waste = case_when(
        # 02 - Agricultural, horticultural, aquacultural, forestry, hunting, and fishing waste
        .data[[waste_code_col]] == "02 01 07" ~ "Forestry Waste (02 01 07)",
        
        # 03 - Wood processing, panel & furniture production, paper & cardboard waste
        # 03 01 - Wood processing & panel production waste
        .data[[waste_code_col]] == "03 01 01" ~ "Bark and Cork Waste (03 01 01)",
        .data[[waste_code_col]] == "03 01 05" ~ "Sawdust/Shavings/Cuttings (03 01 05)",
        .data[[waste_code_col]] == "03 01 99" ~ "Other Unspecified Wood Waste (03 01 99)",
        
        # 03 03 - Pulp, paper & cardboard production waste
        .data[[waste_code_col]] == "03 03 01" ~ "Bark and Wood Waste from Pulp/Paper Production (03 03 01)",
        .data[[waste_code_col]] == "03 03 07" ~ "Mechanically Separated Rejects from Pulping (03 03 07)",
        .data[[waste_code_col]] == "03 03 08" ~ "Waste from Sorting of Paper and Cardboard for Recycling (03 03 08)",
        .data[[waste_code_col]] == "03 03 10" ~ "Fiber Rejects and Sludge from Mechanical Separation (03 03 10)",
        .data[[waste_code_col]] == "03 03 99" ~ "Other Unspecified Paper Waste (03 03 99)",
        
        # 07 - Wastes from organic chemical processes
        # 07 02 - Waste from the production, formulation, supply and use of plastics, synthetic rubber and man-made fibres
        .data[[waste_code_col]] == "07 02 13" ~ "Waste Plastics (07 02 13)",
        
        # 08 - Wastes from the manufacturing, preparation, supply and use of surface filling products (paints, varnishes and enamels), gluids, inks and printing inks
        # 08 01 - Wastes from the production, formulation, supply, use and disposal of paints and varnishes
        .data[[waste_code_col]] == "08 01 11*" ~ "Waste Paints and Varnishes Containing Hazardous Substances (08 01 11*)",
        
        # 09 - Waste from the photographic industry
        # 09 01 - Waste from the photographic industry
        .data[[waste_code_col]] == "09 01 07" ~ "Silver-Containing Photographic Films and Paper (09 01 07)",
        
        # 10 - Wastes from thermal processes
        # 10 01 - Wastes from power stations and other combustion plants (except 19)
        .data[[waste_code_col]] == "10 01 01" ~ "Ash, slag and boiler dust (excluding boiler dust listed under 10 01 04) (10 01 01)",
        .data[[waste_code_col]] == "10 01 15" ~ "Ash, slag and boiler dust from co-incineration plants other than those mentioned in 10 01 14 (10 01 15)",
        
        # 12 - Shaping and surface treatment of metals and plastics
        
        # 12 01 - Wastes from forming and physical and mechanical surface treatment of metals and plastics
        .data[[waste_code_col]] == "12 01 02" ~ "Iron Dust and Particles (12 01 02)",
        .data[[waste_code_col]] == "12 01 03" ~ "Non-Ferrous Metal Turnings (12 01 03)",
        .data[[waste_code_col]] == "12 01 04" ~ "Non-Ferrous Metal Dust and Particles (12 01 04)",
        
        # 14 - Organic solvents, refrigerants, and propellants
        
        # 14 06 - Waste organic solvents, refrigerants and foam/aerosol propellants
        .data[[waste_code_col]] == "14 06 03*" ~ "Other Solvents and Solvent Mixtures (14 06 03*)",
        
        # 15 - Waste packaging; absorbents, wipes, filter materials, protective clothing
        # 15 01 - Packaging
        .data[[waste_code_col]] == "15 01 01" ~ "Paper and Cardboard Packaging (15 01 01)",
        .data[[waste_code_col]] == "15 01 02" ~ "Plastic Packaging (15 01 02)",
        .data[[waste_code_col]] == "15 01 03" ~ "Wooden Packaging (15 01 03)",
        .data[[waste_code_col]] == "15 01 04" ~ "Metal Packaging (15 01 04)",
        .data[[waste_code_col]] == "15 01 05" ~ "Composite Packaging (15 01 05)",
        .data[[waste_code_col]] == "15 01 06" ~ "Mixed Packaging (15 01 06)",
        .data[[waste_code_col]] == "15 01 10*" ~ "Hazardous Contaminated Packaging (15 01 10*)",
        
        # 16 - Waste not otherwise specified
        # 16 01 - End-of-life vehicles from various modes of transport (including mobile machinery), waste from dismantling of end-of-life vehicles and vehicle maintenance (except 13, 14, 16 06 and 16 08)
        .data[[waste_code_col]] == "16 01 03" ~ "End-of-Life Tyres (16 01 03)",
        .data[[waste_code_col]] == "16 01 04*" ~ "End-of-Life Vehicles (16 01 04*)",
        .data[[waste_code_col]] == "16 01 07*" ~ "Oil Filters (16 01 07*)",
        
        # 16 02 - Waste electrical and electronic equipment
        .data[[waste_code_col]] == "16 02 11*" ~ "Discarded Equipment Containing Chlorofluorocarbons (16 02 11*)",
        .data[[waste_code_col]] == "16 02 14" ~ "Discarded Equipment Not Otherwise Specified (16 02 14)",
        .data[[waste_code_col]] == "16 02 16" ~ "Components Removed from Discarded Equipment (16 02 16)",
        
        # 16 03 - Batches not as described and unused products
        .data[[waste_code_col]] == "16 03 04" ~ "Non-Hazardous Inorganic Wastes (16 03 04)",
        .data[[waste_code_col]] == "16 03 06" ~ "Non-Hazardous Organic Wastes (16 03 06)",
        
        # 16 06 - Batteries and accumulators
        .data[[waste_code_col]] == "16 06 01*" ~ "Lead-Acid Batteries (16 06 01*)",
        
        # 16 08 - Spent catalysts
        .data[[waste_code_col]] == "16 08 03" ~ "Spent Catalysts Containing Transition Metals (16 08 03)",
        
        # 17 - Construction & demolition waste
        # 17 02 - Wood, glass, and plastic
        .data[[waste_code_col]] == "17 02 01" ~ "Construction Wood Waste (17 02 01)",
        
        # 17 04 - Metals (including alloys)
        .data[[waste_code_col]] == "17 04 05" ~ "Iron and Steel Waste (17 04 05)",
        
        # 17 06 - Insulating materials and building materials containing asbestos
        .data[[waste_code_col]] == "17 06 04" ~ "Other Insulation Materials (17 06 04)",
        .data[[waste_code_col]] == "17 06 05*" ~ "Construction Materials Containing Asbestos (17 06 05*)",
        
        # 17 08 - Gypsum-based building materials
        .data[[waste_code_col]] == "17 08 02" ~ "Gypsum-Based Construction Materials (17 08 02)",
        
        # 19 - Waste from waste treatment facilities
        # 19 01 - Waste from incineration or pyrolysis of waste
        .data[[waste_code_col]] == "19 01 12" ~ "Bottom Ash and Slag (19 01 12)",
        
        # 19 02 - Wastes from physico-chemical treatment of waste (including chromate removal, cyanide removal, neutralisation)
        .data[[waste_code_col]] == "19 02 04*" ~ "Mixed Waste Containing Hazardous Substances (19 02 04*)",
        
        # 19 05 - Waste from aerobic treatment of solid waste
        .data[[waste_code_col]] == "19 05 01" ~ "Non-Compostable Fraction of Municipal Waste (19 05 01)",
        .data[[waste_code_col]] == "19 05 03" ~ "Compost Not Meeting Specifications (19 05 03)",
        
        # 19 06 - Waste from anaerobic treatment of solid waste
        .data[[waste_code_col]] == "19 06 06" ~ "Digestate sludge from anaerobic treatment of animal and vegetable waste (19 06 06)",
        
        # 19 09 - Waste from the preparation of waste for disposal
        .data[[waste_code_col]] == "19 09 01" ~ "Solid Wastes from Primary Sieves and Filters (19 09 01)",
        .data[[waste_code_col]] == "19 09 02" ~ "Sludges from Water Clarification (19 09 02)",
        .data[[waste_code_col]] == "19 09 03" ~ "Sludges from Decarbonation (19 09 03)",
        
        # 19 10 - Waste from shredding of metal-containing waste
        .data[[waste_code_col]] == "19 10 01" ~ "Ferrous Metal Waste from Shredding (19 10 01)",
        .data[[waste_code_col]] == "19 10 02" ~ "Non-Ferrous Metal Waste from Shredding (19 10 02)",
        .data[[waste_code_col]] == "19 10 06" ~ "Other Fractions from Shredding (19 10 06)",
        
        # 19 12 - Mechanically processed waste
        .data[[waste_code_col]] == "19 12 01" ~ "Paper and Cardboard from Waste Treatment (19 12 01)",
        .data[[waste_code_col]] == "19 12 02" ~ "Ferrous Metals from Mechanical Treatment (19 12 02)",
        .data[[waste_code_col]] == "19 12 03" ~ "Non-Ferrous Metals from Mechanical Treatment (19 12 03)",
        .data[[waste_code_col]] == "19 12 04" ~ "Plastics and Rubber from Mechanical Treatment (19 12 04)",
        .data[[waste_code_col]] == "19 12 05" ~ "Glass from Mechanical Treatment (19 12 05)",
        .data[[waste_code_col]] == "19 12 07" ~ "Wood Waste from Treatment (not 19 12 06) (19 12 07)",
        .data[[waste_code_col]] == "19 12 09" ~ "Minerals from Mechanical Treatment (19 12 09)",
        .data[[waste_code_col]] == "19 12 10" ~ "Refuse-Derived Fuel (19 12 10)",
        .data[[waste_code_col]] == "19 12 12" ~ "Other Mechanically Treated Waste (19 12 12)",
        
        # 20 - Municipal waste
        # 20 01 - Separately collected fractions
        .data[[waste_code_col]] == "20 01 01" ~ "Paper and Cardboard from Municipal Waste (20 01 01)",
        .data[[waste_code_col]] == "20 01 02" ~ "Glass from Municipal Waste (20 01 02)",
        .data[[waste_code_col]] == "20 01 08" ~ "Biodegradable kitchen waste (20 01 08)",
        .data[[waste_code_col]] == "20 01 10" ~ "Clothing (20 01 10)",
        .data[[waste_code_col]] == "20 01 11" ~ "Textiles (20 01 11)",
        .data[[waste_code_col]] == "20 01 21*" ~ "Mercury-Containing Waste (20 01 21*)",
        .data[[waste_code_col]] == "20 01 23*" ~ "Discarded Equipment Containing CFCs (20 01 23*)",
        .data[[waste_code_col]] == "20 01 26*" ~ "Non-Edible Oils and Fats (20 01 26*)",
        .data[[waste_code_col]] == "20 01 27*" ~ "Hazardous Paints, Inks, Adhesives (20 01 27*)",
        .data[[waste_code_col]] == "20 01 28" ~ "Non-Hazardous Paints, Inks, Adhesives (20 01 28)",
        .data[[waste_code_col]] == "20 01 35*" ~ "Hazardous Waste Electrical Equipment (20 01 35*)",
        .data[[waste_code_col]] == "20 01 36" ~ "Non-Hazardous Waste Electrical Equipment (20 01 36)",
        .data[[waste_code_col]] == "20 01 38" ~ "Non-hazardous Wood from Municipal Waste (20 01 38)",
        .data[[waste_code_col]] == "20 01 39" ~ "Plastics from Municipal Waste (20 01 39)",
        .data[[waste_code_col]] == "20 01 40" ~ "Metals from Municipal Waste (20 01 40)",
        
        # 20 02 - Garden and park waste (including waste from cemeteries)
        .data[[waste_code_col]] == "20 02 01" ~ "Biodegradable Garden and Park Waste (20 02 01)",
        .data[[waste_code_col]] == "20 02 03" ~ "Non-biodegradable Garden and Park Waste (20 02 03)",
        
        # 20 03 - Other municipal waste
        .data[[waste_code_col]] == "20 03 01" ~ "Mixed Municipal Waste (20 03 01)",
        .data[[waste_code_col]] == "20 03 07" ~ "Bulky Municipal Waste (20 03 07)",
        
        # Default for unmatched codes
        TRUE ~ NA_character_
      ),
      
      # Add broader waste categories
      waste_category = case_when(
        str_starts(.data[[waste_code_col]], "02") ~ "Agricultural/Forestry Waste",
        str_starts(.data[[waste_code_col]], "03") ~ "Wood/Paper Production Waste",
        str_starts(.data[[waste_code_col]], "07") ~ "Organic Chemical Waste",
        str_starts(.data[[waste_code_col]], "08") ~ "Surface Treatment Waste",
        str_starts(.data[[waste_code_col]], "09") ~ "Photographic Industry Waste",
        str_starts(.data[[waste_code_col]], "10") ~ "Thermal Process Waste",
        str_starts(.data[[waste_code_col]], "12") ~ "Metal/Plastic Processing Waste",
        str_starts(.data[[waste_code_col]], "14") ~ "Solvent/Refrigerant Waste",
        str_starts(.data[[waste_code_col]], "15") ~ "Packaging Waste",
        str_starts(.data[[waste_code_col]], "16") ~ "Miscellaneous Waste",
        str_starts(.data[[waste_code_col]], "17") ~ "Construction/Demolition Waste",
        str_starts(.data[[waste_code_col]], "19") ~ "Waste Treatment Residues",
        str_starts(.data[[waste_code_col]], "20") ~ "Municipal Waste",
        TRUE ~ "Other Waste"
      )
    )
}

# ------------------------------------------------------------

# Define a function to rename the names of the waste in the rows
rename_waste_names <- function(df, column_name = "type_of_waste") {
  column_name <- sym(column_name)

  df |>
    mutate(!!column_name := case_when(
      !!column_name == "Les, ki ni naveden v 20 01 37" ~ "Non-hazardous Wood from Municipal Waste (20 01 38)", # "Wood, not specified in 20 01 37",
      !!column_name == "Žagovina, oblanci, odrezki, les, iverne plošče in furnir, ki niso navedeni v 03 01 04" ~ "Sawdust/Shavings/Cuttings (03 01 05)",# "Sawdust/Chips/Wood, not specified in 03 01 04",
      !!column_name == "Odpadki, ki niso navedeni drugje" ~ "Miscellaneous Waste",
      !!column_name == "Papirna in kartonska embalaža ter embalaža iz lepenke" ~ "Paper and Cardboard Packaging (15 01 01)", # "Paper/Cardboard/ Paperboard Packaging",
      !!column_name == "Lesena embalaža" ~ "Wooden Packaging (15 01 03)", # "Wooden Packaging",
      !!column_name == "Les" ~ "Construction Wood Waste (17 02 01)", # "Wood",
      !!column_name == "Odpadna lubje in pluta" ~ "Bark and Cork Waste (03 01 01)", #"Waste Bark and Cork ",
      !!column_name == "Odpadna lubje in les" ~ "Bark and Wood Waste from Pulp/Paper Production (03 03 01)",# "Waste Bark and Wood",
      !!column_name == "Kovine" ~ "Metals",
      !!column_name == "Kosovni odpadki" ~ "Bulky Municipal Waste (20 03 07)",# "Bulky Waste",
      !!column_name == "Opilki in ostružki barvnih kovin" ~ "Shavings and Turnings of Coloured Metals",
      !!column_name == "Prah in delci barvnih kovin" ~ "Dust and Particles of Coloured Metals",
      !!column_name == "Zavržena oprema, ki vsebuje fluorokloroogljikovodike, HCFC, HFC" ~ "Discarded Equipment Containing HCFCs, HFCs",
      !!column_name == "Sestavine, odstranjene iz zavržene opreme, ki niso navedene v 16 02 15" ~ "Components Removed from Discarded Equipment, not specified in 16 02 15",
      !!column_name == "Anorganski odpadki, ki niso navedeni v 16 03 03" ~ "Inorganic Waste, not specified in 16 03 03",
      !!column_name == "Odpadna plastika" ~ "Waste Plastic",
      !!column_name == "Mešana embalaža" ~ "Mixed Packaging",
      !!column_name == "Plastična embalaža" ~ "Plastic Packaging",
      !!column_name == "Odpadki iz sortiranja papirja ter kartona in lepenke, namenjenih za recikliranje" ~ "Sorted Paper and Cardboard for Recycling",
      !!column_name == "Zavržena oprema, ki ni navedena v 16 02 09 do 16 02 13" ~ "Discarded Equipment, not specified in 16 02 09 to 16 02 13",
      !!column_name == "Organski odpadki, ki niso navedeni v 16 03 05" ~ "Organic Waste, not specified in 16 03 05",
      !!column_name == "Papir ter karton in lepenka" ~ "Paper and Cardboard",
      !!column_name == "Zavržena električna in elektronska oprema, ki ni navedena v 20 01 21, 20 01 23 in 20 01 35" ~ "Discarded Electrical and Electronic Equipment, not specified in 20 01 21, 20 01 23 and 20 01 35",
      !!column_name == "Plastika" ~ "Plastic",
      !!column_name == "Mešani komunalni odpadki" ~ "Mixed Municipal Waste",
      !!column_name == "Pepel, žlindra in kotlovski prah (razen kotlovskega prahu, ki je naveden v 10 01 04)" ~ "Ash, Slag and Boiler Dust (except boiler dust specified in 10 01 04)",
      !!column_name == "Les, ki ni naveden v 19 12 06" ~ "Wood Waste from Treatment (not 19 12 06) (19 12 07)", #"Wood, not specified in 19 12 06",
      !!column_name == "Drugi odpadki (vključno z mešanicami materialov) iz mehanske obdelave odpadkov, ki niso navedeni v 19 12 11" ~ "Other Wastes (including mixtures of materials) from Mechanical Treatment, not specified in 19 12 11",
      !!column_name == "Pepel, žlindra in kotlovski prah iz naprav za sosežig, ki niso navedeni v 10 01 14" ~ "Ash, Slag and Boiler Dust from Co-incineration, not specified in 10 01 14",
      !!column_name == "Mehansko ločeni rejekti iz razpuščanja odpadnega papirja ter kartona in lepenke" ~ "Mechanically Separated Rejects from Pulping (03 03 07)", # "Mechanically Separated Rejects from Waste Paper and Cardboard Pulping",
      !!column_name == "Odpadki iz gozdarstva" ~ "Forestry Waste (02 01 07)", # "Forestry Waste",
      !!column_name == "Prah in delci železa" ~ "Iron Dust and Particles",
      !!column_name == "Železne kovine" ~ "Ferrous Metals",
      !!column_name == "Barvne kovine" ~ "Non-ferrous Metals",
      !!column_name == "Železo in jeklo" ~ "Iron and Steel",
      !!column_name == "Gorljivi odpadki (iz odpadkov pridobljeno gorivo)" ~ "Combustible Waste (Refuse Derived Fuel)",
      !!column_name == "Plastika in guma" ~ "Plastic and Rubber",
      !!column_name == "Kompost, ki ne ustreza specifikaciji" ~ "Off-specification Compost"
    ))
}

# ------------------------------------------------------------

process_waste_data <- function(data, waste_code_col = "waste_code", waste_desc_col = "type_of_waste") {
  # First categorize based on codes
  data <- categorize_waste(data, waste_code_col)
  
  # Then rename descriptions only for uncategorized rows
  data |>
    mutate(
      type_of_waste = ifelse(
        is.na(type_of_waste),  # Only rename if not categorized by code
        rename_waste_names(data, waste_desc_col)$type_of_waste,
        type_of_waste
      )
    )
}

# ------------------------------------------------------------

process_waste_column <- function(data, code_col, waste_desc_col) {
  data |>
    rename(
      waste_code = {{code_col}},
      type_of_waste = {{waste_desc_col}}
    ) |>
    categorize_waste() |>
    rename(
      {{code_col}} := waste_code,
      {{waste_desc_col}} := type_of_waste
    )
}

# ------------------------------------------------------------

# Define a function to rename the description of treatment
rename_treatment_description <- function(df) {
  df |>
    mutate(description_of_treatment = case_when(
      description_of_treatment == "19a – predelava odpadkov v sekance" ~ "processing into wood chips",
      description_of_treatment == "20 – uporaba biomase kot gorivo" ~ "use of biomass as fuel",
      description_of_treatment == "20 – uporaba kot gorivo ali druga sredstva za pridobivanje energije" ~ "use as fuel/energy production",
      description_of_treatment == "02 – predobdelava odpadkov (sortiranje, šrediranje, sušenje, ločevanje itd.)" ~ "pre-treatment",
      description_of_treatment == "2 – predobdelava (sortiranje, šrediranje, sušenje, ločevanje itd.)" ~ "pre-treatment",
      description_of_treatment == "99 – brez obdelave" ~ "no treatment",
      description_of_treatment == "04 – recikliranje odpadkov" ~ "recycling",
      description_of_treatment == "4 – recikliranje" ~ "recycling",
      description_of_treatment == "06 – aerobna predelava odpadkov (kompostarne)" ~ "aerobic treatment (composting plants)",
      description_of_treatment == "6 – aerobna predelava (kompostarne)" ~ "aerobic treatment (composting plants)",
      description_of_treatment == "22 – sosežig odpadkov - proizvodnja materialnih izdelkov" ~ "co-incineration - production of material products",
      description_of_treatment == "22 – sosežig" ~ "co-incineration",
      description_of_treatment == "21 – sosežig odpadkov - proizvodnja energije" ~ "co-incineration - energy production",
      description_of_treatment == "19 – predelava odpadkov v trdno gorivo (R12)" ~ "conversion to solid fuel",
      description_of_treatment == "19 – predelava v trdno gorivo (R12)" ~ "conversion to solid fuel",
      description_of_treatment == "01 – priprava odpadkov za ponovno uporabo" ~ "preparation for re-use",
      description_of_treatment == "1 – priprava za ponovno uporabo" ~ "preparation for re-use",
      description_of_treatment == "26 – odlaganje odpadkov" ~ "disposal",
      description_of_treatment == "26 – odlaganje" ~ "disposal",
      description_of_treatment == "7 – predelava odpadkov v premični napravi" ~ "recovery of waste in a mobile installation",
      description_of_treatment == "23 – drug postopek predelave" ~ "other recovery operation",
      description_of_treatment == "9 – predelava odpadkov v polnilo pri gradnji objektov" ~ "processing into aggregate for construction",
      description_of_treatment == "27 – drug postopek odstranjevanja" ~ "other disposal operation"
    ))
}

# ------------------------------------------------------------

# Define a function for names for statistical_region instead of numbers
rename_region <- function(data) {
  data |>
    mutate(statistical_region = case_when(
      statistical_region == 1 ~ "POMURSKA",
      statistical_region == 2 ~ "PODRAVSKA",
      statistical_region == 3 ~ "KOROŠKA",
      statistical_region == 4 ~ "SAVINJSKA",
      statistical_region == 5 ~ "ZASAVSKA",
      statistical_region == 6 ~ "POSAVSKA",
      statistical_region == 7 ~ "JUGOVZHODNA SLOVENIJA",
      statistical_region == 8 ~ "OSREDNJESLOVENSKA",
      statistical_region == 9 ~ "GORENJSKA",
      statistical_region == 10 ~ "PRIMORSKO-NOTRANJSKA",
      statistical_region == 11 ~ "GORIŠKA",
      statistical_region == 12 ~ "OBALNO-KRAŠKA",
      TRUE ~ "NEOPREDELJENO"
    ))
}

# ------------------------------------------------------------

# Define a function to rename the substance/materials/products
rename_substances <- function(df, column = "substance_or_object") {
  df[[column]] <- dplyr::case_when(
    df[[column]] == "99 – drugo" ~ "99 - other",
    df[[column]] == "7 – les" ~ "7 - wood",
    df[[column]] == "undefined" ~ "undefined",
    df[[column]] == "3 – kovine: železo in jeklo" ~ "3 - metals: iron and steel",
    df[[column]] == "22 – gradbeno polnilo" ~ "22 - construction filler",
    df[[column]] == "8 – plastika" ~ "8 - plastics",
    df[[column]] == "4 – kovine: barvne kovine" ~ "4 - metals: non-ferrous metals",
    df[[column]] == "16 – kompost (proizvod)" ~ "16 - compost (product)",
    df[[column]] == "5 – papir in karton" ~ "5 - paper and cardboard",
    df[[column]] == "6 – guma" ~ "6 - rubber",
    df[[column]] == "17 – digestat (proizvod)" ~ "17 - digestate (product)",
    df[[column]] == "11 – tekstil in usnje" ~ "11 - textiles and leather",
    .default = df[[column]]
  )

  return(df)
}
```

## Initial Requirements

1.  Companies producing wood waste (2019-2021):

    -   Account for COVID-19 impact
    -   Identify waste production locations/municipalities - problem: companies were not recorded after 2019 year

2.  Companies collecting and processing wood waste

3.  Wood waste processing and utilization methods

4.  Filter by specific waste codes:

    -   Chapter 03 - wastes from wood processing and the production of panels and furniture, pulp, paper and cardboard
        -   Sub-Chapter - 01
            -   03 01 ?? (excluding 03 01 04\*)
                -   03 01 01 (waste bark and cork)
                -   03 01 05 (sawdust, shavings, cuttings, wood, particle board and veneer other than 03 01 04)
                -   03 01 99 (wastes not otherwise specified)
        -   Sub-Chapter - 03
            -   03 03 01 (waste bark and wood)
    -   Chapter 15 - waste packaging, absorbents, wiping cloths, filter materials and protective clothing not otherwise specified
        -   Sub-Chapter 01 - packaging (including separately collected municipal packaging waste)
            -   15 01 03 (wooden packaging)
            -   15 01 01 (paper and cardboard packaging)
    -   Chapter 17 - construction and demolition wastes
        -   Sub-Chapter 02 - wood, glass and plastic
            -   17 02 01 (construction waste)
    -   Chapter 20 - municipal waste
        -   Sub-Chapter 01 - separately collected fractions:
            -   20 01 38 (wood not specified under 20 01 37)
            -   EXCLUDED -> 20 01 37 (wood containing hazardous substances)

## Update 1 (18/12/2023)

1.  Year-over-year comparison by company/region

2.  Identify key companies for mapping

3.  Focus on 12 regions:

    -   Determine center point for each region

4.  Producer-handler connections:

    -   Shipping and storage locations

5.  Recycling quantities:

    -   Material balance checks
    -   Flow from regions to municipalities

## Update 2 (17/01/2024)

-   Summarize filtered CSV/Excel data

## Update 3 (23/02/2024)

1.  Summarize sheets
2.  Sum up data per region
3.  Compare regions across different sheets
4.  Analyze numerical discrepancies

## AnyLogic Simulation (on hold)

1.  Key metrics:
    -   Generation, collection, and processing rates
    -   Storage capacity, costs, and revenue
    -   Current storage amounts
    -   Waste streams
    -   Recycling quantities
2.  Regional analysis:
    -   Determine collection and processing points
    -   Hover-over information: generated, collected, processed

## Update 4 (30/08/2024)

1.  Finished up importing all the data available from the SURS website
2.  Cleaned up all the years (available) and ready for combining data per type (generation, collection or treatment)

# Year 2023

## 2023 - Data from the annual reports of the original generators

### Code

```{r waste_generation_2023}
waste_generation_23.path <- "2023 data\\podatki LP ODP-nastajanje 2023.xlsx"

sheet_names <- excel_sheets(waste_generation_23.path)

processed_sheets <- list()

sheets_with_n_max_3 <- c(2, 3, 5)

# header is 6 in this case
skip <- 6

for (sheet_name in sheet_names) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else 2
  processed_sheet <- process_sheet(waste_generation_23.path, sheet_index, n_max, skip = skip)
  processed_sheets[[sheet_name]] <- processed_sheet
}

processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

generation.23 <- processed_sheets[[1]]

english_colnames <- c(
  "year", "report", "statistical_region",
  "waste_code", "type_of_waste", "total_waste_generated_stored",
  "temporarily_stored_start_year", "generated_in_the_year",
  "temporarily_stored_end_year",
  "waste_treated_by_original_generator",
  "waste_transferred_for_treatment_in_RS", # this are waste collectors, waste treatment operators
  "waste_sent_for_treatment_EU",
  "waste_sent_for_treatment_outside_EU"
)

colnames(generation.23) <- english_colnames

generation.23 <- generation.23 |> select(-report)

generation.23 <- generation.23 |>  process_waste_data()

generation.23 <- generation.23 |>
  group_by(year, statistical_region, waste_code, type_of_waste) |>
  summarise(
    total_waste_generated_stored = sum(total_waste_generated_stored) / 1000, # convert to tons
    temporarily_stored_start_year = sum(temporarily_stored_start_year) / 1000,
    generated_in_the_year = sum(generated_in_the_year) / 1000,
    temporarily_stored_end_year = sum(temporarily_stored_end_year) / 1000,
    waste_treated_by_original_generator = sum(waste_treated_by_original_generator) / 1000,
    waste_transferred_for_treatment_in_RS = sum(waste_transferred_for_treatment_in_RS) / 1000,
    waste_sent_for_treatment_EU = sum(waste_sent_for_treatment_EU) / 1000,
    waste_sent_for_treatment_outside_EU = sum(waste_sent_for_treatment_outside_EU) / 1000
  ) |>
  ungroup()

write.csv(generation.23, "2023 data\\2023 filtered\\generation\\generation_23.csv", row.names = FALSE)
```

#### Plotting the composition of waste generated in the year by types

```{r new_waste_codes}

# Read the data
generation.23 <- read_csv("2023 data\\2023 filtered\\generation\\generation_23.csv")

# Create a named color vector for each waste code
code_colors <- setNames(
  waste_palette[1:length(codes)],  # Assign colors sequentially
  codes                            # To the waste codes
)

# Create a named color vector for each statistical_region
region_colors <- setNames(
  waste_palette[1:length(unique(generation.23$statistical_region))],  # Assign colors sequentially
  unique(generation.23$statistical_region)                            # To the regions
)

# generated_in_the_year + statistical_region ----------------------------------------------------

waste_plot_data <- generation.23 |>
  group_by(statistical_region) |> # can be changed to type_of_waste or statistical_region
  summarise(total_generated = sum(generated_in_the_year, na.rm = TRUE)) |>
  mutate(
    percentage = total_generated/sum(total_generated),
    display_label = paste0(comma(total_generated), " (", percent(percentage, accuracy = 0.01), ")")
  ) |> 
  # Arrange by total_generated first
  arrange(total_generated) |>
  # THEN set factor levels in this order
  mutate(statistical_region = factor(statistical_region, levels = statistical_region)) # can be changed to type_of_waste or statistical_region

# Create the plot with fixed color mapping
ggplot(waste_plot_data, 
       aes(x = total_generated, 
           y = statistical_region,
           fill = statistical_region)) +
  geom_col(width = 0.8, alpha = 0.9) +
  geom_text(
    aes(label = display_label),
    hjust = -0.1, 
    size = 3.5, 
    color = "gray30",
    fontface = "bold"
  ) +
  # Use our fixed color mapping
  scale_fill_manual(values = region_colors) +
  scale_x_continuous(
    expand = expansion(mult = c(0, 0.2)),
    labels = comma_format()
  ) +
  labs(
    title = "WASTE GENERATION BY TYPE (2023)", # title = "WASTE GENERATION BY REGION (2023)",
    subtitle = "Total quantities with percentage contribution",
    x = NULL,
    y = NULL
  ) +
  theme_minimal(base_size = 13) +
  theme(
    legend.position = "none",
    panel.grid.major.y = element_blank(),
    panel.grid.minor = element_blank(),
    plot.title = element_text(
      face = "bold", 
      size = 18, 
      color = "#2c3e50",
      margin = margin(b = 10)
    ),
    plot.subtitle = element_text(
      size = 13, 
      color = "#7f8c8d", 
      margin = margin(b = 20)
    ),
    axis.text.y = element_text(
      color = "#34495e", 
      size = 12,
      hjust = 0
    ),
    # axis.text.x = element_blank(),
    plot.margin = margin(25, 45, 25, 25)
  )

# total_waste_generated_stored + waste_code ------------------------------------------------------

waste_plot_data <- generation.23 |>
  group_by(waste_code) |> # can be changed to type_of_waste or statistical_region
  summarise(total_generated = sum(total_waste_generated_stored, na.rm = TRUE)) |>
  mutate(
    percentage = total_generated/sum(total_generated),
    display_label = paste0(comma(total_generated), " (", percent(percentage, accuracy = 0.01), ")")
  ) |> 
  # Arrange by total_generated first
  arrange(total_generated) |>
  # THEN set factor levels in this order
  mutate(waste_code = factor(waste_code, levels = waste_code)) # can be changed to type_of_waste or statistical_region

# Create the plot with fixed color mapping
ggplot(waste_plot_data, 
       aes(x = total_generated, 
           y = waste_code,
           fill = waste_code)) +
  geom_col(width = 0.8, alpha = 0.9) +
  geom_text(
    aes(label = display_label),
    hjust = -0.1, 
    size = 3.5, 
    color = "gray30",
    fontface = "bold"
  ) +
  # Use our fixed color mapping
  scale_fill_manual(values = code_colors) +
  scale_x_continuous(
    expand = expansion(mult = c(0, 0.2)),
    labels = comma_format()
  ) +
  labs(
    title = "STORED WASTE GENERATION BY TYPE (2023)", # title = "STORED WASTE GENERATION BY REGION (2023)",
    subtitle = "Total quantities with percentage contribution",
    x = NULL,
    y = NULL
  ) +
  theme_minimal(base_size = 13) +
  theme(
    legend.position = "none",
    panel.grid.major.y = element_blank(),
    panel.grid.minor = element_blank(),
    plot.title = element_text(
      face = "bold", 
      size = 18, 
      color = "#2c3e50",
      margin = margin(b = 10)
    ),
    plot.subtitle = element_text(
      size = 13, 
      color = "#7f8c8d", 
      margin = margin(b = 20)
    ),
    axis.text.y = element_text(
      color = "#34495e", 
      size = 12,
      hjust = 0
    ),
    # axis.text.x = element_blank(),
    plot.margin = margin(25, 45, 25, 25)
  )

```

## 2023 - Data on waste collected and its subsequent management from waste collectors' reports

### Code

```{r waste_collection_2023}
waste_collection_23.path <- "2023 data\\podatki LP ODP-zbiranje 2023.xlsx"

sheet_names <- excel_sheets(waste_collection_23.path)

processed_sheets <- list()

sheets_with_n_max_3 <- c(1, 2, 3, 5)

processed_sheets <- lapply(sheet_names, function(sheet_name) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else 2

  if (sheet_index == 1) {
    processed_sheet <- process_sheet(waste_collection_23.path, sheet_index, n_max)
  } else if (sheet_index == 6) {
    processed_sheet <- process_sheet(waste_collection_23.path, sheet_index, 1)
  } else {
    processed_sheet <- process_sheet(waste_collection_23.path, sheet_index, n_max)
  }

  # for the first 5 sheets deselect the last column
  # this is done to skip the candles on graves
  processed_sheets[[sheet_name]] <- if (sheet_index <= 5) {
    processed_sheet[, -ncol(processed_sheet)]
  } else {
    processed_sheet
  }
})

# Applying the function to each data frame in processed_sheets
processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

# Table 1: Waste collected, 2023
collected.23 <- processed_sheets[[1]] |> select(-Poročilo)

collected.23 <- collected.23 |>
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    type_of_waste = `Naziv odpadka`,
    waste_from_producers_no_record = `Zbrani odpadki, prevzetih od izvirnih povzročiteljev brez evidenčnega lista (prepuščeni) kg`,
    waste_from_producers_with_record = `Zbrani odpadki, prevzetih od izvirnih povzročiteljev z evidenčnim listom (oddani) kg`,
    waste_from_collectors_RS = `Zbrani odpadki, prevzetih od drugih imetnikov od zbiralcev v RS kg`,
    waste_from_processors_RS = `Zbrani odpadki, prevzetih od drugih imetnikov od izvajalcev obdelave v RS kg`,
    waste_collected_from_collectors_warehouse = `Odpadki prevzeti iz skladišča zbiralca (stanje na dan 1.1.) kg`
  )

collected.23 <- collected.23 |> process_waste_data()

collected.23 <- collected.23 |>
  mutate(total_waste_collected = waste_from_producers_no_record + waste_from_producers_with_record + waste_from_collectors_RS + waste_from_processors_RS) |>
  mutate(total_waste_collected_including_warehouse = total_waste_collected + waste_collected_from_collectors_warehouse)

collected.23 <- collected.23 |>
  group_by(year, statistical_region, waste_code, type_of_waste) |>
  summarise(
    total_waste_collected = sum(total_waste_collected) / 1000,
    total_waste_collected_including_warehouse = sum(total_waste_collected_including_warehouse) / 1000,
    waste_from_producers_no_record = sum(waste_from_producers_no_record) / 1000,
    waste_from_producers_with_record = sum(waste_from_producers_with_record) / 1000,
    waste_from_collectors_RS = sum(waste_from_collectors_RS) / 1000,
    waste_from_processors_RS = sum(waste_from_processors_RS) / 1000,
    waste_collected_from_collectors_warehouse = sum(waste_collected_from_collectors_warehouse) / 1000
  ) |>
  ungroup()

processed_sheets[[1]] <- collected.23

# Table 1a: Waste collected by collection center, 2023
collected_center.23 <- processed_sheets[[2]] |> select(-Poročilo)

collected_center.23 <- collected_center.23 |>
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    collection_centre = `Zbirni center`,
    type_of_waste = `Naziv odpadka`,
    waste_collected_by_centre = `Zbrani odpadki kg`
  )

collected_center.23 <- collected_center.23 |> process_waste_data()

collected_center.23 <- collected_center.23 |>
  group_by(year, statistical_region, collection_centre, waste_code, type_of_waste) |>
  summarise(waste_collected_by_centre = sum(as.numeric(waste_collected_by_centre)) / 1000) |>
  ungroup()

processed_sheets[[2]] <- collected_center.23

# Table 2: Additional data on municipal waste collected and waste 16 01 03, 2023
collected_additional.23 <- processed_sheets[[3]] |> select(-Poročilo)

collected_additional.23 <- collected_additional.23 |>
  rename(
    year = `Leto`,
    type_of_waste = `Naziv odpadka`,
    # Collected under the public municipal waste collection service
    waste_collected_public_service = `Zbrani v okviru javne službe zbiranja komunalnih odpadkov`,
    total_waste_collected = `Zbrani komunalni odpadki in odpadek 16 01 03 glede na dejavnost nastanka SKUPAJ kg`,
    waste_collected_from_households = `Zbrani komunalni odpadki in odpadek 16 01 03 glede na dejavnost nastanka iz gospodinjstev kg`,
    waste_collected_from_activities = `Zbrani komunalni odpadki in odpadek 16 01 03 glede na dejavnost nastanka iz dejavnosti kg`
  )

collected_additional.23 <- collected_additional.23 |> process_waste_data()

# rename the content of waste_collected_public service, if there is a "da" put yes, if there is a "ne" put no
collected_additional.23 <- collected_additional.23 |>
  mutate(waste_collected_public_service = case_when(
    waste_collected_public_service == "da" ~ "yes",
    waste_collected_public_service == "ne" ~ "no"
  ))

collected_additional.23 <- collected_additional.23 |>
  group_by(year, waste_code, type_of_waste, waste_collected_public_service) |>
  summarise(
    total_waste_collected = sum(total_waste_collected) / 1000,
    waste_collected_from_households = sum(waste_collected_from_households) / 1000,
    waste_collected_from_activities = sum(waste_collected_from_activities) / 1000
  ) |>
  ungroup()

processed_sheets[[3]] <- collected_additional.23

# Table 3: Municipal waste collected and waste 16 01 03, separated by municipality of origin, 2023
collected_municipality.23 <- processed_sheets[[4]] |> select(-Poročilo, -`Šifra občine 1`)

collected_municipality.23 <- collected_municipality.23 |>
  rename(
    year = `Leto`,
    type_of_waste = `Naziv odpadka`,
    waste_collected_public_service = `Zbrani v okviru javne službe zbiranja komunalnih odpadkov`,
    waste_by_municipality = `Komunalni odpadki in odpadek 16 01 03 po občini izvora kg`,
    name_of_municipality = `Naziv občine`
  )

collected_municipality.23 <- collected_municipality.23 |> process_waste_data()

# rename the content of waste_collected_public service, if there is a "da" put yes, if there is a "ne" put no
collected_municipality.23 <- collected_municipality.23 |>
  mutate(waste_collected_public_service = case_when(
    waste_collected_public_service == "da" ~ "yes",
    waste_collected_public_service == "ne" ~ "no"
  ))

# add the statistical region to the collected_municipality.23
collected_municipality.23 <- collected_municipality.23 |>
  left_join(municipality_region_mapping, by = "name_of_municipality")

collected_municipality.23 <- collected_municipality.23 |>
  group_by(year, statistical_region, waste_code, type_of_waste, name_of_municipality, waste_collected_public_service) |>
  summarise(waste_by_municipality = sum(waste_by_municipality) / 1000) |>
  ungroup()

processed_sheets[[4]] <- collected_municipality.23

# Table 4: Further management of collected waste, 2023
collected_management.23 <- processed_sheets[[5]] |> select(-Poročilo)

collected_management.23 <- collected_management.23 |>
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    type_of_waste = `Naziv odpadka`,
    waste_handed_to_collectors_RS = `Odpadki, oddani v nadaljnje ravnanje zbiralcem v RS kg`,
    waste_delivered_to_operators_RS = `Odpadki, oddani v nadaljnje ravnanje izvajalcem obdelave v RS kg`,
    waste_sent_to_EU = `Odpadki, oddani v nadaljnje ravnanje v druge države članice EU kg`,
    waste_sent_to_non_EU = `Odpadki, oddani v nadaljnje ravnanje v države izven EU kg`,
    # or delivered to the collector's warehouse
    waste_delivered_to_collectors_warehouse = `Odpadki oddani v skladišče zbiralca (stanje na dan 31.12.)`
  )

# we will exclude waste_delivered_to_collectors_warehouse
# collected_management.23 <- collected_management.23 |> select(-waste_delivered_to_collectors_warehouse)

collected_management.23 <- collected_management.23 |> process_waste_data()

collected_management.23 <- collected_management.23 |>
  mutate(
    total_waste_given_away = waste_handed_to_collectors_RS + waste_delivered_to_operators_RS + waste_sent_to_EU + waste_sent_to_non_EU + waste_delivered_to_collectors_warehouse
  )

collected_management.23 <- collected_management.23 |>
  group_by(year, statistical_region, waste_code, type_of_waste) |>
  summarise(
    total_waste_given_away = sum(total_waste_given_away) / 1000,
    waste_handed_to_collectors_RS = sum(waste_handed_to_collectors_RS) / 1000,
    waste_delivered_to_operators_RS = sum(waste_delivered_to_operators_RS) / 1000,
    waste_sent_to_EU = sum(waste_sent_to_EU) / 1000,
    waste_sent_to_non_EU = sum(waste_sent_to_non_EU) / 1000,
    waste_delivered_to_collectors_warehouse = sum(waste_delivered_to_collectors_warehouse) / 1000
  ) |>
  ungroup()

processed_sheets[[5]] <- collected_management.23

# Table 5: Household composting, 2023

household_composting.23 <- processed_sheets[[6]] |> select(-Poročilo, -`Šifra občine 1`)

household_composting.23 <- household_composting.23 |>
  rename(
    year = `Leto`,
    name_of_municipality = `Naziv občine`,
    number_of_households_in_municipality = `Število gospodinjstev v občini 2`,
    number_of_households_composting = `Število gospodinjstev, ki hišno kompostirajo`
  )

# add another column that would be just the percentage of households composting
household_composting.23 <- household_composting.23 |>
  mutate(percentage_of_households_composting = round(number_of_households_composting / number_of_households_in_municipality * 100, 2))

processed_sheets[[6]] <- household_composting.23

# Tabela 6: Dodatni podatki o odpadnih oljih, 2023

sheet_names <- c(
  "Waste received",
  "Waste received by collection center",
  "Waste source of generation",
  "Waste municipality of origin",
  "Municipal waste management",
  "Household composting"
)

# add the new names
names(processed_sheets) <- sheet_names

# For each sheet in processed_sheets, write the data to a .csv file
for (sheet_name in sheet_names) {
  write_excel_csv(processed_sheets[[sheet_name]], paste0("2023 data\\2023 filtered\\collection\\", tolower(gsub(" ", "_", sheet_name)), "_23.csv"))
}
```

## 2023 - Data from waste treatment operators' reports

### Code

```{r waste_treatment_2023}
waste_treatment_23.path <- "2023 data\\podatki LP ODP-obdelava 2023.xlsx"

sheet_names <- excel_sheets(waste_treatment_23.path)

processed_sheets <- list()

sheets_with_n_max_3 <- c(2, 3, 5, 6, 7, 9)

sheets_with_n_max_4 <- 11

processed_sheets <- lapply(sheet_names, function(sheet_name) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else if (sheet_index == sheets_with_n_max_4) 4 else 2

  processed_sheet <- process_sheet(waste_treatment_23.path, sheet_index, n_max)

  processed_sheets[[sheet_name]] <- processed_sheet
})

processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

# Table 1: Storage of waste/materials or objects generated in the treatment process in previous years, as at 1.1., 2023
treatment.23 <- processed_sheets[[1]] |> select(-Poročilo, -`Odpadne sveče pri odpadku 20 02 03 (da/ne)`)

treatment.23 <- treatment.23 |>
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    type_of_waste_inlet = `Naziv odpadka na vhodu v postopek obdelave`,
    type_of_waste_outlet = `Naziv v postopku obdelave nastalih odpadkov`,
    substance_or_object = `V postopku obdelave nastala snov ali predmet`,
    quantity_stored_start_year = `Skladiščena količina na dan 1.1.2023 kg`
  )

# Apply to both columns
treatment.23 <- treatment.23 |>
  process_waste_column(treatment_inlet_waste_code, type_of_waste_inlet) |>
  process_waste_column(treatment_outlet_waste_code, type_of_waste_outlet)

treatment.23 <- rename_substances(treatment.23)

# Or get just the unique codes that weren't matched
missing_input_codes <- treatment.23 |>
  filter(is.na(type_of_waste_inlet)) |>
  distinct(treatment_inlet_waste_code) |>
  pull()

missing_output_codes <- treatment.23 |>
  filter(is.na(type_of_waste_outlet)) |>
  distinct(treatment_outlet_waste_code) |>
  pull()

# Print them
cat("Unmatched input waste codes:\n")
print(missing_input_codes)

cat("\nUnmatched output waste codes:\n")
print(missing_output_codes)

# if both type_of_waste_inlet and type_of_waste_outlet are NA in the same row, we can remove one of them
treatment.23 <- treatment.23 |>
  filter(!(is.na(type_of_waste_inlet) & is.na(type_of_waste_outlet)))

# if any column has NA, then write undefined
treatment.23[] <- lapply(treatment.23, function(x) ifelse(is.na(x), "undefined", x))

treatment.23 <- treatment.23 |>
  group_by(year, statistical_region, treatment_inlet_waste_code, type_of_waste_inlet, treatment_outlet_waste_code, type_of_waste_outlet, substance_or_object) |>
  summarise(quantity_stored_start_year = sum(quantity_stored_start_year) / 1000) |>
  ungroup()

processed_sheets[[1]] <- treatment.23

# Table 2: Waste received, 2023
treatment_received.23 <- processed_sheets[[2]] |> select(-Poročilo, -`Odpadne sveče pri odpadku 20 02 03 (da/ne)`)

treatment_received.23 <- treatment_received.23 |>
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    type_of_waste = `Naziv odpadka`,
    # total
    total_waste_received = `Prevzeti odpadki SKUPAJ kg`,
    untreated_waste_from_storage_start_year = `Prevzeti odpadki neobdelani odpadki iz skladišča (stanje na dan 1.1.) kg`,
    waste_received_own_waste = `Prevzeti odpadki lastni odpadki kg`,
    # generators
    waste_received_from_generators = `Prevzeti odpadki od drugih izvirnih povzročiteljev v RS kg`,
    # collectors
    waste_received_from_collectors = `Prevzeti odpadki od zbiralcev odpadkov v RS kg`,
    # treatment operators
    waste_received_from_treatment = `Prevzeti odpadki od izvajalcev obdelave v RS kg`,
    waste_received_from_EU = `Prevzeti odpadki iz drugih držav članic EU kg`,
    waste_received_from_non_EU = `Prevzeti odpadki iz držav izven EU kg`
  )

treatment_received.23 <- treatment_received.23 |> process_waste_data()

treatment_received.23 <- treatment_received.23 |>
  group_by(year, statistical_region, waste_code, type_of_waste) |>
  summarize(
    total_waste_received = sum(as.numeric(total_waste_received)) / 1000,
    untreated_waste_from_storage_start_year = sum(as.numeric(untreated_waste_from_storage_start_year)) / 1000,
    waste_received_own_waste = sum(as.numeric(waste_received_own_waste)) / 1000,
    waste_received_from_generators = sum(as.numeric(waste_received_from_generators)) / 1000,
    waste_received_from_collectors = sum(as.numeric(waste_received_from_collectors)) / 1000,
    waste_received_from_treatment = sum(as.numeric(waste_received_from_treatment)) / 1000,
    waste_received_from_EU = sum(as.numeric(waste_received_from_EU)) / 1000,
    waste_received_from_non_EU = sum(as.numeric(waste_received_from_non_EU)) / 1000
  ) |>
  ungroup()

processed_sheets[[2]] <- treatment_received.23

# EXCLUDED - Table 2a: Recovered end-of-life vehicles (ELV) of categories M1, N1 and three-wheel motor vehicles (L2e), 2023
treatment_ELVs.23 <- processed_sheets[[3]] |> select(-Poročilo)

# Table 3: Treatment of waste received, 2023
waste_treated.23 <- processed_sheets[[4]] |> select(-Poročilo, -`Odpadne sveče pri odpadku 20 02 03 (da/ne)`)

waste_treated.23 <- waste_treated.23 |>
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    type_of_waste = `Naziv odpadka na vhodu v postopek obdelave`,
    quantity_treated = `Količina odpadkov, na vhod v postopek obdelave (kg)`,
    treatment_code = `Postopek obdelave (R, D)`,
    description_of_treatment = `Opis postopka obdelave`
  )

waste_treated.23 <- waste_treated.23 |> categorize_waste(waste_code_col = "treatment_inlet_waste_code")

waste_treated.23 <- rename_treatment_description(waste_treated.23)

waste_treated.23 <- waste_treated.23 |>
  group_by(year, statistical_region, treatment_inlet_waste_code, type_of_waste, treatment_code, description_of_treatment) |>
  summarise(quantity_treated = sum(quantity_treated) / 1000) |>
  ungroup()

processed_sheets[[4]] <- waste_treated.23

# Table 4: Management of waste from the treatment process and management of untreated waste, 2023
management.23 <- processed_sheets[[5]] |> select(-Poročilo, -`Odpadne sveče pri odpadku 20 02 03 (da/ne)`)

management.23 <- management.23 |>
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    input_waste_name = `Odpadki na vhodu v obdelavo in prevzeti neobdelani odpadki naziv`,
    treatment_operation = `Postopek obdelave (R/D)`,
    output_waste_name = `Odpadki na izhodu iz postopka obdelave in oddani neobdelani odpadki naziv`,
    waste_sent_to_self_storage_end_year = `Odpadki, oddani v nadaljnje ravnanje sami sebi v skladiščenje (stanje na dan 31.12.) kg`,
    waste_sent_to_collector_SI = `Odpadki, oddani v nadaljnje ravnanje zbiralcu odpadkov v SI kg`,
    waste_sent_to_treatment_operator = `Odpadki, oddani v nadaljnje ravnanje izvajalcu obdelave v SI kg`,
    waste_sent_to_EU_member_states = `Odpadki, oddani v nadaljnje ravnanje v druge države članice EU kg`,
    waste_sent_to_non_EU_countries = `Odpadki, oddani v nadaljnje ravnanje v države izven EU kg`,
    waste_sent_to_no_further_management = `Odpadki, oddani v nadaljnje ravnanje ni nadaljnjega ravnanja (vnos v/na tla, odlaganje na odlagališču) kg`,
    further_treatment_envisaged = `Predviden nadaljnji postopek obdelave (R/D)`
  )

# treatment operations:
# https://wastesupport.co.uk/recovery-and-disposal-codes.php/

management.23 <- management.23 |>
  process_waste_column(treatment_inlet_delivered_waste_code, input_waste_name) |>
  process_waste_column(treatment_outlet_delivered_waste_code, output_waste_name)

management.23 <- management.23 |>
  group_by(year, statistical_region, treatment_inlet_delivered_waste_code, input_waste_name, treatment_operation, treatment_outlet_delivered_waste_code, output_waste_name, further_treatment_envisaged) |>
  summarise(
    waste_sent_to_self_storage_end_year = sum(waste_sent_to_self_storage_end_year) / 1000,
    waste_sent_to_collector_SI = sum(waste_sent_to_collector_SI) / 1000,
    waste_sent_to_treatment_operator = sum(waste_sent_to_treatment_operator) / 1000,
    waste_sent_to_EU_member_states = sum(waste_sent_to_EU_member_states) / 1000,
    waste_sent_to_non_EU_countries = sum(waste_sent_to_non_EU_countries) / 1000,
    waste_sent_to_no_further_management = sum(waste_sent_to_no_further_management) / 1000
  ) |>
  ungroup()

# Or get just the unique codes that weren't matched
missing_input_codes <- management.23 |>
  filter(is.na(input_waste_name)) |>
  distinct(treatment_inlet_delivered_waste_code) |>
  pull()

missing_output_codes <- management.23 |>
  filter(is.na(output_waste_name)) |>
  distinct(treatment_outlet_delivered_waste_code) |>
  pull()

# Print them
cat("Unmatched input waste codes:\n")
print(missing_input_codes)

cat("\nUnmatched output waste codes:\n")
print(missing_output_codes)

processed_sheets[[5]] <- management.23

# Table 4a: Management of treatment products that are no longer waste, 2023
management_products.23 <- processed_sheets[[6]] |> select(-Poročilo)

management_products.23 <- management_products.23 |>
  rename(
    year = `Leto`,
    statistical_region = `Poročilo Statistična regija`,
    type_of_waste = `Odpadki na vhodu v obdelavo naziv`,
    treatment_operation = `Postopek obdelave (R/D)`,
    non_waste_substances = `V postopku obdelave nastale snovi in predmeti, ki niso več odpadki`,
    storage_operator_end_year = `Količina nastalih snovi in predmetov oddana v skladiščenje pri izvajalcu obdelave (stanje na dan 31.12.) kg`,
    delivered_company_and_person_RS_kg = `Količina nastalih snovi in predmetov oddana podjetju in fizični osebi v RS kg`,
    delivered_to_EU = `Količina nastalih snovi in predmetov oddana podjetju v drugi državi članici EU kg`,
    delivered_to_non_EU = `Količina nastalih snovi in predmetov oddana podjetju v državi izven EU kg`
  )

management_products.23 <- rename_waste_names(management_products.23, "type_of_waste")

# drop rows containing NA values
management_products.23 <- management_products.23 |>
  filter(!is.na(type_of_waste))

management_products.23 <- management_products.23 |>
  group_by(year, statistical_region, type_of_waste, treatment_operation, non_waste_substances) |>
  summarise(
    storage_operator_end_year = sum(storage_operator_end_year) / 1000,
    delivered_company_and_person_RS_kg = sum(delivered_company_and_person_RS_kg) / 1000,
    delivered_to_EU = sum(delivered_to_EU) / 1000,
    delivered_to_non_EU = sum(delivered_to_non_EU) / 1000
  ) |>
  ungroup()

# rename the non_waste_substances column
management_products.23 <- management_products.23 |>
  mutate(non_waste_substances = case_when(
    non_waste_substances == "99 – drugo" ~ "other",
    non_waste_substances == "16 – kompost (proizvod)" ~ "compost (product)",
    non_waste_substances == "7 – les" ~ "wood",
    non_waste_substances == "5 – papir in karton" ~ "paper and cardboard",
    non_waste_substances == "11 – tekstil in usnje" ~ "textiles and leather"
  ))

processed_sheets[[6]] <- management_products.23

# EXCLUDED - Table 4b: Materials resulting from the shredding of dismantled end-of-life vehicles (ELVs) of categories M1, N1 and three-wheel motor vehicles (L2e), 2023
ELV_materials.23 <- processed_sheets[[7]] |> select(-Poročilo)

# EXCLUDED - Table 5: Mechanical-biological treatment of mixed municipal waste, separated by municipality of origin, 2023
MBT_municipality.23 <- processed_sheets[[8]] |> select(-Poročilo)

# Table 6: Mass difference between waste input and treatment product volumes, 2023
mass_difference.23 <- processed_sheets[[9]] |> select(-Poročilo, -`Odpadne sveče pri odpadku 20 02 03 (da/ne)`)

mass_difference.23 <- mass_difference.23 |>
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    input_waste_name = `Odpadek na vhodu v postopek obdelave naziv`,
    treatment_operation = `Postopek obdelave (R/D)`,
    mass_difference = `Zmanjšanje ali povečanje mase med postopkom obdelave (kg)`
  )

mass_difference.23 <- rename_waste_names(mass_difference.23, "input_waste_name")

mass_difference.23 <- mass_difference.23 |>
  group_by(year, statistical_region, input_waste_name, treatment_operation) |>
  summarise(mass_difference = sum(mass_difference) / 1000) |>
  ungroup()

processed_sheets[[9]] <- mass_difference.23

# EXCLUDED - Table 7: Landfill capacity and status, 2023
landfill_capacity.23 <- processed_sheets[[10]] |> select(-Poročilo)

# Table 8: Waste management in landfill, 2023
landfill_management.23 <- processed_sheets[[11]] |> select(-Poročilo)

landfill_management.23 <- landfill_management.23 |>
  rename(
    year = `Leto`,
    landfill = `Odlagališče`,
    type_of_waste = `Naziv odpadka`,
    total_waste_received = `Prevzeti odpadki vsi odpadki kg`,
    waste_without_waste_code = `Prevzeti odpadki od tega odpadki brez ocene odpadka kg`,
    waste_disposed_on_landfill = `Ravnanje z odpadki na odlagališču Odloženi odpadki (D1) skupaj kg`,
    hazardous_waste_disposed_on_landfill = `Ravnanje z odpadki na odlagališču nevarni odpadki kg`,
    non_hazardous_waste_disposed_on_landfill = `Ravnanje z odpadki na odlagališču nenevarni odpadki kg`,
    inert_waste_disposed_on_landfill = `Ravnanje z odpadki na odlagališču inertni odpadki kg`,
    construction_waste_disposed_on_landfill = `Ravnanje z odpadki na odlagališču Odpadki za gradnjo objektov odlagališča kg`,
    landfill_covering_waste_disposed_on_landfill = `Ravnanje z odpadki na odlagališču Odpadki za prekrivanje odlagališča kg`
  )

landfill_management.23 <- landfill_management.23 |>
  group_by(year, landfill, type_of_waste) |>
  summarise(
    total_waste_received = sum(total_waste_received) / 1000,
    waste_without_waste_code = sum(waste_without_waste_code) / 1000,
    waste_disposed_on_landfill = sum(waste_disposed_on_landfill) / 1000,
    hazardous_waste_disposed_on_landfill = sum(hazardous_waste_disposed_on_landfill) / 1000,
    non_hazardous_waste_disposed_on_landfill = sum(non_hazardous_waste_disposed_on_landfill) / 1000,
    inert_waste_disposed_on_landfill = sum(inert_waste_disposed_on_landfill) / 1000,
    construction_waste_disposed_on_landfill = sum(construction_waste_disposed_on_landfill) / 1000,
    landfill_covering_waste_disposed_on_landfill = sum(landfill_covering_waste_disposed_on_landfill) / 1000
  ) |>
  ungroup()

processed_sheets[[11]] <- landfill_management.23

# EXCLUDED - Table 9: Disposed waste resulting from municipal waste treatment (from mechanical-biological treatment of mixed municipal waste and from treatment operations of separated fractions of municipal waste), by municipality of origin, 2023
disposed_municipality.23 <- processed_sheets[[12]] |> select(-Poročilo)

# EXCLUDED - Table 10: Compost or digestate production, 2023
compost_digestate.23 <- processed_sheets[[13]] |> select(-Poročilo)

# EXCLUDED - Table 11: Use of compost or digestate as waste, 2023
compost_digestate_use.23 <- processed_sheets[[14]] |> select(-Poročilo)

# # EXCLUDED - Table 12: Additional data on waste oils, 2023
waste_oils.23 <- processed_sheets[[15]] |> select(-Poročilo)

sheet_names <- c(
  "Prev Treatment", # Sheet 1
  "Waste Received", # Sheet 2
  "EXCLUDED_Table2a_ELVs", # Sheet 3
  "Waste Treatment", # Sheet 4
  "Waste Management", # Sheet 5
  "Waste Management Products", # Sheet 6
  "EXCLUDED_Table4b_ELVMaterials", # Sheet 7
  "EXCLUDED_Table5_MBTMunicipality", # Sheet 8
  "Mass Diff", # Sheet 9
  "Landfill Capacity", # Sheet 10
  "Landfill Management", # Sheet 11
  "EXCLUDED_Table9_DisposedMunicipality", # Sheet 12
  "EXCLUDED_Table10_Compost", # Sheet 13
  "EXCLUDED_Table11_CompostUse", # Sheet 14
  "EXCLUDED_Table12_WasteOils" # Sheet 15
)

# add the new names
names(processed_sheets) <- sheet_names

for (sheet_name in sheet_names) {
  write_excel_csv(processed_sheets[[sheet_name]], paste0("2023 data\\2023 filtered\\treatment\\", tolower(gsub(" ", "_", sheet_name)), "_23.csv"))
}
```

# Year 2022

## 2022 - Data from the annual reports of the original generators

### Code

```{r waste_generation_2022}
# Specify the path to the Excel file
waste_generation_22.path <- "2022 data\\podatki LP ODP-nastajanje 2022.xlsx"

# Get the sheet names
sheet_names <- excel_sheets(waste_generation_22.path)

# Initialize a list to store processed sheets
processed_sheets <- list()

# Define the sheets where n_max should be 3 (replace with actual sheet indices)
# if needed
sheets_with_n_max_3 <- c(2, 3, 5)

# Loop through each sheet
for (sheet_name in sheet_names) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else 2
  processed_sheet <- process_sheet(waste_generation_22.path, sheet_index, n_max)
  processed_sheets[[sheet_name]] <- processed_sheet
}

# Applying the function to each data frame in processed_sheets
processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

generation.22 <- processed_sheets[[1]]

english_colnames <- c(
  "year", "report", "statistical_region",
  "waste_code", "type_of_waste", "total_waste_generated_stored",
  "temporarily_stored_start_year", "generated_in_the_year",
  "temporarily_stored_end_year",
  "waste_treated_by_original_generator",
  "waste_transferred_for_treatment_in_RS",
  "waste_sent_for_treatment_EU",
  "waste_sent_for_treatment_outside_EU"
)

# Rename the columns
colnames(generation.22) <- english_colnames

generation.22 <- generation.22 |> select(-report)

# Rename the waste names
generation.22 <- categorize_waste(generation.22, waste_code_col = "waste_code")

# show codes and their respective waste names
generation.22 |>
  distinct(waste_code, type_of_waste)

generation.22 |>
  filter(statistical_region == "GORENJSKA")

# change to tons
generation.22 <- generation.22 |>
  group_by(year, statistical_region, type_of_waste) |>
  summarise(
    total_waste_generated_stored = sum(total_waste_generated_stored) / 1000,
    temporarily_stored_start_year = sum(temporarily_stored_start_year) / 1000,
    generated_in_the_year = sum(generated_in_the_year) / 1000,
    temporarily_stored_end_year = sum(temporarily_stored_end_year) / 1000,
    waste_treated_by_original_generator = sum(waste_treated_by_original_generator) / 1000,
    waste_transferred_for_treatment_in_RS = sum(waste_transferred_for_treatment_in_RS) / 1000,
    waste_sent_for_treatment_EU = sum(waste_sent_for_treatment_EU) / 1000,
    waste_sent_for_treatment_outside_EU = sum(waste_sent_for_treatment_outside_EU) / 1000
  ) |>
  ungroup()

# Save as .csv to the generation folder
write.csv(generation.22, "2022 data\\2022 filtered\\generation\\generation_22.csv", row.names = FALSE)
```

## 2022 - Data on waste collected and its subsequent management from waste collectors' reports

### Code

```{r waste_collection_2022}
# Specify the path to the Excel file
waste_collection_22.path <- "2022 data\\podatki LP ODP-zbiranje 2022.xlsx"

# Get the sheet names
sheet_names <- excel_sheets(waste_collection_22.path)

# Initialize a list to store processed sheets
processed_sheets <- list()

# Define the sheets where n_max should be 3 (replace with actual sheet indices)
# if needed
sheets_with_n_max_3 <- c(2, 3, 5)

# header is 8 in this case
skip <- 8

processed_sheets <- lapply(sheet_names, function(sheet_name) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else 2

  if (sheet_index == 1) {
    processed_sheet <- process_sheet(waste_collection_22.path, sheet_index, n_max, skip)
  } else if (sheet_index == 6) {
    processed_sheet <- process_sheet(waste_collection_22.path, sheet_index, 1)
  } else {
    processed_sheet <- process_sheet(waste_collection_22.path, sheet_index, n_max)
  }

  # for the first 5 sheets deselect the last column
  # this is done to skip the candles on graves
  processed_sheets[[sheet_name]] <- if (sheet_index <= 5) {
    processed_sheet[, -ncol(processed_sheet)]
  } else {
    processed_sheet
  }
})

# Applying the function to each data frame in processed_sheets
processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

# Pre-storage of waste
pre_collection.22 <- processed_sheets[[1]] |> select(-Poročilo)

pre_collection.22 <- pre_collection.22 |>
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    type_of_waste = `Naziv odpadka`,
    previous_stored_start_year = `Predhodno skladiščenje - količina skladiščenih odpadkov na dan 1.1.2022 kg`,
    previous_stored_end_year = `Predhodno skladiščenje - količina skladiščenih odpadkov na dan 31.12.2022 kg`
  )

pre_collection.22 <- categorize_waste(pre_collection.22, waste_code_col = "waste_code")

pre_collection.22 <- pre_collection.22 |>
  mutate(
    previous_stored_start_year = as.numeric(previous_stored_start_year) / 1000,
    previous_stored_end_year = as.numeric(previous_stored_end_year) / 1000
  )

processed_sheets[[1]] <- pre_collection.22 

# Waste collected
collected.22 <- processed_sheets[[2]] |> select(-Poročilo)

collected.22 <- collected.22 |>
  rename(
    statistical_region = `Statistična regija`,
    year = `Leto`,
    type_of_waste = `Naziv odpadka`,
    waste_from_producers_no_record = `Zbrani odpadki, prevzeti od izvirnih povzročiteljev brez evidenčnega lista (prepuščeni) kg`,
    waste_from_producers_with_record = `Zbrani odpadki, prevzeti od izvirnih povzročiteljev z evidenčnim listom (oddani) kg`,
    waste_from_collectors_RS = `Zbrani odpadki prevzeti od drugih imetnikov od zbiralcev v RS kg`,
    waste_from_processors_RS = `Zbrani odpadki prevzeti od drugih imetnikov od izvajalcev obdelave v RS kg`
  )

collected.22 <- categorize_waste(collected.22, waste_code_col = "waste_code")

collected.22 <- collected.22 |>
  mutate(total_waste_collected = waste_from_producers_no_record + waste_from_producers_with_record + waste_from_collectors_RS + waste_from_processors_RS)

collected.22 <- collected.22 |>
  group_by(year, statistical_region, waste_code, type_of_waste) |>
  mutate(
    total_waste_collected = as.numeric(total_waste_collected) / 1000,
    waste_from_producers_no_record = as.numeric(waste_from_producers_no_record) / 1000,
    waste_from_producers_with_record = as.numeric(waste_from_producers_with_record) / 1000,
    waste_from_collectors_RS = as.numeric(waste_from_collectors_RS) / 1000,
    waste_from_processors_RS = as.numeric(waste_from_processors_RS) / 1000
  ) |>
  ungroup()

processed_sheets[[2]] <- collected.22 |> select(
  year,
  statistical_region,
  waste_code,
  type_of_waste,
  total_waste_collected,
  waste_from_producers_no_record,
  waste_from_producers_with_record,
  waste_from_collectors_RS,
  waste_from_processors_RS
)

# Municipal waste collected by source of generation
collected_mun.22 <- processed_sheets[[3]] |> select(-Poročilo)

# TOTAL WASTE AND WASTE 16 01 03
collected_mun.22 <- collected_mun.22 |>
  rename(
    year = `Leto`,
    type_of_waste = `Naziv odpadka`,
    total_mun_waste_collected = `Zbrani komunalni odpadki in odpadek 16 01 03 glede na dejavnost nastanka SKUPAJ kg`,
    mun_waste_collected_by_househoulds_gen = `Zbrani komunalni odpadki in odpadek 16 01 03 glede na dejavnost nastanka iz gospodinjstev kg`,
    mun_waste_collected_by_companies_gen = `Zbrani komunalni odpadki in odpadek 16 01 03 glede na dejavnost nastanka iz dejavnosti kg`
  )

collected_mun.22 <- categorize_waste(collected_mun.22, waste_code_col = "waste_code")

collected_mun.22 <- collected_mun.22 |>
  mutate(
    total_mun_waste_collected = as.numeric(total_mun_waste_collected) / 1000,
    mun_waste_collected_by_househoulds_gen = as.numeric(mun_waste_collected_by_househoulds_gen) / 1000,
    mun_waste_collected_by_companies_gen = as.numeric(mun_waste_collected_by_companies_gen) / 1000
  )

processed_sheets[[3]] <- collected_mun.22

# Municipal waste collected by municipality of origin
collected_org_mun.22 <- processed_sheets[[4]] |> select(-Poročilo, -`Šifra občine 1`)

collected_org_mun.22 <- collected_org_mun.22 |>
  rename(
    year = `Leto`,
    type_of_waste = `Naziv odpadka`,
    name_of_municipality = `Naziv občine`,
    waste_by_municipality = `Komunalni odpadki in odpadek 16 01 03 po občini izvora kg`
  )

collected_org_mun.22 <- categorize_waste(collected_org_mun.22, waste_code_col = "waste_code")

# add the statistical region to the collected_org_mun.22
collected_org_mun.22 <- collected_org_mun.22 |>
  left_join(municipality_region_mapping, by = "name_of_municipality")

collected_org_mun.22 <- collected_org_mun.22 |>
  group_by(year, statistical_region, waste_code, type_of_waste, name_of_municipality) |>
  summarise(waste_by_municipality = sum(waste_by_municipality) / 1000) |>
  ungroup()

find_municipality_with_most_waste(GORENJSKA, collected_org_mun.22)
list_of_waste_by_municipality(GORENJSKA, collected_org_mun.22)

processed_sheets[[4]] <- collected_org_mun.22

# Management of collected waste
management.22 <- processed_sheets[[5]] |> select(-Poročilo)

management.22 <- management.22 |>
  rename(
    statistical_region = `Statistična regija`,
    year = `Leto`,
    type_of_waste = `Naziv odpadka`,
    waste_handed_to_collectors_RS = `Odpadki, oddani v nadaljnje ravnanje zbiralcem v RS kg`,
    waste_delivered_to_operators_RS = `Odpadki, oddani v nadaljnje ravnanje izvajalcem obdelave v RS kg`,
    waste_sent_to_EU = `Odpadki, oddani v nadaljnje ravnanje v druge države članice EU kg`,
    waste_sent_to_non_EU = `Odpadki, oddani v nadaljnje ravnanje v države izven EU kg`
  )

management.22 <- categorize_waste(management.22, waste_code_col = "waste_code")

management.22 <- management.22 |>
  mutate(
    total_waste_given_away = waste_handed_to_collectors_RS + waste_delivered_to_operators_RS + waste_sent_to_EU + waste_sent_to_non_EU
  )

management.22 <- management.22 |>
  group_by(year, statistical_region, type_of_waste) |>
  mutate(
    total_waste_given_away = as.numeric(total_waste_given_away) / 1000,
    waste_handed_to_collectors_RS = as.numeric(waste_handed_to_collectors_RS) / 1000,
    waste_delivered_to_operators_RS = as.numeric(waste_delivered_to_operators_RS) / 1000,
    waste_sent_to_EU = as.numeric(waste_sent_to_EU) / 1000,
    waste_sent_to_non_EU = as.numeric(waste_sent_to_non_EU) / 1000
  ) |>
  ungroup()

management.22 <- management.22 

processed_sheets[[5]] <- management.22 |> select(year, statistical_region, waste_code, type_of_waste, total_waste_given_away, waste_handed_to_collectors_RS, waste_delivered_to_operators_RS, waste_sent_to_EU, waste_sent_to_non_EU)

# Household composting
composting.22 <- processed_sheets[[6]] |> select(-Poročilo, -`Šifra občine 1`)

composting.22 <- composting.22 |>
  rename(
    year = `Leto`,
    name_of_municipality = `Naziv občine`,
    number_of_households = `Število gospodinjstev v občini 2`,
    number_of_households_composting = `Število gospodinjstev, ki hišno kompostirajo`
  )

# add another column that would be just the percentage of households composting
composting.22 <- composting.22 |>
  mutate(percentage_of_households_composting = round(number_of_households_composting / number_of_households * 100, 2))

processed_sheets[[6]] <- composting.22

# waste oils EXCLUDED
waste_oils.22 <- processed_sheets[[7]]

sheet_names <- c(
  "Waste storage",
  "Waste received",
  "Waste source of generation",
  "Waste municipality of origin",
  "Municipal waste management",
  "Household composting"
)

# add the new names
names(processed_sheets) <- sheet_names

# For each sheet in processed_sheets, write the data to a .csv file
for (sheet_name in sheet_names) {
  write_excel_csv(processed_sheets[[sheet_name]], paste0("2022 data\\2022 filtered\\collection\\", tolower(gsub(" ", "_", sheet_name)), "_22.csv"))
}
```

## 2022 - Data from waste treatment operators' reports

### Code

```{r waste_treatment_2022}
# Specify the path to the Excel file
waste_treatment_22.path <- "2022 data\\podatki LP ODP-obdelava 2022.xlsx"

# Get the sheet names
sheet_names <- excel_sheets(waste_treatment_22.path)

# Initialize a list to store processed sheets
processed_sheets <- list()

# Define the sheets where n_max should be 3 (replace with actual sheet indices)
# if needed
sheets_with_n_max_3 <- c(2, 4, 5, 7)

sheets_with_n_max_4 <- 9

processed_sheets <- lapply(sheet_names, function(sheet_name) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else if (sheet_index == sheets_with_n_max_4) 4 else 2

  processed_sheet <- process_sheet(waste_treatment_22.path, sheet_index, n_max)

  processed_sheets[[sheet_name]] <- processed_sheet
})

processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

# Treatment in previous years, as of 1.1.2022
treatment.22 <- processed_sheets[[1]] |> select(-Poročilo)

treatment.22 <- treatment.22 |>
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    type_of_waste = `Naziv odpadka`,
    substance_or_object = `V postopku obdelave nastala snov ali predmet`,
    quantity_stored_start_year = `Skladiščena količina na dan 1.1.2022 kg`
  )

treatment.22 <- categorize_waste(treatment.22, waste_code_col = "waste_code")

treatment.22 <- rename_substances(treatment.22)

# change to tons
treatment.22 <- treatment.22 |>
  mutate(quantity_stored_start_year = as.numeric(quantity_stored_start_year) / 1000)

# drop the rows containing NA values in the waste_code column
treatment.22 <- treatment.22 |>
  filter(!is.na(waste_code))

# if any column has NA, then write undefined
treatment.22[] <- lapply(treatment.22, function(x) ifelse(is.na(x), "undefined", x))

processed_sheets[[1]] <- treatment.22 

# Waste received
waste_received.22 <- processed_sheets[[2]] |> select(-Poročilo, -`Odpadne sveče pri odpadku 20 02 03 (da/ne)`, -`Predviden postopek obdelave (R, D)`)

waste_received.22 <- waste_received.22 |>
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    type_of_waste = `Naziv odpadka`,
    untreated_waste_from_storage_start_year = `Prevzeti odpadki neobdelani odpadki iz skladišča (stanje na dan 1.1.) kg`,
    waste_received_own_waste = `Prevzeti odpadki lastni odpadki kg`,
    waste_received_from_generators = `Prevzeti odpadki od drugih izvirnih povzročiteljev v RS kg`,
    waste_received_from_collectors = `Prevzeti odpadki od zbiralcev odpadkov v RS kg`,
    waste_received_from_treatment = `Prevzeti odpadki od izvajalcev obdelave v RS kg`,
    waste_received_from_EU = `Prevzeti odpadki iz drugih držav članic EU kg`,
    waste_received_from_non_EU = `Prevzeti odpadki iz držav izven EU kg`,
    total_waste_received = `Prevzeti odpadki SKUPAJ kg`,
  )

waste_received.22 <- categorize_waste(waste_received.22, waste_code_col = "waste_code")

waste_received.22 <- waste_received.22 |>
  group_by(year, statistical_region, waste_code, type_of_waste) |>
  summarize(
    total_waste_received = sum(as.numeric(total_waste_received)) / 1000,
    untreated_waste_from_storage_start_year = sum(as.numeric(untreated_waste_from_storage_start_year)) / 1000,
    waste_received_own_waste = sum(as.numeric(waste_received_own_waste)) / 1000,
    waste_received_from_generators = sum(as.numeric(waste_received_from_generators)) / 1000,
    waste_received_from_collectors = sum(as.numeric(waste_received_from_collectors)) / 1000,
    waste_received_from_treatment = sum(as.numeric(waste_received_from_treatment)) / 1000,
    waste_received_from_EU = sum(as.numeric(waste_received_from_EU)) / 1000,
    waste_received_from_non_EU = sum(as.numeric(waste_received_from_non_EU)) / 1000
  ) |>
  ungroup()

processed_sheets[[2]] <- waste_received.22

# Treatment of waste received
waste_treated.22 <- processed_sheets[[3]] |> select(-Poročilo, -`Postopek obdelave (R, D)`, -`Odpadne sveče pri odpadku 20 02 03 (da/ne)`)

waste_treated.22 <- waste_treated.22 |>
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    type_of_waste = `Naziv odpadka`,
    waste_quantity_per_treatment = `Količina odpadkov, na vhod v postopek obdelave (kg)`,
    description_of_treatment = `Opis postopka obdelave`,
  )

waste_treated.22 <- categorize_waste(waste_treated.22, waste_code_col = "waste_code")

waste_treated.22 <- rename_treatment_description(waste_treated.22)

waste_treated.22 <- waste_treated.22 |>
  group_by(year, statistical_region, waste_code, type_of_waste) |>
  summarize(waste_quantity_per_treatment = sum(as.numeric(waste_quantity_per_treatment)) / 1000) |>
  ungroup()

processed_sheets[[3]] <- waste_treated.22

# Management of waste from the treatment process and untreated waste
management.22 <- processed_sheets[[4]] |> select(-Poročilo, -`Odpadne sveče pri odpadku 20 02 03 (da/ne)`)

management.22 <- management.22 |>
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    input_waste_name = `Odpadki na vhodu v obdelavo in prevzeti neobdelani odpadki naziv`,
    treatment_operation = `Postopek obdelave (R/D)`,
    output_waste_name = `Odpadki na izhodu iz postopka obdelave in oddani neobdelani odpadki naziv`,
    waste_sent_to_self_storage_end_year = `Odpadki, oddani v nadaljnje ravnanje sami sebi v skladiščenje (stanje na dan 31.12.) kg`,
    waste_sent_to_collector_SI = `Odpadki, oddani v nadaljnje ravnanje zbiralcu odpadkov v SI kg`,
    waste_sent_to_treatment_operator = `Odpadki, oddani v nadaljnje ravnanje izvajalcu obdelave v SI kg`,
    waste_sent_to_EU_member_states = `Odpadki, oddani v nadaljnje ravnanje v druge države članice EU kg`,
    waste_sent_to_non_EU_countries = `Odpadki, oddani v nadaljnje ravnanje v države izven EU kg`,
    waste_sent_to_no_further_management = `Odpadki, oddani v nadaljnje ravnanje ni nadaljnjega ravnanja kg`,
    further_treatment_envisaged = `Predviden nadaljnji postopek obdelave (R/D)`
  )

management.22 <- management.22 |>
  process_waste_column(treatment_inlet_delivered_waste_code, input_waste_name) |>
  process_waste_column(treatment_outlet_delivered_waste_code, output_waste_name)

management.22 <- management.22 |>
  group_by(year, statistical_region, treatment_inlet_delivered_waste_code, input_waste_name, treatment_operation, treatment_outlet_delivered_waste_code, output_waste_name) |>
  summarize(
    waste_sent_to_self_storage_end_year = sum(as.numeric(waste_sent_to_self_storage_end_year)) / 1000,
    waste_sent_to_collector_SI = sum(as.numeric(waste_sent_to_collector_SI)) / 1000,
    waste_sent_to_treatment_operator = sum(as.numeric(waste_sent_to_treatment_operator)) / 1000,
    waste_sent_to_EU_member_states = sum(as.numeric(waste_sent_to_EU_member_states)) / 1000,
    waste_sent_to_non_EU_countries = sum(as.numeric(waste_sent_to_non_EU_countries)) / 1000,
    waste_sent_to_no_further_management = sum(as.numeric(waste_sent_to_no_further_management)) / 1000
  ) |>
  ungroup()

processed_sheets[[4]] <- management.22

# Management of treatment products that are no longer waste
management_no_waste.22 <- processed_sheets[[5]] |> select(-Poročilo)

management_no_waste.22 <- management_no_waste.22 |>
  rename(
    year = `Leto`,
    type_of_waste = `Odpadki na vhodu v obdelavo naziv`,
    treatment_operation = `Postopek obdelave (R/D)`,
    non_waste_substances = `V postopku obdelave nastale snovi in predmeti, ki niso več odpadki`,
    storage_operator_end_year = `Količina nastalih snovi in predmetov oddana v skladiščenje pri izvajalcu obdelave (stanje na dan 31.12.) kg`,
    delivered_company_and_person_RS_kg = `Količina nastalih snovi in predmetov oddana podjetju in fizični osebi v RS kg`,
    delivered_to_EU = `Količina nastalih snovi in predmetov oddana podjetju v drugi državi članici EU kg`,
    delivered_to_non_EU = `Količina nastalih snovi in predmetov oddana podjetju v državi izven EU kg`
  )

management_no_waste.22 <- categorize_waste(management_no_waste.22, waste_code_col = "input_waste_code")

# drop rows containing NA
management_no_waste.22 <- management_no_waste.22 |>
  filter(!is.na(input_waste_code))

## rename the non_waste_substances content
management_no_waste.22 <- management_no_waste.22 |>
  mutate(non_waste_substances = case_when(
    non_waste_substances == "7 – les" ~ "7 – wood",
    non_waste_substances == "99 – drugo" ~ "99 – other",
    non_waste_substances == "16 – kompost (proizvod)" ~ "16 – compost (product)",
    non_waste_substances == "11 – tekstil in usnje" ~ "11 – textiles and leather",
    non_waste_substances == "5 – papir in karton" ~ "5 – paper and cardboard",
    non_waste_substances == "22 – gradbeno polnilo" ~ "22 – building filler"
  ))

management_no_waste.22 <- management_no_waste.22 |>
  mutate(
    storage_operator_end_year = as.numeric(storage_operator_end_year) / 1000,
    delivered_company_and_person_RS_kg = as.numeric(delivered_company_and_person_RS_kg) / 1000,
    delivered_to_EU = as.numeric(delivered_to_EU) / 1000,
    delivered_to_non_EU = as.numeric(delivered_to_non_EU) / 1000
  )

processed_sheets[[5]] <- management_no_waste.22

# Mechanical-biological treatment of mixed municipal waste, separated by municipality of origin
mech_bio_treatment.22 <- processed_sheets[[6]] |> select(-Poročilo, -`Šifra občine 1`)

mech_bio_treatment.22 <- mech_bio_treatment.22 |>
  rename(
    year = `Leto`,
    name_of_municipality = `Naziv občine`,
    mixed_waste_mech_bio_treatment = `V mehansko-biološko obdelavo prevzeti mešani komunalni odpadki (kg)`
  )

## add statistical regions to the mech_bio_treatment.22
mech_bio_treatment.22 <- mech_bio_treatment.22 |>
  left_join(municipality_region_mapping, by = "name_of_municipality")

mech_bio_treatment.22 <- mech_bio_treatment.22 |>
  group_by(year, statistical_region, name_of_municipality) |>
  summarise(mixed_waste_mech_bio_treatment = sum(mixed_waste_mech_bio_treatment) / 1000) |>
  ungroup()

processed_sheets[[6]] <- mech_bio_treatment.22

# Mass difference between waste input and treatment product volumes
mass_difference.22 <- processed_sheets[[7]] |> select(-Poročilo, -`Odpadne sveče pri odpadku 20 02 03 (da/ne)`)

mass_difference.22 <- mass_difference.22 |>
  rename(
    year = `Leto`,
    type_of_waste = `Odpadek na vhodu v postopek obdelave naziv`,
    treatment_operation = `Postopek obdelave (R/D)`,
    reduction_or_increase_of_mass_during_treatment = `Zmanjšanje ali povečanje mase med postopkom obdelave (kg)`,
  )

mass_difference.22 <- categorize_waste(mass_difference.22, waste_code_col = "input_waste_code")

mass_difference.22 <- mass_difference.22 |>
  group_by(year, type_of_waste, treatment_operation) |>
  mutate(reduction_or_increase_of_mass_during_treatment = as.numeric(reduction_or_increase_of_mass_during_treatment) / 1000) |>
  ungroup()

processed_sheets[[7]] <- mass_difference.22

# Landfill capacity and status
landfill_capacity.22 <- processed_sheets[[8]] |> select(-Poročilo)

landfill_capacity.22 <- landfill_capacity.22 |>
  rename(
    year = `Leto`,
    landfill_site = `Odlagališče`,
    volume_filled_start_year_m3 = `Zapolnjen volumen na odlagalnem polju na začetku leta m3`,
    area_filled_start_year_m2 = `Zapolnjena površina na odlagalnem polju na začetku leta m2`,
    volume_free_end_year_m3 = `Volumen proste kapacitete odlagalnega polja na koncu leta m3`,
    area_free_end_year_m2 = `Površina proste kapacitete odlagalnega polja na koncu leta m2`,
    total_capacity_t = `Celotna zmogljivost odlaganja t`,
    remaining_capacity_start_year_t = `Preostala zmogljivost na dan 1.1. t`,
    remaining_capacity_end_year_t = `Preostala zmogljivost na dan 31.12. t`
  )

## Rename the landfill site
landfill_capacity.22 <- landfill_capacity.22 |>
  mutate(landfill_site = case_when(
    landfill_site == "Odlagališče 1" ~ "Landfill 1",
    landfill_site == "Odlagališče 2" ~ "Landfill 2",
    landfill_site == "Odlagališče 3" ~ "Landfill 3",
    landfill_site == "Odlagališče 4" ~ "Landfill 4",
    landfill_site == "Odlagališče 5" ~ "Landfill 5",
    landfill_site == "Odlagališče 6" ~ "Landfill 6",
    landfill_site == "Odlagališče 7" ~ "Landfill 7",
    landfill_site == "Odlagališče 8" ~ "Landfill 8",
    landfill_site == "Odlagališče 9" ~ "Landfill 9",
    landfill_site == "Odlagališče 10a" ~ "Landfill 10a",
    landfill_site == "Odlagališče 10b" ~ "Landfill 10b",
    landfill_site == "Odlagališče 11" ~ "Landfill 11",
    landfill_site == "Odlagališče 12" ~ "Landfill 12",
    landfill_site == "Odlagališče 13" ~ "Landfill 13",
    landfill_site == "Odlagališče 14" ~ "Landfill 14",
    landfill_site == "Odlagališče 15" ~ "Landfill 15",
    landfill_site == "Odlagališče 16" ~ "Landfill 16"
  ))

processed_sheets[[8]] <- landfill_capacity.22

# Waste management in landfill
landfill_management.22 <- processed_sheets[[9]] |> select(-Poročilo)

landfill_management.22 <- landfill_management.22 |>
  rename(
    year = `Leto`,
    waste_code = `waste_code`,
    type_of_waste = `Naziv odpadka`,
    received_all_waste_kg = `Prevzeti odpadki vsi odpadki kg`,
    received_without_assessment_kg = `Prevzeti odpadki od tega odpadki brez ocene odpadka kg`,
    total_disposed_waste_kg = `Ravnanje z odpadki na odlagališču Odloženi odpadki (D1) skupaj kg`,
    hazardous_waste_kg = `Ravnanje z odpadki na odlagališču nevarni odpadki kg`,
    non_hazardous_waste_kg = `Ravnanje z odpadki na odlagališču nenevarni odpadki kg`,
    inert_waste_kg = `Ravnanje z odpadki na odlagališču inertni odpadki kg`,
    construction_waste_kg = `Ravnanje z odpadki na odlagališču Odpadki za gradnjo objektov odlagališča kg`,
    cover_waste_kg = `Ravnanje z odpadki na odlagališču Odpadki za prekrivanje odlagališča kg`
  )

landfill_management.22 <- categorize_waste(landfill_management.22, waste_code_col = "waste_code")

landfill_management.22 <- landfill_management.22 |>
  group_by(year, waste_code, type_of_waste) |>
  mutate(
    received_all_waste_t = as.numeric(received_all_waste_kg) / 1000,
    received_without_assessment_t = as.numeric(received_without_assessment_kg) / 1000,
    total_disposed_waste_t = as.numeric(total_disposed_waste_kg) / 1000,
    hazardous_waste_t = as.numeric(hazardous_waste_kg) / 1000,
    non_hazardous_waste_t = as.numeric(non_hazardous_waste_kg) / 1000,
    inert_waste_t = as.numeric(inert_waste_kg) / 1000,
    construction_waste_t = as.numeric(construction_waste_kg) / 1000,
    cover_waste_t = as.numeric(cover_waste_kg) / 1000
  ) |>
  ungroup()

# Do we need to do this? TO-CHECK
# landfill_management.22 <- landfill_management.22 |> select(-waste_code, -received_all_waste_kg, -received_without_assessment_kg, -total_disposed_waste_kg, -hazardous_waste_kg, -non_hazardous_waste_kg, -inert_waste_kg, -construction_waste_kg, -cover_waste_kg)

processed_sheets[[9]] <- landfill_management.22

# Disposed waste resulting from municipal waste treatment (from mechanical-biological treatment of mixed municipal waste and from treatment operations of separated fractions of municipal waste), by municipality of origin
# no data
disposed_waste.22 <- processed_sheets[[10]]

# Production of compost or digestate
compost_digestate.22 <- processed_sheets[[11]] |> select(-Poročilo)

compost_digestate.22 <- compost_digestate.22 |>
  rename(
    year = `Leto`,
    produced_compost_digestate = `Proizveden kompost/digestat`,
    quality_class = `Kakovostni razred`,
    quantity_produced_kg = `Proizvedena količina kg`,
    quantity_handled_market_kg = `Količina oddana v nadaljnje ravnanje ali dana na trg kg`,
    type_of_use = `Vrsta uporabe`
  )

## if column contains NA, then insert "Not specified"
compost_digestate.22 <- compost_digestate.22 |>
  mutate(type_of_use = ifelse(is.na(type_of_use), "Not specified", type_of_use))

compost_digestate.22 <- compost_digestate.22 |>
  mutate(
    produced_compost_digestate = case_when(
      produced_compost_digestate == "1 –  kompost (proizvod)" ~ "1 – compost (product)",
      produced_compost_digestate == "2 –  digestat (proizvod)" ~ "2 – digestate (product)",
      produced_compost_digestate == "3 –  19 05 03 (kompost)" ~ "3 – 19 05 03 (compost)",
      produced_compost_digestate == "4 –  19 06 04 (digestat iz anaerobne obdelave komunalnih odpadkov)" ~ "4 – 19 06 04 (digestate from anaerobic treatment of municipal waste)",
      produced_compost_digestate == "5 –  19 06 06 (digestat iz anaerobne obdelave živalskih in rastlinskih odpadkov)" ~ "5 – 19 06 06 (digestate from anaerobic treatment of animal and plant waste)"
    ),
    quality_class = case_when(
      quality_class == "1 – 1. kakovostni razred" ~ "1 – 1st quality class",
      quality_class == "2 – 2. kakovostni razred" ~ "2 – 2nd quality class",
      quality_class == "3 – ne ustreza specifikaciji" ~ "3 – does not meet specifications"
    ),
    type_of_use = case_when(
      type_of_use == "1 – vnos v ali na tla na kmetijskih zemljiščih" ~ "1 – application on agricultural land",
      type_of_use == "2 – vnos v ali na tla na nekmetijskih zemljiščih" ~ "2 – application on non-agricultural land",
      type_of_use == "Not specified" ~ "Not specified",
      type_of_use == "4 – v nadaljnjo obdelavo odpadkov" ~ "4 – further waste treatment"
    )
  )

compost_digestate.22 <- compost_digestate.22 |>
  group_by(year, produced_compost_digestate, quality_class, type_of_use) |>
  summarise(
    quantity_produced_kg = sum(quantity_produced_kg) / 1000,
    quantity_handled_market_kg = sum(quantity_handled_market_kg) / 1000
  ) |>
  ungroup()

# rename quantity_produced_kg and quantity_handled_market_kg to quantity_produced_t and quantity_handled_market_t
compost_digestate.22 <- compost_digestate.22 |>
  rename(
    quantity_produced_t = quantity_produced_kg,
    quantity_handled_market_t = quantity_handled_market_kg
  )

processed_sheets[[11]] <- compost_digestate.22

# Production of compost or digestate, that are waste
compost_digestate_waste.22 <- processed_sheets[[12]] |> select(-Poročilo)

compost_digestate_waste.22 <- compost_digestate_waste.22 |>
  rename(
    year = `Leto`,
    compost_digestate = `Kompost/digestat`,
    quality_class = `Kakovostni razred`,
    quantity_applied_land_m3 = `Vnešena količina v ali na tla m3`,
    land_use = `Raba zemljišča`
  )

compost_digestate_waste.22 <- compost_digestate_waste.22 |>
  mutate(
    compost_digestate = case_when(
      compost_digestate == "1 – 19 05 03 (Kompost)" ~ "1 - 19 05 03 (Compost)"
    ),
    quality_class = case_when(
      quality_class == "1 – 1. kakovostni razred" ~ "1 - 1st quality class",
      quality_class == "2 – 2. kakovostni razred" ~ "2 - 2nd quality class"
    ),
    land_use = case_when(
      land_use == "4 – nekmetijsko zemljišče: park, zelenica ali površina za šport, rekreacijo ali prosti čas" ~ "4 - Park/Green Space",
      land_use == "6 – nekmetijsko zemljišče: odlagališče odpadkov" ~ "6 - Waste Disposal Site",
      land_use == "8 – nekmetijsko zemljišče: biofilter" ~ "8 - Biofilter"
    )
  )

processed_sheets[[12]] <- compost_digestate_waste.22

sheet_names <- c(
  "Prev Treatment",
  "Waste Received",
  "Waste Treatment",
  "Waste Management",
  "Non Waste Management",
  "MBT Municipal Origin",
  "Mass Diff",
  "Landfill Capacity",
  "Landfill Management",
  "Disposed Waste Municipal Origin",
  "Compost Digestate Prod",
  "Waste Compost Digestate Prod"
)

# add the new names
names(processed_sheets) <- sheet_names

for (sheet_name in sheet_names) {
  write_excel_csv(processed_sheets[[sheet_name]], paste0("2022 data\\2022 filtered\\treatment\\", tolower(gsub(" ", "_", sheet_name)), "_22.csv"))
}
```

# Year 2021

## 2021 - Data from the annual reports of the original generators

### Sheets

Contains only one sheet.

Columns (translated to English):

-   \[1\] "Year"\
    \[2\] "Report"\
    \[3\] "Statistical region of waste generation"\
    \[4\] "Waste number"\
    \[5\] "Waste name"\
    \[6\] 'Total waste: generated and stored (in kilograms)'\
    \[7\] "Waste in temporary storage on 1.1.2021 (in kilograms)"\
    \[8\] "Waste generated in 2021 (in kilograms)"\
    \[9\] "Waste in temporary storage on 31.12.2021 (in kilograms)"\
    \[10\] "Waste treated by the original generator (in kilograms)"\
    \[11\] "Waste delivered for further management to other persons in the Republic of Slovenia (in kilograms)"\
    \[12\] "Waste sent for treatment to other EU Member States (in kilograms)"\
    \[13\] "Waste sent for treatment to non-EU countries (in kilograms)"

### Code

```{r waste_generation_2021}
# generated waste

# Reminder:
# Data are based on the ODP-Settlement Reports submitted for 2021.
# The quantities of waste generated are not in all cases equal to the quantities of waste sent for further management (storage, collectors, waste treatment operators, export).

# oe2021 original emitters
# original emitters (ODP-sequestration) - poročil izvirnih povzročiteljev

# Specify the path to the Excel file
waste_generation_21.path <- "2021 data\\podatki LP ODP-nastajanje 2021.xlsx"

# Get the sheet names
sheet_names <- excel_sheets(waste_generation_21.path)

# Initialize a list to store processed sheets
processed_sheets <- list()

# Define the sheets where n_max should be 3 (replace with actual sheet indices)
# if needed
sheets_with_n_max_3 <- c(2, 3, 5)

# Loop through each sheet
for (sheet_name in sheet_names) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else 2
  processed_sheet <- process_sheet(waste_generation_21.path, sheet_index, n_max)
  processed_sheets[[sheet_name]] <- processed_sheet
}

# Applying the function to each data frame in processed_sheets
processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

generation.21 <- processed_sheets[[1]]

# Original Slovenian column names and their English translations
original_colnames <- colnames(generation.21)

english_colnames <- c(
  "year", "report", "statistical_region",
  "waste_code", "type_of_waste", "total_waste_generated_stored",
  "temporarily_stored_start_year", "generated_in_the_year",
  "temporarily_stored_end_year",
  "waste_treated_by_original_generator",
  "waste_transferred_for_treatment_in_RS",
  "waste_sent_for_treatment_EU",
  "waste_sent_for_treatment_outside_EU"
)

# Rename the columns
colnames(generation.21) <- english_colnames

generation.21 <- generation.21 |> select(-report)

# translate the Name of Waste column to english
# possible cases are Les, ki ni naveden v 20 01 37
# Žagovina, oblanci, odrezki, les, iverne plošče in furnir, ki niso navedeni v 03 01 04
# Odpadki, ki niso navedeni drugje
# Papirna in kartonska embalaža ter embalaža iz lepenke
# Lesena embalaža
generation.21 <- categorize_waste(generation.21, waste_code_col = "waste_code")

# change to tons
generation.21 <- generation.21 |>
  group_by(year, statistical_region, waste_code, type_of_waste) |>
  summarise(
    total_waste_generated_stored = sum(total_waste_generated_stored) / 1000,
    temporarily_stored_start_year = sum(temporarily_stored_start_year) / 1000,
    generated_in_the_year = sum(generated_in_the_year) / 1000,
    temporarily_stored_end_year = sum(temporarily_stored_end_year) / 1000,
    waste_treated_by_original_generator = sum(waste_treated_by_original_generator) / 1000,
    waste_transferred_for_treatment_in_RS = sum(waste_transferred_for_treatment_in_RS) / 1000,
    waste_sent_for_treatment_EU = sum(waste_sent_for_treatment_EU) / 1000,
    waste_sent_for_treatment_outside_EU = sum(waste_sent_for_treatment_outside_EU) / 1000
  ) |>
  ungroup()

# create a csv
write_excel_csv(generation.21, "2021 data\\2021 filtered\\generation\\generation_21.csv")

# create a .xlsx
# write.xlsx(generation.21, "2021 data\\2021 filtered\\generation_21.xlsx")
```

## 2021 - Data on waste collected and its subsequent management from waste collectors' reports

### Sheets

Contains 6 sheets (translated to English):

-   Sheet 1: Pre-storage of waste, 2021

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Statistical region"\
        \[4\] "Waste number"\
        \[5\] "Waste name"\
        \[6\] "Waste grave candles (yes/no)" ?\
        \[7\] "Pre-stored waste on 1.1.2021"\
        \[8\] "Pre-stored waste on 31.12.2021"

-   Sheet 2: Waste collected, 2021

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Statistical region"\
        \[4\] "Waste number"\
        \[5\] "Waste name"\
        \[6\] "Waste grave candles (yes/no)"\
        \[7\] "Waste collected from original producers without record sheet (left behind) (kg)" \[8\] 'Waste collected from original producers with a record sheet (discarded) (kg)'\
        \[9\] "Waste collected from other holders by collectors in the RS (kg)"\
        \[10\] "Waste collected from other holders from treatment operators in RS (kg)"

-   Sheet 3: Municipal waste collected by source of generation, 2021

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Waste number"\
        \[4\] "Waste name"\
        \[5\] "Waste grave candles (yes/no)"\
        \[6\] "Total municipal waste collected"\
        \[7\] "Municipal waste collected by source from households (kg)"\
        \[8\] 'Municipal waste collected by source of generation from activities (kg)'

-   Sheet 4: Municipal waste collected by municipality of origin, 2021

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Waste number"\
        \[4\] "Waste name"\
        \[5\] "Waste grave candles (yes/no)"\
        \[6\] "Municipal waste by municipality of origin (kg)"\
        \[7\] "Municipality code"\
        \[8\] "Name of municipality"

-   Sheet 5: Management of collected waste, 2021

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Statistical region"\
        \[4\] "Waste number"\
        \[5\] "Waste name"\
        \[6\] "Waste grave candles (yes/no)"\
        \[7\] "Waste handed over to collectors in the RS (kg)"\
        \[8\] "Waste delivered to treatment operators in the RS for further management (kg)"\
        \[9\] "Waste sent for further management to other EU Member States (kg)"\
        \[10\] "Waste sent for further management to non-EU countries (kg)"

-   Sheet 6: Household composting, 2021

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Municipality code"\
        \[4\] "Name of municipality"\
        \[5\] "Number of households per municipality"\
        \[6\] "Number of households per municipality that home compost"

### Code

```{r waste_collection_2021}
# collected waste ----
# skipping header files, fixing column names and removing initial empty rows

# collectors' annual reports (ODP-collection) - poročil zbiralcev odpadkov
# c2021 - collectors'

# Specify the path to the Excel file
waste_collectors_21.path <- "2021 data\\podatki LP ODP-zbiranje 2021.xlsx"

# Get the sheet names
sheet_names <- excel_sheets(waste_collectors_21.path)

# Initialize a list to store processed sheets
processed_sheets <- list()

# Define the sheets where n_max should be 3 (replace with actual sheet indices)
# if needed
sheets_with_n_max_3 <- c(2, 3, 5)

skip <- 7

# Loop through each sheet
for (sheet_name in sheet_names) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else 2
  if (sheet_index == 6) {
    processed_sheet <- process_sheet(waste_collectors_21.path, sheet_index, 1)
  } else {
    processed_sheet <- process_sheet(waste_collectors_21.path, sheet_index, n_max)
  }
  processed_sheets[[sheet_name]] <- processed_sheet
}

# Applying the function to each data frame in processed_sheets to filter by codes
processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

# Sheet 1: Pre-storage of waste, 2021 ----
processed_sheets[[1]]

## Rename the columns of the first sheet
processed_sheets[[1]] <- processed_sheets[[1]] |>
  select(-Poročilo, -`Odpadne nagrobne sveče (da/ne)`) |>
  rename(
    statistical_region = `Statistična regija`,
    year = `Leto`,
    type_of_waste = `Naziv odpadka`,
    previous_stored_start_year = `Predhodno skladiščeni odpadki na dan 1.1.2021 kg`,
    previous_stored_end_year = `Predhodno skladiščeni odpadki na dan 31.12.2021 kg`
  )

processed_sheets[[1]] <- categorize_waste(processed_sheets[[1]], waste_code_col = "waste_code")

processed_sheets[[1]] <- processed_sheets[[1]] |>
  group_by(year, statistical_region, waste_code, type_of_waste) |>
  summarise(
    previous_stored_start_year = sum(previous_stored_start_year) / 1000,
    previous_stored_end_year = sum(previous_stored_end_year) / 1000
  ) |>
  ungroup()

# STOPPED FOR NOW

# Sheet 2: Waste collected, 2021 ----
processed_sheets[[2]]

## Rename the columns of the second sheet
processed_sheets[[2]] <- processed_sheets[[2]] |>
  select(-Poročilo, -`Odpadne nagrobne sveče (da/ne)`) |>
  rename(
    statistical_region = `Statistična regija`,
    year = `Leto`,
    type_of_waste = `Naziv odpadka`,
    waste_from_producers_no_record = `Zbrani odpadki, prevzeti od izvirnih povzročiteljev brez evidenčnega lista (prepuščeni) kg`,
    waste_from_producers_with_record = `Zbrani odpadki, prevzeti od izvirnih povzročiteljev z evidenčnim listom (oddani) kg`,
    waste_from_collectors_RS = `Zbrani odpadki prevzeti od drugih imetnikov od zbiralcev v RS kg`,
    waste_from_processors_RS = `Zbrani odpadki prevzeti od drugih imetnikov od izvajalcev obdelave v RS kg`
  )

processed_sheets[[2]] <- rename_waste_names(processed_sheets[[2]])

processed_sheets[[2]] <- processed_sheets[[2]] |>
  mutate(total_collected_waste = waste_from_producers_no_record + waste_from_producers_with_record + waste_from_collectors_RS + waste_from_processors_RS)

processed_sheets[[2]] <- processed_sheets[[2]] |>
  group_by(year, statistical_region, type_of_waste) |>
  summarise(
    total_collected_waste = sum(total_collected_waste) / 1000,
    waste_from_producers_no_record = sum(waste_from_producers_no_record) / 1000,
    waste_from_producers_with_record = sum(waste_from_producers_with_record) / 1000,
    waste_from_collectors_RS = sum(waste_from_collectors_RS) / 1000,
    waste_from_processors_RS = sum(waste_from_processors_RS) / 1000
  ) |>
  ungroup()

# Sheet 3: Municipal waste collected by source of generation, 2021 ----
processed_sheets[[3]]

## Rename the columns of the third sheet
processed_sheets[[3]] <- processed_sheets[[3]] |>
  select(-Poročilo, -`Odpadne nagrobne sveče (da/ne)`) |>
  rename(
    year = `Leto`,
    type_of_waste = `Naziv odpadka`,
    total_municipal_waste_collected = `Zbrani komunalni odpadki skupaj kg`,
    municipal_waste_from_households = `Zbrani komunalni odpadki glede na vir nastanka iz gospodinjstev kg`,
    municipal_waste_from_activities = `Zbrani komunalni odpadki glede na vir nastanka iz dejavnosti kg`
  )

processed_sheets[[3]] <- rename_waste_names(processed_sheets[[3]])

processed_sheets[[3]] <- processed_sheets[[3]] |>
  group_by(year, type_of_waste) |>
  summarise(
    total_municipal_waste_collected = sum(total_municipal_waste_collected) / 1000,
    municipal_waste_from_households = sum(municipal_waste_from_households) / 1000,
    municipal_waste_from_activities = sum(municipal_waste_from_activities) / 1000
  ) |>
  ungroup()

# Sheet 4: Municipal waste collected by municipality of origin, 2021 ----
wc_by_origin <- processed_sheets[[4]]
wc_by_origin <- wc_by_origin |>
  select(-Poročilo, -`Odpadne nagrobne sveče (da/ne)`, -`Šifra občine 1`) |>
  rename(
    waste_by_municipality = `Komunalni odpadki po občini izvora kg`,
    name_of_municipality = `Naziv občine`,
    type_of_waste = `Naziv odpadka`,
    year = `Leto`
  )

wc_by_origin <- rename_waste_names(wc_by_origin)

wc_by_origin <- wc_by_origin |>
  group_by(year, name_of_municipality, type_of_waste) |>
  summarise(waste_by_municipality = sum(waste_by_municipality) / 1000) |>
  ungroup()

# create center points ----
# can create center points per municipalities with this
# use the one with the most waste
list_of_waste_by_municipality(GORENJSKA, wc_by_origin)

# each municipality should have its own region assign to it via a new column

# sum up the waste_by_municipality column
municipal_waste_collected.gorenjska <- list_of_waste_by_municipality(GORENJSKA, wc_by_origin) |>
  select(waste_by_municipality) |>
  summarise(total_waste = sum(waste_by_municipality, na.rm = TRUE))

municipal_waste_collected.gorenjska <- municipal_waste_collected.gorenjska$total_waste
# sum up per sheet

find_municipality_with_most_waste(GORENJSKA, wc_by_origin)

# go through all the regions (GORENJSKA, POMURKSA, etc.) and find municipality with most waste
find_municipality_with_most_waste(GORENJSKA, wc_by_origin)
find_municipality_with_most_waste(POMURSKA, wc_by_origin)
find_municipality_with_most_waste(KOROŠKA, wc_by_origin)
find_municipality_with_most_waste(OBALNOKRAŠKA, wc_by_origin)
find_municipality_with_most_waste(SAVINJSKA, wc_by_origin)
find_municipality_with_most_waste(JUGOVZHODNA.SLOVENIJA, wc_by_origin)
find_municipality_with_most_waste(OSREDNJESLOVENSKA, wc_by_origin)
find_municipality_with_most_waste(GORIŠKA, wc_by_origin)
find_municipality_with_most_waste(PODRAVSKA, wc_by_origin)
find_municipality_with_most_waste(POSAVSKA, wc_by_origin)
find_municipality_with_most_waste(PRIMORSKONOTRANJSKA, wc_by_origin)
find_municipality_with_most_waste(ZASAVSKA, wc_by_origin)


# Merge the mapping dataframe with the wc_by_origin dataframe
wc_by_origin <- wc_by_origin |>
  left_join(municipality_region_mapping, by = "name_of_municipality")

# Check the result
head(wc_by_origin)

processed_sheets[[4]] <- wc_by_origin

# Sheet 5: Management of collected waste, 2021 ----
processed_sheets[[5]]

## Rename the columns of the fifth sheet
processed_sheets[[5]] <- processed_sheets[[5]] |>
  select(-Poročilo, -`Odpadne nagrobne sveče (da/ne)`) |>
  rename(
    statistical_region = `Statistična regija`,
    year = `Leto`,
    type_of_waste = `Naziv odpadka`,
    waste_handed_to_collectors_RS = `Odpadki oddani v nadaljnje ravnanje zbiralcem v RS kg`,
    waste_delivered_to_operators_RS = `Odpadki oddani v nadaljnje ravnanje izvajalcem obdelave v RS kg`,
    waste_sent_to_EU = `Odpadki oddani v nadaljnje ravnanje v druge države članice EU kg`,
    waste_sent_to_non_EU = `Odpadki oddani v nadaljnje ravnanje v države izven EU kg`
  )

processed_sheets[[5]] <- rename_waste_names(processed_sheets[[5]])

processed_sheets[[5]] <- processed_sheets[[5]] |>
  mutate(
    total_waste_given_away = waste_handed_to_collectors_RS + waste_delivered_to_operators_RS + waste_sent_to_EU + waste_sent_to_non_EU
  )

processed_sheets[[5]] <- processed_sheets[[5]] |>
  group_by(year, statistical_region, type_of_waste) |>
  summarise(
    total_waste_given_away = sum(total_waste_given_away) / 1000,
    waste_handed_to_collectors_RS = sum(waste_handed_to_collectors_RS) / 1000,
    waste_delivered_to_operators_RS = sum(waste_delivered_to_operators_RS) / 1000,
    waste_sent_to_EU = sum(waste_sent_to_EU) / 1000,
    waste_sent_to_non_EU = sum(waste_sent_to_non_EU) / 1000
  ) |>
  ungroup()

# Sheet 6: Household composting, 2021 ----
processed_sheets[[6]]

## Rename the columns of the sixth sheet
processed_sheets[[6]] <- processed_sheets[[6]] |>
  select(-`Šifra občine 1`, -Poročilo) |>
  rename(
    year = `Leto`,
    name_of_municipality = `Naziv občine`,
    number_of_households = `Število gospodinjstev na občino 2`,
    number_of_households_composting = `Število gospodinjstev na občino, ki hišno kompostirajo`
  )

processed_sheets[[6]] <- processed_sheets[[6]] |>
  left_join(municipality_region_mapping, by = "name_of_municipality")

# household composting is based on municipalities, not regions
# we need to filter by municipality name
# check if the name of the municipality is stored in one of the regions
processed_sheets[[6]] |>
  group_by(statistical_region) |>
  summarise(n = n())

# export to csv ----
# configure sheet names
sheet_names <- c(
  "Waste storage",
  "Waste received",
  "Waste source of generation",
  "Waste municipality of origin",
  "Municipal waste management",
  "Household composting"
)

# add the new names
names(processed_sheets) <- sheet_names


# For each sheet in processed_sheets, write the data to a .csv file
for (sheet_name in sheet_names) {
  write_excel_csv(processed_sheets[[sheet_name]], paste0("2021 data\\2021 filtered\\collection\\", tolower(gsub(" ", "_", sheet_name)), "_21.csv"))
}

# export to .xlsx
# write.xlsx(processed_sheets, "2021 data\\2021 filtered\\collection_21.xlsx")
```

## 2021 - Data from waste treatment operators' reports

### Sheets

Contains 9 sheets (translated to English):

-   Sheet 1: Waste storage

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Statistical region"\
        \[4\] "Waste number"\
        \[5\] "Waste name"\
        \[6\] "Waste grave candles (yes/no)"\
        \[7\] "Waste in storage on 1.1.2021 (kg)"\
        \[8\] "Waste in storage on 31.12.2021 (kg)"\
        \[9\] 'Stored on 31.12.2021, scheduled for operation (R,D)'

-   Sheet 2: Waste received

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Statistical region"\
        \[4\] "Waste number"\
        \[5\] "Waste name"\
        \[6\] "Waste tombstone candles (yes/no)"\
        \[7\] "Waste received, own waste (kg)"\
        \[8\] "Waste received, from other original producers in the RS (kg)" \[9\] "Waste collected, from waste collectors in RS (kg)"\
        \[10\] "Waste received from treatment operators in RS (kg)"\
        \[11\] "Waste received from other EU Member States (kg)"\
        \[12\] "Waste received, from non-EU countries (kg)"\
        \[13\] "Waste received, TOTAL (kg)"\
        \[14\] "Treatment operation (R, D)"

-   Sheet 3: Treatment of waste received

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Statistical region"\
        \[4\] "Waste number"\
        \[5\] "Waste name"\
        \[6\] "Waste grave candles (yes/no)"\
        \[7\] 'Waste entering the treatment process (kg)' 'Treatment process (R, D)'

-   Sheet 4: Management of waste from treatment operations and untreated waste

    -   \[1\] "Summer"\
        \[2\] "Report"\
        \[3\] "Statistical region"\
        \[4\] "Waste incoming and waste received untreated number"\
        \[5\] "Waste incoming and accepted untreated waste name"\
        \[6\] "Waste leaving treatment and delivered untreated waste number" \[7\] "Waste exiting treatment and delivered untreated waste name"\
        \[8\] "Waste tombstone candles (yes/no)"\
        \[9\] "Waste delivered to SI waste collector for further management (kg)"\
        \[10\] 'Waste sent for further treatment to a treatment operator in SI (kg)'\
        \[11\] 'Waste sent for further management to other EU Member States (kg)'\
        \[12\] "Waste sent for further management to non-EU countries (kg)"

-   Sheet 4a: Management of treatment products that are no longer waste

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Waste to incoming treatment number"\
        \[4\] "Waste to incoming treatment name"\
        \[5\] "Treated substance or object that has lost its waste status at the exit of the treatment operation"\
        \[6\] "Delivered to storage or to other persons in the RS in kg"\
        \[7\] "Shipped to other EU Member States in kg"\
        \[8\] "Shipped to non-EU countries in kg"

-   Sheet 5: Municipal waste received for treatment, separated by municipality of origin

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Waste number"\
        \[4\] "Waste name"\
        \[5\] "Waste grave candles (yes/no)"\
        \[6\] "Waste collected by municipality of origin (kg)"\
        \[7\] "Commune code"\
        \[8\] "Name of municipality"

-   Sheet 6: Mass difference between waste input and treatment product volumes due to mass change during the treatment process

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Waste at treatment input number"\
        \[4\] "Waste at treatment input name"\
        \[5\] "Waste tombstone candles (yes/no)"\
        \[6\] 'Mass reduction or increase during the treatment process (kg)'

-   Sheet 7: Landfill capacity and status (for inert, hazardous and non-hazardous waste, including municipal waste)

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Landfill site"\
        \[4\] "Volume filled in the disposal field at the beginning of the year (in m\^3)"\
        \[5\] "Filled area on the disposal site at the beginning of the year (in m\^2)"\
        \[6\] "Volume of free capacity of the disposal site at the end of the year (in m\^3)"\
        \[7\] "Area of free capacity of the disposal site at the end of the year (in m\^2)"\
        \[8\] "Total disposal capacity (t)"\
        \[9\] "Remaining capacity on 1.1. (in t)"\
        \[10\] 'Remaining capacity on 31.12. (in t)'\
        \[11\] "Date of commencement of disposal"\
        \[12\] "Date of end of disposal"

-   Sheet 8: Landfill waste management

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Waste number"\
        \[4\] "Waste name"\
        \[5\] 'Waste received, all waste (kg)'\
        \[6\] "Waste received, of which waste without waste assessment (kg)"\
        \[7\] 'Landfill waste management, Disposed waste (D1), total (kg)'\
        \[8\] "Landfill waste management, Disposed waste (D1), hazardous waste (kg)"\
        \[9\] 'Landfill waste management, Disposed waste (D1), non-hazardous waste (kg)'\
        \[10\] "Landfill waste management, Disposed waste (D1), Inert waste (kg)"\
        \[11\] "Landfill waste management, Waste for construction of landfill facilities (kg)"\
        \[12\] "Landfill waste management, Waste for landfill cover (kg)"\
        \[13\] "Landfill waste management, Waste rejected (kg)"

-   Sheet 9: Municipal waste disposed by municipality of origin

    -   \[1\] "Year"\
        \[2\] "Report"\
        \[3\] "Waste number"\
        \[4\] "Waste name"\
        \[5\] "Waste disposed of by municipality of origin (kg)" \[6\] "Municipality code"\
        \[7\] "Name of municipality"

### Code

```{r waste_treatment_2021}
# how waste is used

# reports of waste treatment operators (ODP-Treatment) - poročil izvajalcev obdelave odpadkov
# wto2021 - waste treatment operators

# Specify the path to the Excel file
treatment_21.path <- "2021 data\\podatki LP ODP-obdelava 2021.xlsx"

# Get the sheet names
sheet_names <- excel_sheets(treatment_21.path)

# Initialize a list to store processed sheets
processed_sheets <- list()

# Define the sheets where n_max should be 3 (replace with actual sheet indices)
# if needed
sheets_with_n_max_3 <- c(2, 4, 5, 7)

sheets_with_n_max_4 <- 9

# Loop through each sheet
for (sheet_name in sheet_names) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else if (sheet_index == sheets_with_n_max_4) 4 else 2
  processed_sheet <- process_sheet(treatment_21.path, sheet_index, n_max)
  # print(sheet_name)
  # print(n_max)
  processed_sheets[[sheet_name]] <- processed_sheet
}

# Applying the function to each data frame in processed_sheets
processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

# Sheet 1: Waste storage
waste_storage.21 <- processed_sheets[[1]]

waste_storage.21 <- waste_storage.21 |>
  select(-Poročilo, -`Odpadne nagrobne sveče (da/ne)`) |>
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    waste_code = `waste_code`,
    type_of_waste = `Naziv odpadka`,
    waste_stored_start_year = `Skladiščeni odpadki na dan 1.1.2021 kg`,
    waste_stored_end_year = `Skladiščeni odpadki na dan 31.12.2021 kg`,
    scheduled_for_treatment_end_year = `Skladiščeno na 31.12.2021, predvideno za postopek (R,D)`
  )

waste_storage.21 <- rename_waste_names(waste_storage.21)

waste_storage.21 <- waste_storage.21 |>
  group_by(year, statistical_region, type_of_waste) |>
  summarise(
    waste_stored_start_year = sum(waste_stored_start_year) / 1000,
    waste_stored_end_year = sum(waste_stored_end_year) / 1000
  ) |>
  ungroup()

# if NA, then "Not Specified" for the scheduled_for_treatment_end_year column
# waste_storage.21$scheduled_for_treatment_end_year[is.na(waste_storage.21$scheduled_for_treatment_end_year)] <- "Not Specified"

processed_sheets[[1]] <- waste_storage.21


# Sheet 2: Waste received
waste_received.21 <- processed_sheets[[2]]

waste_received.21 <- waste_received.21 |>
  select(-Poročilo, -`Odpadne nagrobne sveče (da/ne)`) |>
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    type_of_waste = `Naziv odpadka`,
    waste_received_own_waste = `Prevzeti odpadki lastni odpadki kg`,
    waste_received_from_producers_RS = `Prevzeti odpadki od drugih izvirnih povzročiteljev v RS kg`,
    waste_received_from_collectors_RS = `Prevzeti odpadki od zbiralcev odpadkov v RS kg`,
    waste_received_from_processors_RS = `Prevzeti odpadki od izvajalcev obdelave v RS kg`,
    waste_received_from_EU = `Prevzeti odpadki iz drugih držav članic EU kg`,
    waste_received_from_non_EU = `Prevzeti odpadki iz držav izven EU kg`,
    total_waste_received = `Prevzeti odpadki SKUPAJ kg`,
    treatment_operation = `Postopek obdelave (R, D)`
  )

waste_received.21 <- rename_waste_names(waste_received.21)

waste_received.21 <- waste_received.21 |>
  group_by(year, statistical_region, type_of_waste) |>
  summarise(
    total_waste_received = sum(total_waste_received) / 1000,
    waste_received_own_waste = sum(waste_received_own_waste) / 1000,
    waste_received_from_producers_RS = sum(waste_received_from_producers_RS) / 1000,
    waste_received_from_collectors_RS = sum(waste_received_from_collectors_RS) / 1000,
    waste_received_from_processors_RS = sum(waste_received_from_processors_RS) / 1000,
    waste_received_from_EU = sum(waste_received_from_EU) / 1000,
    waste_received_from_non_EU = sum(waste_received_from_non_EU) / 1000
  ) |>
  ungroup()

processed_sheets[[2]] <- waste_received.21

# Sheet 3: Treatment of waste received
treating_waste.21 <- processed_sheets[[3]]

treating_waste.21 <- treating_waste.21 |>
  select(-Poročilo, -`Odpadne nagrobne sveče (da/ne)`) |>
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    type_of_waste = `Naziv odpadka`,
    waste_entering_treatment_process = `Odpadki, ki vstopajo v postopek obdelave (kg)`,
    treatment_process = `Postopek obdelave (R, D)`
  )

treating_waste.21 <- rename_waste_names(treating_waste.21)

treating_waste.21 <- treating_waste.21 |>
  group_by(year, statistical_region, type_of_waste) |>
  summarise(waste_entering_treatment_process = sum(waste_entering_treatment_process) / 1000) |>
  ungroup()

processed_sheets[[3]] <- treating_waste.21

# Sheet 4: Management of waste from treatment operations and untreated waste
management_waste.21 <- processed_sheets[[4]]

management_waste.21 <- management_waste.21 |>
  select(-Poročilo, -`Odpadne nagrobne sveče (da/ne)`) |>
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    input_waste_name = `Odpadki na vhodu v obdelavo in prevzeti neobdelani odpadki naziv`,
    output_waste_name = `Odpadki na izhodu iz postopka obdelave in oddani neobdelani odpadki naziv`,
    waste_handed_to_collectors_RS = `Odpadki, oddani v nadaljnje ravnanje zbiralcu odpadkov v SI kg`,
    waste_delivered_to_operators_RS = `Odpadki, oddani v nadaljnje ravnanje izvajalcu obdelave v SI kg`,
    waste_sent_to_EU = `Odpadki, oddani v nadaljnje ravnanje v druge države članice EU kg`,
    waste_sent_to_non_EU = `Odpadki, oddani v nadaljnje ravnanje v države izven EU kg`
  )

management_waste.21 <- rename_waste_names(management_waste.21, "input_waste_name")

management_waste.21 <- rename_waste_names(management_waste.21, "output_waste_name")

management_waste.21 <- management_waste.21 |>
  group_by(year, statistical_region, input_waste_name, output_waste_name) |>
  summarise(
    waste_handed_to_collectors_RS = sum(waste_handed_to_collectors_RS) / 1000,
    waste_delivered_to_operators_RS = sum(waste_delivered_to_operators_RS) / 1000,
    waste_sent_to_EU = sum(waste_sent_to_EU) / 1000,
    waste_sent_to_non_EU = sum(waste_sent_to_non_EU) / 1000
  ) |>
  ungroup()

processed_sheets[[4]] <- management_waste.21

# Sheet 4a: Management of treatment products that are no longer waste
management_waste.21a <- processed_sheets[[5]]

management_waste.21a <- management_waste.21a |>
  select(-Poročilo) |>
  rename(
    year = `Leto`,
    input_waste_name = `Odpadki na vhodu v obdelavo naziv`,
    output_waste_name = `Predelana snov ali predmet, ki je izgubil status odpadka, na izhodu iz postopka obdelave`,
    delivered_to_storage_or_other_persons_RS = `Oddano v skladišče ali drugim osebam v RS kg`,
    shipped_to_EU = `Oddano v druge države članice EU kg`,
    shipped_to_non_EU = `Oddano v države izven EU kg`
  )

management_waste.21a <- rename_waste_names(management_waste.21a, "input_waste_name")

management_waste.21a$output_waste_name <- case_when(
  management_waste.21a$output_waste_name == "kompost" ~ "compost",
  management_waste.21a$output_waste_name == "les" ~ "wood",
  management_waste.21a$output_waste_name == "papir in karton" ~ "paper and cardboard",
  management_waste.21a$output_waste_name == "tekstil in usnje" ~ "textiles and leather",
  management_waste.21a$output_waste_name == "drugo" ~ "other",
  management_waste.21a$output_waste_name == "kovine železo in jeklo" ~ "iron and steel metals"
)

management_waste.21a <- management_waste.21a |>
  group_by(year, input_waste_name, output_waste_name) |>
  summarise(
    delivered_to_storage_or_other_persons_RS = sum(delivered_to_storage_or_other_persons_RS) / 1000,
    shipped_to_EU = sum(shipped_to_EU) / 1000,
    shipped_to_non_EU = sum(shipped_to_non_EU) / 1000
  ) |>
  ungroup()

processed_sheets[[5]] <- management_waste.21a

# Sheet 5: Municipal waste received for treatment, separated by municipality of origin
waste_treatment.21 <- processed_sheets[[6]]

waste_treatment.21 <- waste_treatment.21 |>
  select(-Poročilo, -`Odpadne nagrobne sveče (da/ne)`, -`Šifra občine 1`) |>
  rename(
    year = `Leto`,
    waste_code = `waste_code`,
    type_of_waste = `Naziv odpadka`,
    waste_collected_by_municipality = `Prevzeti odpadki glede na občino izvora (kg)`,
    name_of_municipality = `Naziv občine`
  )

waste_treatment.21 <- rename_waste_names(waste_treatment.21)

waste_treatment.21 <- waste_treatment.21 |>
  left_join(municipality_region_mapping, by = "name_of_municipality")

waste_treatment.21 <- waste_treatment.21 |>
  group_by(year, statistical_region, name_of_municipality, type_of_waste) |>
  summarise(waste_collected_by_municipality = sum(waste_collected_by_municipality) / 1000) |>
  ungroup()

processed_sheets[[6]] <- waste_treatment.21

# Sheet 6: Mass difference between waste input and treatment product volumes due to mass change during the treatment process
mass_difference.21 <- processed_sheets[[7]]

mass_difference.21 <- mass_difference.21 |>
  select(-Poročilo, -`Odpadne nagrobne sveče (da/ne)`) |>
  rename(
    year = `Leto`,
    input_waste_name = `Odpadek na vhodu v postopek obdelave naziv`,
    mass_change = `Zmanjšanje ali povečanje mase med postopkom obdelave (kg)`
  )

mass_difference.21 <- rename_waste_names(mass_difference.21, "input_waste_name")

mass_difference.21 <- mass_difference.21 |>
  group_by(year, input_waste_name) |>
  summarise(mass_change = sum(mass_change) / 1000) |>
  ungroup()

processed_sheets[[7]] <- mass_difference.21

# Sheet 7: Landfill capacity and status (for inert, hazardous and non-hazardous waste, including municipal waste)
landfill_capacity.21 <- processed_sheets[[8]]

landfill_capacity.21 <- landfill_capacity.21 |>
  select(-Poročilo) |>
  rename(
    year = `Leto`,
    landfill_site = `Odlagališče`,
    volume_filled_start_year = `Zapolnjen volumen na odlagalnem polju na začetku leta m3`,
    area_filled_start_year = `Zapolnjena površina na odlagalnem polju na začetku leta m2`,
    volume_free_end_year = `Volumen proste kapacitete odlagalnega polja na koncu leta m3`,
    area_free_end_year = `Površina proste kapacitete odlagalnega polja na koncu leta m2`,
    total_disposal_capacity = `Celotna zmogljivost odlaganja t`,
    remaining_capacity_start_year = `Preostala zmogljivost na dan 1.1. t`,
    remaining_capacity_end_year = `Preostala zmogljivost na dan 31.12. t`,
    start_date_disposal = `Datum začetka odlaganja`,
    end_date_disposal = `Datum konca odlaganja`
  )

landfill_capacity.21 <- landfill_capacity.21 |>
  mutate(landfill_site = case_when(
    landfill_site == "Odlagališče 1" ~ "Landfill 1",
    landfill_site == "Odlagališče 2" ~ "Landfill 2",
    landfill_site == "Odlagališče 3" ~ "Landfill 3",
    landfill_site == "Odlagališče 4" ~ "Landfill 4",
    landfill_site == "Odlagališče 5" ~ "Landfill 5",
    landfill_site == "Odlagališče 6" ~ "Landfill 6",
    landfill_site == "Odlagališče 7" ~ "Landfill 7",
    landfill_site == "Odlagališče 8" ~ "Landfill 8",
    landfill_site == "Odlagališče 9" ~ "Landfill 9",
    landfill_site == "Odlagališče 10a" ~ "Landfill 10a",
    landfill_site == "Odlagališče 10b" ~ "Landfill 10b",
    landfill_site == "Odlagališče 11" ~ "Landfill 11",
    landfill_site == "Odlagališče 12" ~ "Landfill 12",
    landfill_site == "Odlagališče 13" ~ "Landfill 13",
    landfill_site == "Odlagališče 14" ~ "Landfill 14",
    landfill_site == "Odlagališče 15" ~ "Landfill 15",
    landfill_site == "Odlagališče 16" ~ "Landfill 16"
  ))

processed_sheets[[8]] <- landfill_capacity.21

# Sheet 8: Landfill waste management
landfill_waste.21 <- processed_sheets[[9]]


landfill_waste.21 <- landfill_waste.21 |>
  select(-Poročilo) |>
  rename(
    year = `Leto`,
    type_of_waste = `Naziv odpadka`,
    total_waste_received = `Prevzeti odpadki vsi odpadki kg`,
    waste_without_assessment = `Prevzeti odpadki od tega odpadki brez ocene odpadka kg`,
    disposed_waste_total = `Ravnanje z odpadki na odlagališču Odloženi odpadki (D1) skupaj kg`,
    disposed_waste_hazardous = `Ravnanje z odpadki na odlagališču nevarni odpadki kg`,
    disposed_waste_non_hazardous = `Ravnanje z odpadki na odlagališču nenevarni odpadki kg`,
    disposed_waste_inert = `Ravnanje z odpadki na odlagališču inertni odpadki kg`,
    disposed_waste_for_construction = `Ravnanje z odpadki na odlagališču Odpadki za gradnjo objektov odlagališča kg`,
    disposed_waste_for_covering = `Ravnanje z odpadki na odlagališču Odpadki za prekrivanje odlagališča kg`
  )

landfill_waste.21 <- rename_waste_names(landfill_waste.21)

landfill_waste.21 <- landfill_waste.21 |>
  group_by(year, type_of_waste) |>
  summarise(
    total_waste_received = sum(total_waste_received) / 1000,
    waste_without_assessment = sum(waste_without_assessment) / 1000,
    disposed_waste_total = sum(disposed_waste_total) / 1000,
    disposed_waste_hazardous = sum(disposed_waste_hazardous) / 1000,
    disposed_waste_non_hazardous = sum(disposed_waste_non_hazardous) / 1000,
    disposed_waste_inert = sum(disposed_waste_inert) / 1000,
    disposed_waste_for_construction = sum(disposed_waste_for_construction) / 1000,
    disposed_waste_for_covering = sum(disposed_waste_for_covering) / 1000
  ) |>
  ungroup()

# if the column has a 0, remove that column
landfill_waste.21 <- landfill_waste.21 |>
  select(where(~ !all(. == 0)))

processed_sheets[[9]] <- landfill_waste.21

# Sheet 9: Municipal waste disposed by municipality of origin - EXCLUDED
municipal_waste_disposed.21 <- processed_sheets[[10]]


sheet_names <- c(
  "Waste storage",
  "Waste received",
  "Treatment of waste received",
  "Management of waste from treatment operations and untreated waste",
  "Management of treatment products that are no longer waste",
  "Municipal waste received for treatment, separated by municipality of origin",
  "Mass difference between waste input and treatment product volumes due to mass change during the treatment process",
  "Landfill capacity and status (for inert, hazardous and non-hazardous waste, including municipal waste)",
  "Landfill waste management"
)

names(processed_sheets) <- sheet_names

for (sheet_name in sheet_names) {
  write_excel_csv(processed_sheets[[sheet_name]], paste0("2021 data\\2021 filtered\\treatment\\", tolower(gsub(" ", "_", sheet_name)), "_21.csv"))
}
```

# Year 2020

## 2020 - Data from the annual reports of the original emitters

### Code

```{r waste_generation_2020}
# Specify the path to the Excel file
waste_generation_20.path <- "2020 data\\podatki LP ODP-nastajanje 2020.xlsx"

# Get the sheet names
sheet_names <- excel_sheets(waste_generation_20.path)

# Initialize a list to store processed sheets
processed_sheets <- list()

# Define the sheets where n_max should be 3 (replace with actual sheet indices)
# if needed
sheets_with_n_max_3 <- c(2, 3, 5)

# Loop through each sheet
for (sheet_name in sheet_names) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else 2
  processed_sheet <- process_sheet(waste_generation_20.path, sheet_index, n_max)
  processed_sheets[[sheet_name]] <- processed_sheet
}

# Applying the function to each data frame in processed_sheets
processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

generation.20 <- processed_sheets[[1]]

generation.20 <- generation.20 |>
  select(-Poročilo) |>
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija kraja nastanka odpadkov`,
    waste_code = `waste_code`,
    type_of_waste = `Naziv odpadka`,
    total_waste_generated = `Odpadki skupaj: nastalo in skladiščeno kg`,
    temporary_stored_start_year = `Začasno skladiščeni odpadki na dan 1.1.2020 kg`,
    waste_generated_2020 = `Odpadki nastali v letu 2020 kg`,
    temporary_stored_end_year = `Začasno skladiščeni odpadki na dan 31.12.2020 kg`,
    waste_treated_by_producer = `Odpadki, ki jih je izvirni povzročitelj obdelal sam kg`,
    waste_handed_to_others_RS = `Odpadki oddani v nadaljnje ravnanje drugim osebam v RS kg`,
    waste_sent_to_EU = `Odpadki poslani v obdelavo v druge države članice EU kg`,
    waste_sent_to_non_EU = `Odpadki poslani v obdelavo v države izven EU kg`
  )

generation.20 <- rename_waste_names(generation.20)

# change to tons
generation.20 <- generation.20 |>
  group_by(year, statistical_region, type_of_waste) |>
  summarise(
    total_waste_generated = sum(total_waste_generated) / 1000,
    temporary_stored_start_year = sum(temporary_stored_start_year) / 1000,
    waste_generated_2020 = sum(waste_generated_2020) / 1000,
    temporary_stored_end_year = sum(temporary_stored_end_year) / 1000,
    waste_treated_by_producer = sum(waste_treated_by_producer) / 1000,
    waste_handed_to_others_RS = sum(waste_handed_to_others_RS) / 1000,
    waste_sent_to_EU = sum(waste_sent_to_EU) / 1000,
    waste_sent_to_non_EU = sum(waste_sent_to_non_EU) / 1000
  ) |>
  ungroup()

processed_sheets[[1]] <- generation.20

# to csv
write_excel_csv(processed_sheets[[1]], "2020 data\\2020 filtered\\generation\\generation_20.csv")
```

## 2020 - Data from waste collectors' annual reports

### Code

```{r waste_collection_2020}
# Specify the path to the Excel file
collection_20.path <- "2020 data\\podatki LP ODP-zbiranje 2020.xlsx"

# Get the sheet names
sheet_names <- excel_sheets(collection_20.path)

# Initialize a list to store processed sheets
processed_sheets <- list()

# Define the sheets where n_max should be 3 (replace with actual sheet indices)
sheets_with_n_max_3 <- c(2, 3, 5)

# Loop through each sheet
for (sheet_name in sheet_names) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else 2
  processed_sheet <- process_sheet(collection_20.path, sheet_index, n_max)
  processed_sheets[[sheet_name]] <- processed_sheet
}

# Applying the function to each data frame in processed_sheets
processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

# Table 1: Preliminary storage of waste in 2020
waste_storage.20 <- processed_sheets[[1]]

waste_storage.20 <- waste_storage.20 |>
  select(-Poročilo) |>
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    waste_code = `waste_code`,
    type_of_waste = `Naziv odpadka`,
    waste_stored_start_year = `Predhodno skladiščeni odpadki na dan 1.1.2020 kg`,
    waste_stored_end_year = `Predhodno skladiščeni odpadki na dan 31.12.2020 kg`
  )

waste_storage.20 <- rename_waste_names(waste_storage.20)

waste_storage.20 <- waste_storage.20 |>
    waste_stored_start_year = waste_stored_start_year / 1000,
    waste_stored_end_year = waste_stored_end_year / 1000
  )

processed_sheets[[1]] <- waste_storage.20

# Table 2: Collected waste in 2020
collected_waste.20 <- processed_sheets[[2]]

collected_waste.20 <- collected_waste.20 |>
  select(-Poročilo) |>
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    waste_code = `waste_code`,
    type_of_waste = `Naziv odpadka`,
    waste_received_from_producers_no_list = `Zbrani odpadki, prevzeti od izvirnih povzročiteljev brez evidenčnega lista (prepuščeni) kg`,
    waste_received_from_producers_with_list = `Zbrani odpadki, prevzeti od izvirnih povzročiteljev z evidenčnim listom (oddani) kg`,
    waste_received_from_collectors_RS = `Zbrani odpadki prevzeti od drugih imetnikov od zbiralcev v RS kg`,
    waste_received_from_processors_RS = `Zbrani odpadki prevzeti od drugih imetnikov od izvajalcev obdelave v RS kg`
  )

collected_waste.20 <- rename_waste_names(collected_waste.20)

collected_waste.20 <- collected_waste.20 |>
  mutate(total_waste_collected = waste_received_from_producers_no_list + waste_received_from_producers_with_list + waste_received_from_collectors_RS + waste_received_from_processors_RS)

collected_waste.20 <- collected_waste.20 |>
  mutate(
    total_waste_collected = total_waste_collected / 1000,
    waste_received_from_producers_no_list = waste_received_from_producers_no_list / 1000,
    waste_received_from_producers_with_list = waste_received_from_producers_with_list / 1000,
    waste_received_from_collectors_RS = waste_received_from_collectors_RS / 1000,
    waste_received_from_processors_RS = waste_received_from_processors_RS / 1000
  )

processed_sheets[[2]] <- collected_waste.20 |> select(year, statistical_region, type_of_waste, total_waste_collected, waste_received_from_producers_no_list, waste_received_from_producers_with_list, waste_received_from_collectors_RS, waste_received_from_processors_RS)

# Table 3: Collected municipal waste in 2020 by source of origin
municipal_waste.20 <- processed_sheets[[3]]

municipal_waste.20 <- municipal_waste.20 |>
  select(-Poročilo) |>
  rename(
    year = `Leto`,
    waste_code = `waste_code`,
    type_of_waste = `Naziv odpadka`,
    total_municipal_waste_collected = `Zbrani komunalni odpadki skupaj kg`,
    municipal_waste_collected_from_households = `Zbrani komunalni odpadki glede na vir nastanka iz gospodinjstev kg`,
    municipal_waste_collected_from_activities = `Zbrani komunalni odpadki glede na vir nastanka iz dejavnosti kg`
  )

municipal_waste.20 <- rename_waste_names(municipal_waste.20)

municipal_waste.20 <- municipal_waste.20 |>
  mutate(
    total_municipal_waste_collected = total_municipal_waste_collected / 1000,
    municipal_waste_collected_from_households = municipal_waste_collected_from_households / 1000,
    municipal_waste_collected_from_activities = municipal_waste_collected_from_activities / 1000
  )

processed_sheets[[3]] <- municipal_waste.20

# Table 4: Collected municipal waste in 2020 by municipality of origin
municipal_waste_origin.20 <- processed_sheets[[4]]

municipal_waste_origin.20 <- municipal_waste_origin.20 |>
  select(-Poročilo, -`Šifra občine 1`) |>
  rename(
    year = `Leto`,
    waste_code = `waste_code`,
    type_of_waste = `Naziv odpadka`,
    municipal_waste_collected_by_municipality = `Komunalni odpadki po občini izvora kg`,
    name_of_municipality = `Naziv občine`
  )

municipal_waste_origin.20 <- rename_waste_names(municipal_waste_origin.20)

municipal_waste_origin.20 <- municipal_waste_origin.20 |>
  left_join(municipality_region_mapping, by = "name_of_municipality")

municipal_waste_origin.20 <- municipal_waste_origin.20 |>
  mutate(
    municipal_waste_collected_by_municipality = municipal_waste_collected_by_municipality / 1000
  )

processed_sheets[[4]] <- municipal_waste_origin.20

# Table 5: Management of collected waste in 2020
management_collected_waste.20 <- processed_sheets[[5]]

management_collected_waste.20 <- management_collected_waste.20 |>
  select(-Poročilo) |>
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    waste_code = `waste_code`,
    type_of_waste = `Naziv odpadka`,
    waste_handed_to_collectors_RS = `Odpadki oddani v nadaljnje ravnanje zbiralcem v RS kg`,
    waste_delivered_to_operators_RS = `Odpadki oddani v nadaljnje ravnanje izvajalcem obdelave v RS kg`,
    waste_sent_to_EU = `Odpadki oddani v nadaljnje ravnanje v druge države članice EU kg`,
    waste_sent_to_non_EU = `Odpadki oddani v nadaljnje ravnanje v države izven EU kg`
  )

management_collected_waste.20 <- rename_waste_names(management_collected_waste.20)

management_collected_waste.20 <- management_collected_waste.20 |>
  mutate(
    total_waste_given_away = waste_handed_to_collectors_RS + waste_delivered_to_operators_RS + waste_sent_to_EU + waste_sent_to_non_EU
  )

management_collected_waste.20 <- management_collected_waste.20 |>
  mutate(
    total_waste_given_away = total_waste_given_away / 1000,
    waste_handed_to_collectors_RS = waste_handed_to_collectors_RS / 1000,
    waste_delivered_to_operators_RS = waste_delivered_to_operators_RS / 1000,
    waste_sent_to_EU = waste_sent_to_EU / 1000,
    waste_sent_to_non_EU = waste_sent_to_non_EU / 1000
  )

processed_sheets[[5]] <- management_collected_waste.20 |> select(year, statistical_region, type_of_waste, total_waste_given_away, waste_handed_to_collectors_RS, waste_delivered_to_operators_RS, waste_sent_to_EU, waste_sent_to_non_EU)

# Table 6: Home composting in 2020
home_composting.20 <- processed_sheets[[6]]

home_composting.20 <- home_composting.20 |>
  select(-`Poročilo ODP-zbiranje`, -`Šifra občine 1 1`) |>
  rename(
    year = `Leto 2020`,
    name_of_municipality = `Naziv občine AJDOVŠČINA`,
    total_households = `Število gospodinjstev na občino 2 7035`,
    households_composting = `Število gospodinjstev na občino, ki hišno kompostirajo 1740`
  )

home_composting.20 <- home_composting.20 |>
  left_join(municipality_region_mapping, by = "name_of_municipality")

processed_sheets[[6]] <- home_composting.20

sheet_names <- c(
  "Waste storage",
  "Waste received",
  "Municipal waste received for treatment, separated by municipality of origin",
  "Management of collected waste",
  "Home composting"
)

names(processed_sheets) <- sheet_names

for (sheet_name in sheet_names) {
  write_excel_csv(processed_sheets[[sheet_name]], paste0("2020 data\\2020 filtered\\collection\\", tolower(gsub(" ", "_", sheet_name)), "_20.csv"))
}
```

## 2020 - Data from annual reports of waste treatment operators

### Code

```{r waste_treatment_2020}
# Specify the path to the Excel file
treatment_20.path <- "2020 data\\podatki LP ODP-obdelava 2020.xlsx"

# Get the sheet names
sheet_names <- excel_sheets(treatment_20.path)

# Initialize a list to store processed sheets
processed_sheets <- list()

# Define the sheets where n_max should be 3 (replace with actual sheet indices)
sheets_with_n_max_3 <- c(2, 4, 5, 9)

# Loop through each sheet
for (sheet_name in sheet_names) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else 2
  processed_sheet <- process_sheet(treatment_20.path, sheet_index, n_max)
  processed_sheets[[sheet_name]] <- processed_sheet
}

# Applying the function to each data frame in processed_sheets
processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

# Table 1: Waste storage in 2020
waste_storage.20 <- processed_sheets[[1]]

waste_storage.20 <- waste_storage.20 |>
  select(-Poročilo) |>
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    type_of_waste = `Naziv odpadka`,
    waste_stored_start_year = `Skladiščeni odpadki na dan 1.1.2020 kg`,
    waste_stored_end_year = `Skladiščeni odpadki na dan 31.12.2020 kg`
  )

waste_storage.20 <- rename_waste_names(waste_storage.20)

waste_storage.20 <- waste_storage.20 |>
  group_by(year, statistical_region, type_of_waste) |>
  summarize(
    waste_stored_start_year = sum(waste_stored_start_year) / 1000,
    waste_stored_end_year = sum(waste_stored_end_year) / 1000
  ) |>
  ungroup()

processed_sheets[[1]] <- waste_storage.20

# Table 2: Waste received in 2020
waste_received.20 <- processed_sheets[[2]]

waste_received.20 <- waste_received.20 |>
  select(-Poročilo) |>
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    type_of_waste = `Naziv odpadka`,
    waste_received_own_waste = `Prevzeti odpadki lastni odpadki kg`,
    waste_received_from_producers_RS = `Prevzeti odpadki od drugih izvirnih povzročiteljev v RS kg`,
    waste_received_from_collectors_RS = `Prevzeti odpadki od zbiralcev odpadkov v RS kg`,
    waste_received_from_processors_RS = `Prevzeti odpadki od izvajalcev obdelave v RS kg`,
    waste_received_from_EU = `Prevzeti odpadki iz drugih držav članic EU kg`,
    waste_received_from_non_EU = `Prevzeti odpadki iz držav izven EU kg`,
    total_waste_received = `Prevzeti odpadki SKUPAJ kg`,
    treatment_operation = `Postopek obdelave (R, D)`
  )

waste_received.20 <- rename_waste_names(waste_received.20)

waste_received.20 <- waste_received.20 |>
  group_by(year, statistical_region, type_of_waste) |>
  summarize(
    total_waste_received = sum(total_waste_received) / 1000,
    waste_received_own_waste = sum(waste_received_own_waste) / 1000,
    waste_received_from_producers_RS = sum(waste_received_from_producers_RS) / 1000,
    waste_received_from_collectors_RS = sum(waste_received_from_collectors_RS) / 1000,
    waste_received_from_processors_RS = sum(waste_received_from_processors_RS) / 1000,
    waste_received_from_EU = sum(waste_received_from_EU) / 1000,
    waste_received_from_non_EU = sum(waste_received_from_non_EU) / 1000
  ) |>
  ungroup()

processed_sheets[[2]] <- waste_received.20

# Table 3: Treatment of waste received in 2020
treating_waste.20 <- processed_sheets[[3]]

treating_waste.20 <- treating_waste.20 |>
  select(-Poročilo) |>
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    type_of_waste = `Naziv odpadka`,
    waste_entering_treatment_process = `Odpadki, ki vstopajo v postopek obdelave (kg)`,
    treatment_process = `Postopek obdelave (R, D)`
  )

treating_waste.20 <- rename_waste_names(treating_waste.20)

treating_waste.20 <- treating_waste.20 |>
  group_by(year, statistical_region, type_of_waste) |>
  summarize(
    waste_entering_treatment_process = sum(waste_entering_treatment_process) / 1000
  ) |>
  ungroup()

processed_sheets[[3]] <- treating_waste.20

# Table 4: Waste at the exit of the treatment process and untreated waste delivered for further management in 2020
management_waste.20 <- processed_sheets[[4]]

management_waste.20 <- management_waste.20 |>
  select(-Poročilo) |>
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija`,
    input_waste_name = `Odpadki na vhodu v obdelavo in prevzeti neobdelani odpadki naziv`,
    output_waste_name = `Odpadki na izhodu iz postopka obdelave in oddani neobdelani odpadki naziv`,
    waste_handed_to_collectors_RS = `Odpadki, oddani v nadaljnje ravnanje zbiralcu odpadkov v SI kg`,
    waste_delivered_to_operators_RS = `Odpadki, oddani v nadaljnje ravnanje izvajalcu obdelave v SI kg`,
    waste_sent_to_EU = `Odpadki, oddani v nadaljnje ravnanje v druge države članice EU kg`,
    waste_sent_to_non_EU = `Odpadki, oddani v nadaljnje ravnanje v države izven EU kg`
  )

management_waste.20 <- rename_waste_names(management_waste.20, "input_waste_name")

management_waste.20 <- rename_waste_names(management_waste.20, "output_waste_name")

management_waste.20 <- management_waste.20 |>
  group_by(year, statistical_region) |>
  summarize(
    waste_handed_to_collectors_RS = sum(waste_handed_to_collectors_RS) / 1000,
    waste_delivered_to_operators_RS = sum(waste_delivered_to_operators_RS) / 1000,
    waste_sent_to_EU = sum(waste_sent_to_EU) / 1000,
    waste_sent_to_non_EU = sum(waste_sent_to_non_EU) / 1000
  ) |>
  ungroup()

processed_sheets[[4]] <- management_waste.20

# Table 4a: Recovered substances or objects that lost their waste status and were delivered for further use in 2020
management_waste.20a <- processed_sheets[[5]]

management_waste.20a <- management_waste.20a |>
  select(-Poročilo) |>
  rename(
    year = `Leto`,
    input_waste_name = `Odpadki na vhodu v obdelavo naziv`,
    output_waste_name = `Predelana snov ali predmet, ki je izgubil status odpadka, na izhodu iz postopka obdelave`,
    delivered_to_storage_or_other_persons_RS = `Oddano v skladišče ali drugim osebam v RS kg`,
    shipped_to_EU = `Oddano v druge države članice EU kg`,
    shipped_to_non_EU = `Oddano v države izven EU kg`
  )

management_waste.20a <- rename_waste_names(management_waste.20a, "input_waste_name")

management_waste.20a$output_waste_name <- case_when(
  management_waste.20a$output_waste_name == "les" ~ "wood",
  management_waste.20a$output_waste_name == "drugo" ~ "other"
)

management_waste.20a <- management_waste.20a |>
  group_by(year, input_waste_name, output_waste_name) |>
  summarize(
    delivered_to_storage_or_other_persons_RS = sum(delivered_to_storage_or_other_persons_RS) / 1000,
    shipped_to_EU = sum(shipped_to_EU) / 1000,
    shipped_to_non_EU = sum(shipped_to_non_EU) / 1000
  ) |>
  ungroup()

processed_sheets[[5]] <- management_waste.20a

# Table 5: Municipal waste received for treatment, separated by municipality of origin in 2020
waste_treatment.20 <- processed_sheets[[6]]

waste_treatment.20 <- waste_treatment.20 |>
  select(-Poročilo, -`Šifra občine 1`) |>
  rename(
    year = `Leto`,
    waste_code = `waste_code`,
    type_of_waste = `Naziv odpadka`,
    waste_collected_by_municipality = `Prevzeti odpadki glede na občino izvora (kg)`,
    name_of_municipality = `Naziv občine`
  )

waste_treatment.20 <- rename_waste_names(waste_treatment.20)

waste_treatment.20 <- waste_treatment.20 |>
  left_join(municipality_region_mapping, by = "name_of_municipality")

waste_treatment.20 <- waste_treatment.20 |>
  group_by(year, statistical_region, name_of_municipality, type_of_waste) |>
  summarize(
    waste_collected_by_municipality = sum(waste_collected_by_municipality) / 1000
  ) |>
  ungroup()

processed_sheets[[6]] <- waste_treatment.20

# Table 6: Mass difference between waste input and treatment product volumes due to mass change during the treatment process
mass_difference.20 <- processed_sheets[[7]]

mass_difference.20 <- mass_difference.20 |>
  select(-Poročilo) |>
  rename(
    year = `Leto`,
    input_waste_name = `NA naziv`,
    mass_change = `Zmanjšanje ali povečanje mase med postopkom obdelave`
  )

mass_difference.20 <- rename_waste_names(mass_difference.20, "input_waste_name")

mass_difference.20 <- mass_difference.20 |>
  group_by(year, input_waste_name) |>
  summarize(
    mass_change = sum(as.numeric(mass_change)) / 1000
  ) |>
  ungroup()

processed_sheets[[7]] <- mass_difference.20

# Table 7: Capacity and status of landfills (for inert, hazardous, and non-hazardous waste, including municipal waste) in 2021
landfill_capacity.20 <- processed_sheets[[8]]

landfill_capacity.20 <- landfill_capacity.20 |>
  select(-Poročilo) |>
  rename(
    year = `Leto`,
    landfill_site = `Odlagališče`,
    volume_filled_start_year = `Zapolnjen volumen na odlagalnem polju na začetku leta m3`,
    area_filled_start_year = `Zapolnjena površina na odlagalnem polju na začetku leta m2`,
    volume_free_end_year = `Volumen proste kapacitete odlagalnega polja na koncu leta m3`,
    area_free_end_year = `Površina proste kapacitete odlagalnega polja na koncu leta m2`,
    total_disposal_capacity = `Celotna zmogljivost odlaganja t`,
    remaining_capacity_start_year = `Preostala zmogljivost na dan 1.1. t`,
    remaining_capacity_end_year = `Preostala zmogljivost na dan 31.12. t`,
    start_date_disposal = `Datum začetka odlaganja`,
    end_date_disposal = `Datum konca odlaganja`
  )

landfill_capacity.20 <- landfill_capacity.20 |>
  mutate(landfill_site = case_when(
    landfill_site == "Odlagališče 1" ~ "Landfill 1",
    landfill_site == "Odlagališče 2" ~ "Landfill 2",
    landfill_site == "Odlagališče 3" ~ "Landfill 3",
    landfill_site == "Odlagališče 4a" ~ "Landfill 4a",
    landfill_site == "Odlagališče 4b" ~ "Landfill 4b",
    landfill_site == "Odlagališče 5a" ~ "Landfill 5a",
    landfill_site == "Odlagališče 5b" ~ "Landfill 5b",
    landfill_site == "Odlagališče 6" ~ "Landfill 6",
    landfill_site == "Odlagališče 7" ~ "Landfill 7",
    landfill_site == "Odlagališče 8" ~ "Landfill 8",
    landfill_site == "Odlagališče 9" ~ "Landfill 9",
    landfill_site == "Odlagališče 10" ~ "Landfill 10",
    landfill_site == "Odlagališče 11" ~ "Landfill 11",
    landfill_site == "Odlagališče 12" ~ "Landfill 12",
    landfill_site == "Odlagališče 13" ~ "Landfill 13",
    landfill_site == "Odlagališče 14" ~ "Landfill 14",
    landfill_site == "Odlagališče 15" ~ "Landfill 15",
    landfill_site == "Odlagališče 16" ~ "Landfill 16"
  ))

processed_sheets[[8]] <- landfill_capacity.20

# Table 8: Waste management at landfills in 2020
landfill_waste.20 <- processed_sheets[[9]]

landfill_waste.20 <- landfill_waste.20 |>
  select(-Poročilo) |>
  rename(
    year = `Leto`,
    type_of_waste = `Naziv odpadka`,
    total_waste_received = `Prevzeti odpadki vsi odpadki`,
    waste_without_assessment = `Prevzeti odpadki od tega odpadki brez ocene odpadka`,
    disposed_waste_total = `Ravnanje z odpadki na odlagališču Odloženi odpadki (D1) skupaj`,
    disposed_waste_hazardous = `Ravnanje z odpadki na odlagališču nevarni odpadki`,
    disposed_waste_non_hazardous = `Ravnanje z odpadki na odlagališču nenevarni odpadki`,
    disposed_waste_inert = `Ravnanje z odpadki na odlagališču inertni odpadki`,
    disposed_waste_for_construction = `Ravnanje z odpadki na odlagališču Odpadki za gradnjo objektov odlagališča`,
    disposed_waste_for_covering = `Ravnanje z odpadki na odlagališču Odpadki za prekrivanje odlagališča`
  )

landfill_waste.20 <- rename_waste_names(landfill_waste.20)

## Drop columns containing NA values
landfill_waste.20 <- select_if(landfill_waste.20, ~ !all(is.na(.)))

landfill_waste.20 <- landfill_waste.20 |>
  group_by(year, type_of_waste) |>
  summarize(
    total_waste_received = sum(as.numeric(total_waste_received)) / 1000,
    disposed_waste_total = sum(as.numeric(disposed_waste_total)) / 1000,
    disposed_waste_non_hazardous = sum(as.numeric(disposed_waste_non_hazardous)) / 1000
  ) |>
  ungroup()

processed_sheets[[9]] <- landfill_waste.20

# Table 9: Municipal waste disposed of by municipality of origin in 2020 - EXCLUDED
municipal_waste_disposed.20 <- processed_sheets[[10]]

sheet_names <- c(
  "Waste storage",
  "Waste received",
  "Treatment of waste received",
  "Management of waste from treatment operations and untreated waste",
  "Management of treatment products that are no longer waste",
  "Municipal waste received for treatment, separated by municipality of origin",
  "Mass difference between waste input and treatment product volumes due to mass change during the treatment process",
  "Landfill capacity and status (for inert, hazardous and non-hazardous waste, including municipal waste)",
  "Landfill waste management"
)

names(processed_sheets) <- sheet_names

for (sheet_name in sheet_names) {
  write_excel_csv(processed_sheets[[sheet_name]], paste0("2020 data\\2020 filtered\\treatment\\", tolower(gsub(" ", "_", sheet_name)), "_20.csv"))
}
```

# Year 2019

## 2019 - Data from the annual reports of the original emitters

### Code

```{r waste_generation_2019}
# Specify the path to the Excel file
waste_generation_19.path <- "2019 data\\podatki LP ODP-nastajanje 2019.xlsx"

# Get the sheet names
sheet_names <- excel_sheets(waste_generation_19.path)

# Initialize a list to store processed sheets
processed_sheets <- list()

# Define the sheets where n_max should be 3 (replace with actual sheet indices)
# if needed
sheets_with_n_max_3 <- c(2, 3, 5)

# Loop through each sheet
for (sheet_name in sheet_names) {
  sheet_index <- match(sheet_name, sheet_names)
  n_max <- if (sheet_index %in% sheets_with_n_max_3) 3 else 2
  processed_sheet <- process_sheet(waste_generation_19.path, sheet_index, n_max)
  processed_sheets[[sheet_name]] <- processed_sheet
}

# Applying the function to each data frame in processed_sheets
processed_sheets <- lapply(processed_sheets, filter_df_by_codes)

generation.19 <- processed_sheets[[1]]

generation.19 <- generation.19 |>
  select(-Poročilo) |>
  rename(
    year = `Leto`,
    statistical_region = `Statistična regija kraja nastanka odpadkov`,
    waste_code = `waste_code`,
    type_of_waste = `Naziv odpadka`,
    total_waste_generated = `Odpadki skupaj: nastalo in skladiščeno kg`,
    temporary_stored_start_year = `Začasno skladiščeni odpadki na dan 1.1.2019 kg`,
    waste_generated_2019 = `Odpadki nastali v letu 2019 kg`,
    temporary_stored_end_year = `Začasno skladiščeni odpadki na dan 31.12.2019 kg`,
    waste_treated_by_producer = `Odpadki, ki jih je izvirni povzročitelj obdelal sam kg`,
    waste_handed_to_others_RS = `Odpadki oddani v nadaljnje ravnanje drugim osebam v RS kg`,
    waste_sent_to_EU = `Odpadki poslani v obdelavo v druge države članice EU kg`,
    waste_sent_to_non_EU = `Odpadki poslani v obdelavo v države izven EU kg`
  )

generation.19 <- rename_waste_names(generation.19)

# change to tons
generation.19 <- generation.19 |>
  group_by(year, statistical_region, type_of_waste) |>
  summarise(
    total_waste_generated = sum(total_waste_generated) / 1000,
    temporary_stored_start_year = sum(temporary_stored_start_year) / 1000,
    waste_generated_2019 = sum(waste_generated_2019) / 1000,
    temporary_stored_end_year = sum(temporary_stored_end_year) / 1000,
    waste_treated_by_producer = sum(waste_treated_by_producer) / 1000,
    waste_handed_to_others_RS = sum(waste_handed_to_others_RS) / 1000,
    waste_sent_to_EU = sum(waste_sent_to_EU) / 1000,
    waste_sent_to_non_EU = sum(waste_sent_to_non_EU) / 1000
  ) |>
  ungroup()

processed_sheets[[1]] <- generation.19

# to csv
write_excel_csv(processed_sheets[[1]], "2019 data\\2019 filtered\\generation\\generation_19.csv")
```

## 2019 - Data from the annual reports on waste collection from manufacturing and service activities

### Code

```{r waste_collection_2019}
waste_collection_19.path <- "2019 data\\ODP_Z_2019_objava_21122020.xlsx"

waste_collection_19.sheet1 <- read_excel(waste_collection_19.path, skip = 2, sheet = 1)

waste_collection_19.by_codes1 <- waste_collection_19.sheet1 |>
  rename(waste_code = `ŠT. ODPADKA`) |>
  filter(
    waste_code %in% codes |
      grepl("^03 01 [0-9]", waste_code, perl = TRUE) &
        !grepl("03 01 04", waste_code, perl = TRUE)
  )

# change all NA to zero
waste_collection_19.by_codes1[is.na(waste_collection_19.by_codes1)] <- 0

# Table 1: Waste storage in 2019
waste_storage.19 <- waste_collection_19.by_codes1

waste_storage.19 <- waste_storage.19 |>
  select(-`PRIDOBLJENI PODATKI                 ( 1-poročilo oddano,                    2-podatki ARSO)`, -SKD, -`MATIČNA ŠTEVILKA`) |>
  rename(
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `waste_code`,
    name_of_company = `NAZIV`,
    waste_stored_start_year = `SKLADIŠČENA KOLIČINA ODPADKOV NA DAN 1.1.2019 (kg)`,
    waste_stored_end_year = `SKLADIŠČENA KOLIČINA ODPADKOV NA DAN 31.12.2019 (kg)`
  )

# add type_of_waste column based on the waste_code
waste_storage.19 <- waste_storage.19 |> categorize_waste()

waste_storage.19 <- waste_storage.19 |>
  group_by(statistical_region, type_of_waste) |>
  summarise(
    waste_stored_start_year = sum(waste_stored_start_year) / 1000,
    waste_stored_end_year = sum(waste_stored_end_year) / 1000
  ) |>
  ungroup() |>
  mutate(year = 2019)

waste_storage.19 <- waste_storage.19 |>
  select(year, statistical_region, type_of_waste, waste_stored_start_year, waste_stored_end_year)

waste_collection_19.sheet1 <- waste_storage.19

# Table 2: Waste collected in 2019
waste_collection_19.sheet2 <- read_excel(waste_collection_19.path, skip = 2, sheet = 2)

waste_collection_19.by_codes2 <- waste_collection_19.sheet2 |>
  rename(waste_code = `ŠT. ODPADKA`) |>
  filter(
    waste_code %in% codes |
      grepl("^03 01 [0-9]", waste_code, perl = TRUE) &
        !grepl("03 01 04", waste_code, perl = TRUE)
  )

waste_collected.19 <- waste_collection_19.by_codes2

waste_collected.19 <- waste_collected.19 |>
  select(-`PRIDOBLJENI PODATKI                 ( 1-poročilo oddano,                    2-podatki ARSO)`, -SKD, -`MATIČNA ŠTEVILKA`) |>
  rename(
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `waste_code`,
    name_of_company = `NAZIV`,
    waste_received = `KOLIČINA ZBRANIH ODPADKOV (kg)`,
    gathered_from = `ZBRANO OD`
  )

waste_collected.19$gathered_from |> unique()

## Rename gathered_from

waste_collected.19 <- waste_collected.19 |>
  mutate(
    gathered_from = case_when(
      gathered_from == "1-izvirni povzrocitelj: prepušceno (brez evidencnega lista)" ~ "received from producers without a list",
      gathered_from == "2-izvirni povzrocitelj: oddano (z evidencnim listom)" ~ "received from producers with a list",
      gathered_from == "3-drug zbiralec" ~ "received from other collectors",
      gathered_from == "4-izvajalec obdelave" ~ "received from processing operators"
    )
  )

# add type_of_waste column based on the waste_code
waste_collected.19 <- waste_collected.19 |> categorize_waste()

# If the company is from the same region and waste type is the same, combine the rows
# waste_collected.19 <- waste_collected.19 |>
#   group_by(statistical_region, waste_code, name_of_company, # gathered_from, type_of_waste) |>
#  summarise(waste_received = sum(waste_received))

# define columns based on gathered_form
waste_collected.19 <- waste_collected.19 |>
  mutate(
    waste_from_producers_no_record = case_when(
      gathered_from == "received from producers without a list" ~ waste_received,
      TRUE ~ 0
    ),
    waste_from_producers_with_record = case_when(
      gathered_from == "received from producers with a list" ~ waste_received,
      TRUE ~ 0
    ),
    waste_from_collectors_RS = case_when(
      gathered_from == "received from other collectors" ~ waste_received,
      TRUE ~ 0
    ),
    waste_from_processors_RS = case_when(
      gathered_from == "received from processing operators" ~ waste_received,
      TRUE ~ 0
    )
  )

waste_collected.19 <- waste_collected.19 |>
  select(-gathered_from)

waste_collected.19 <- waste_collected.19 |>
  group_by(statistical_region, type_of_waste) |>
  summarise(
    waste_received = sum(waste_received) / 1000,
    waste_from_producers_no_record = sum(waste_from_producers_no_record) / 1000,
    waste_from_producers_with_record = sum(waste_from_producers_with_record) / 1000,
    waste_from_collectors_RS = sum(waste_from_collectors_RS) / 1000,
    waste_from_processors_RS = sum(waste_from_processors_RS) / 1000
  ) |>
  ungroup() |>
  mutate(year = 2019)

waste_collected.19 <- waste_collected.19 |>
  select(year, statistical_region, type_of_waste, waste_received, waste_from_producers_no_record, waste_from_producers_with_record, waste_from_collectors_RS, waste_from_processors_RS)

waste_collection_19.sheet2 <- waste_collected.19

# Table 3: Waste collected in 2019 by municipality of origin
waste_collection_19.sheet3 <- read_excel(waste_collection_19.path, skip = 2, sheet = 3)

waste_collection_19.by_codes3 <- waste_collection_19.sheet3 |>
  rename(waste_code = `ŠT. ODPADKA`) |>
  filter(
    waste_code %in% codes |
      grepl("^03 01 [0-9]", waste_code, perl = TRUE) &
        !grepl("03 01 04", waste_code, perl = TRUE)
  )

waste_collected_municipality.19 <- waste_collection_19.by_codes3

waste_collected_municipality.19 <- waste_collected_municipality.19 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD) |>
  rename(
    waste_code = `waste_code`,
    name_of_company = `NAZIV IN NASLOV`,
    total_waste_collected = `KOLIČINA SKUPAJ (kg)`,
    municipal_waste_collected = `KOLIČINA IZ GOSPODINJSTEV (kg)`,
    waste_collected_from_activities = `KOLIČINA IZ DEJAVNOSTI (kg)`
  )

# if waste_from_collected_activities is NA, set it to zero
waste_collected_municipality.19$waste_collected_from_activities[is.na(waste_collected_municipality.19$waste_collected_from_activities)] <- 0

# add type_of_waste column based on the waste_code
waste_collected_municipality.19 <- waste_collected_municipality.19 |> categorize_waste()

waste_collected_municipality.19 <- waste_collected_municipality.19 |>
  mutate(year = 2019)

waste_collected_municipality.19 <- waste_collected_municipality.19 |>
  group_by(year, name_of_company, type_of_waste) |>
  summarise(
    total_waste_collected = sum(total_waste_collected) / 1000,
    municipal_waste_collected = sum(municipal_waste_collected) / 1000,
    waste_collected_from_activities = sum(waste_collected_from_activities) / 1000
  ) |>
  ungroup()

waste_collection_19.sheet3 <- waste_collected_municipality.19

# Table 4: Collected Municipal Waste in 2019, Separated by Municipality of Origin
municipal_waste_origin_19.sheet4 <- read_excel(waste_collection_19.path, skip = 2, sheet = 4)

municipal_waste_origin_19.by_codes4 <- municipal_waste_origin_19.sheet4 |>
  rename(waste_code = `ŠT. ODPADKA`) |>
  filter(
    waste_code %in% codes |
      grepl("^03 01 [0-9]", waste_code, perl = TRUE) &
        !grepl("03 01 04", waste_code, perl = TRUE)
  )

municipal_waste_origin_19 <- municipal_waste_origin_19.by_codes4

municipal_waste_origin_19 <- municipal_waste_origin_19 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD) |>
  rename(
    waste_code = `waste_code`,
    name_of_company = `NAZIV`,
    total_waste_collected = `SKUPNA KOLIČINA (kg)`,
    name_of_municipality = `NAZIV OBČINE`
  )

# add type_of_waste column based on the waste_code
municipal_waste_origin_19 <- municipal_waste_origin_19 |> categorize_waste()

# based on name_of_municipality, add the region
municipal_waste_origin_19 <- municipal_waste_origin_19 |>
  left_join(municipality_region_mapping, by = "name_of_municipality") |>
  mutate(year = 2019)

municipal_waste_origin_19 <- municipal_waste_origin_19 |>
  group_by(year, statistical_region, name_of_municipality, type_of_waste) |>
  summarise(total_waste_collected = sum(total_waste_collected) / 1000) |>
  ungroup()

municipal_waste_origin_19.sheet4 <- municipal_waste_origin_19

# Table 5: Handling of Collected Waste in 2019
waste_handling_19.sheet5 <- read_excel(waste_collection_19.path, skip = 2, sheet = 5)

waste_handling_19.by_codes5 <- waste_handling_19.sheet5 |>
  rename(waste_code = `ŠT. ODPADKA`) |>
  filter(
    waste_code %in% codes |
      grepl("^03 01 [0-9]", waste_code, perl = TRUE) &
        !grepl("03 01 04", waste_code, perl = TRUE)
  )

waste_handling_19 <- waste_handling_19.by_codes5

waste_handling_19 <- waste_handling_19 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD, -`PRIDOBLJENI PODATKI                 ( 1-poročilo oddano,                    2-podatki ARSO)`) |>
  rename(
    name_of_company = `NAZIV`,
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `waste_code`,
    total_waste_delivered = `ODDANA KOLIČINA ODPADKOV (kg)`,
    delivered_to = `ODDANO KOMU`,
    treatment_process = `POSTOPEK OBDELAVE, ČE SO BILI ODPADKI POSLANI V OBDELAVO V TUJINO(R in D postopki, D_00, R_00-drugi postopki obdelave in PU-ponovna uporaba)`
  )

# add type_of_waste column based on the waste_code
waste_handling_19 <- waste_handling_19 |> categorize_waste()

# Rename delivered_to
waste_handling_19 <- waste_handling_19 |>
  mutate(
    delivered_to = case_when(
      delivered_to == "1-drug zbiralec v RS" ~ "other collector in RS",
      delivered_to == "2-izvajalec obdelave v RS" ~ "processing operator in RS",
      delivered_to == "3-druga država članica EU" ~ "other EU country"
    )
  )


# define columns per delivered_to types
waste_handling_19 <- waste_handling_19 |>
  mutate(
    waste_delivered_to_other_collector_RS = case_when(
      delivered_to == "other collector in RS" ~ total_waste_delivered,
      TRUE ~ 0
    ),
    waste_delivered_to_processing_operator_RS = case_when(
      delivered_to == "processing operator in RS" ~ total_waste_delivered,
      TRUE ~ 0
    ),
    waste_delivered_to_other_EU_country = case_when(
      delivered_to == "other EU country" ~ total_waste_delivered,
      TRUE ~ 0
    )
  )

waste_handling_19 <- waste_handling_19 |> select(-treatment_process)

waste_handling_19 <- waste_handling_19 |>
  group_by(statistical_region, type_of_waste) |>
  summarise(
    total_waste_delivered = sum(total_waste_delivered) / 1000,
    waste_delivered_to_other_collector_RS = sum(waste_delivered_to_other_collector_RS) / 1000,
    waste_delivered_to_processing_operator_RS = sum(waste_delivered_to_processing_operator_RS) / 1000,
    waste_delivered_to_other_EU_country = sum(waste_delivered_to_other_EU_country) / 1000
  ) |>
  ungroup() |>
  mutate(year = 2019)

waste_handling_19 <- waste_handling_19 |> select(year, statistical_region, type_of_waste, total_waste_delivered, waste_delivered_to_other_collector_RS, waste_delivered_to_processing_operator_RS, waste_delivered_to_other_EU_country)

# sheet names
sheet_names <- c(
  "Waste storage",
  "Waste collected",
  "Waste collected by municipality of origin",
  "Municipal waste collected by municipality of origin",
  "Waste handling"
)

# combine sheets into one list
waste_collection.19 <- list(
  waste_storage.19,
  waste_collected.19,
  waste_collected_municipality.19,
  municipal_waste_origin_19,
  waste_handling_19
)

names(waste_collection.19) <- sheet_names

# write to csv
for (sheet_name in sheet_names) {
  write_excel_csv(waste_collection.19[[sheet_name]], paste0("2019 data\\2019 filtered\\collection\\", tolower(gsub(" ", "_", sheet_name)), "_19.csv"))
}
```

## 2019 - Data from the annual waste recovery/disposal reports

### Code

```{r waste_recovery_2019}
waste_recovery_19.path <- "2019 data\\ODP_P_2019_objava_21122020.xlsx"
```

```{r waste_storage}
# WASTE STORAGE IN 2019

waste_recovery_19.sheet1 <- read_excel(waste_recovery_19.path, skip = 2, sheet = 1)

waste_recovery_19.by_codes1 <- waste_recovery_19.sheet1 |>
  rename(waste_code = `ŠT. ODPADKA`) |>
  filter(
    waste_code %in% codes |
      grepl("^03 01 [0-9]", waste_code, perl = TRUE) &
        !grepl("03 01 04", waste_code, perl = TRUE)
  )

# change all NA to zero
waste_recovery_19.by_codes1[is.na(waste_recovery_19.by_codes1)] <- 0

waste_storage.19 <- waste_recovery_19.by_codes1

waste_storage.19 <- waste_storage.19 |>
  select(-`PRIDOBLJENI PODATKI                 ( 1-poročilo oddano,                    2-podatki ARSO)`, -SKD, -`MATIČNA ŠTEVILKA`) |>
  rename(
    name_of_company = `NAZIV`,
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `waste_code`,
    waste_stored_start_year = `SKLADIŠČENA KOLIČINA NA DAN 1.1.2019 (kg)`,
    waste_stored_end_year = `SKLADIŠČENA KOLIČINA NA DAN 31.12.2019 (kg)`
  )

# add type_of_waste column based on the waste_code
waste_storage.19 <- waste_storage.19 |> categorize_waste()

waste_storage.19 <- waste_storage.19 |>
  group_by(statistical_region, type_of_waste) |>
  summarise(
    waste_stored_start_year = sum(waste_stored_start_year) / 1000,
    waste_stored_end_year = sum(waste_stored_end_year) / 1000
  ) |>
  ungroup() |>
  mutate(year = 2019)

waste_recovery_19.sheet1 <- waste_storage.19 |> select(year, statistical_region, type_of_waste, waste_stored_start_year, waste_stored_end_year)
```

```{r waste_collected}
# WASTE COLLECTED IN 2019

waste_recovery_19.sheet2 <- read_excel(waste_recovery_19.path, skip = 2, sheet = 2)

waste_recovery_19.by_codes2 <- waste_recovery_19.sheet2 |>
  rename(waste_code = `ŠT. ODPADKA`) |>
  filter(
    waste_code %in% codes |
      grepl("^03 01 [0-9]", waste_code, perl = TRUE) &
        !grepl("03 01 04", waste_code, perl = TRUE)
  )

# change all NA to zero
waste_recovery_19.by_codes2[is.na(waste_recovery_19.by_codes2)] <- 0

waste_collected.19 <- waste_recovery_19.by_codes2

waste_collected.19 <- waste_collected.19 |>
  select(-`PRIDOBLJENI PODATKI                 ( 1-poročilo oddano,                    2-podatki ARSO)`, -SKD, -`MATIČNA ŠTEVILKA`) |>
  rename(
    name_of_company = `NAZIV`,
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `waste_code`,
    total_waste_received = `PREVZETA KOLIČINA ODPADKA (kg)`,
    received_from = `PREVZETO OD`
  )

## Rename received_from
waste_collected.19 <- waste_collected.19 |>
  mutate(
    received_from = case_when(
      received_from == "1-lastni odpadki" ~ "own waste",
      received_from == "2-drug izvirni povzrocitelj v RS" ~ "other producer in RS",
      received_from == "3-(drug) zbiralec v RS" ~ "other collector in RS",
      received_from == "4-drug izvajalec obdelave v RS" ~ "other processing operator in RS",
      received_from == "5-druga država članica EU" ~ "other EU country",
      received_from == "6-tretja država (izven EU)" ~ "other country outside EU"
    )
  )

waste_collected.19 <- waste_collected.19 |> select(-`POSTOPEK OBDELAVE (R in D postopki. D_00, R_00-drugi postopki obdelave in PU-ponovna uporaba)`)

# add type_of_waste column based on the waste_code
waste_collected.19 <- waste_collected.19 |> categorize_waste()

# create from received_from
waste_collected.19 <- waste_collected.19 |>
  mutate(
    waste_received_from_producer = case_when(
      received_from == "own waste" ~ total_waste_received,
      TRUE ~ 0
    ),
    waste_received_from_collector = case_when(
      received_from == "other collector in RS" ~ total_waste_received,
      TRUE ~ 0
    ),
    waste_received_from_processing_operator = case_when(
      received_from == "other processing operator in RS" ~ total_waste_received,
      TRUE ~ 0
    ),
    waste_received_from_other_EU_country = case_when(
      received_from == "other EU country" ~ total_waste_received,
      TRUE ~ 0
    ),
    waste_received_from_other_country_outside_EU = case_when(
      received_from == "other country outside EU" ~ total_waste_received,
      TRUE ~ 0
    )
  )

waste_collected.19 <- waste_collected.19 |>
  group_by(statistical_region, type_of_waste) |>
  summarise(
    total_waste_received = sum(total_waste_received) / 1000,
    waste_received_from_producer = sum(waste_received_from_producer) / 1000,
    waste_received_from_collector = sum(waste_received_from_collector) / 1000,
    waste_received_from_processing_operator = sum(waste_received_from_processing_operator) / 1000,
    waste_received_from_other_EU_country = sum(waste_received_from_other_EU_country) / 1000,
    waste_received_from_other_country_outside_EU = sum(waste_received_from_other_country_outside_EU) / 1000
  ) |>
  ungroup() |>
  mutate(year = 2019)

waste_recovery_19.sheet2 <- waste_collected.19 |> select(year, statistical_region, type_of_waste, total_waste_received, waste_received_from_producer, waste_received_from_collector, waste_received_from_processing_operator, waste_received_from_other_EU_country, waste_received_from_other_country_outside_EU)
```

```{r treatment_waste_received}
# TREATMENT OF WASTE RECEIVED IN 2019

waste_recovery_19.sheet3 <- read_excel(waste_recovery_19.path, skip = 2, sheet = 3)

waste_recovery_19.by_codes3 <- waste_recovery_19.sheet3 |>
  rename(waste_code = `ŠT. ODPADKA`) |>
  filter(
    waste_code %in% codes |
      grepl("^03 01 [0-9]", waste_code, perl = TRUE) &
        !grepl("03 01 04", waste_code, perl = TRUE)
  )

# change all NA to zero
waste_recovery_19.by_codes3[is.na(waste_recovery_19.by_codes3)] <- 0

waste_treatment.19 <- waste_recovery_19.by_codes3

waste_treatment.19 <- waste_treatment.19 |>
  select(-`PRIDOBLJENI PODATKI                 ( 1-poročilo oddano,                    2-podatki ARSO)`, -`MATIČNA ŠTEVILKA`) |>
  rename(
    name_of_company = `NAZIV`,
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `waste_code`,
    total_waste_for_processing = `KOLIČINA ODPADKOV, DANIH V OBDELAVO (kg)`,
    treatment_process = `POSTOPEK OBDELAVE (R in D postopki obdelave, PU-ponovna uporaba, BO-brez obdelave)`,
    treatment_after_8 = `OBDELAVA PO 8.ČLENU UREDBE O ODPADKIH`
  )

# add type_of_waste column based on the waste_code
waste_treatment.19 <- waste_treatment.19 |> categorize_waste()

# treatment_after_8 if "DA" then "YES", if "NE" then "NO"
waste_treatment.19 <- waste_treatment.19 |>
  mutate(
    treatment_after_8 = case_when(
      treatment_after_8 == "DA" ~ "YES",
      treatment_after_8 == "NE" ~ "NO"
    )
  )

waste_treatment.19 <- waste_treatment.19 |>
  group_by(statistical_region, type_of_waste, treatment_process, treatment_after_8) |>
  summarise(
    total_waste_for_processing = sum(total_waste_for_processing) / 1000
  ) |>
  ungroup() |>
  mutate(year = 2019)

waste_treatment.19 <- waste_treatment.19 |>
  select(-treatment_process, -treatment_after_8) |>
  group_by(year, statistical_region, type_of_waste) |>
  summarise(total_waste_for_processing = sum(total_waste_for_processing)) |>
  ungroup()

waste_recovery_19.sheet3 <- waste_treatment.19
```

```{r treatment_process_waste}
# WASTE GENERATED IN THE TREATMENT PROCESS AND
# UNTREATED WASTE DELIVERED TO OTHERS IN 2019

waste_recovery_19.sheet4 <- read_excel(waste_recovery_19.path, skip = 2, sheet = 4)

waste_recovery_19.by_codes4 <- waste_recovery_19.sheet4 |>
  rename(waste_code = `ŠT. ODPADKA`) |>
  filter(
    waste_code %in% codes |
      grepl("^03 01 [0-9]", waste_code, perl = TRUE) &
        !grepl("03 01 04", waste_code, perl = TRUE)
  )

waste_treatment_process.19 <- waste_recovery_19.by_codes4

waste_treatment_process.19 <- waste_treatment_process.19 |>
  select(-`PRIDOBLJENI PODATKI                 ( 1-poročilo oddano,                    2-podatki ARSO)`, -`MATIČNA ŠTEVILKA`, -SKD) |>
  rename(
    name_of_company = `NAZIV`,
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `waste_code`,
    waste_recovered_and_given_away = `PO OBDELAVI NASTALI ODPADKI IN ODPADKI ODDANI DRUGIM BREZ OBDELAVE  (kg)`,
    delivered_to = `ODDANO KOMU`,
    treatment_process = `POSTOPEK OBDELAVE, ČE SO ODPADKI POSLANI V OBDELAVO V TUJINO`
  )

# add type_of_waste column based on the waste_code
waste_treatment_process.19 <- waste_treatment_process.19 |> categorize_waste()

# Rename delivered_to
waste_treatment_process.19 <- waste_treatment_process.19 |>
  mutate(
    delivered_to = case_when(
      delivered_to == "1-drug zbiralec v RS" ~ "other collector in RS",
      delivered_to == "2.drug izvajalec obdelave v RS" ~ "processing operator in RS",
      delivered_to == "3-druga država clanica EU" ~ "other EU country",
      delivered_to == "4-tretja država (izven EU)" ~ "other country outside EU"
    )
  )

waste_treatment_process.19 <- waste_treatment_process.19 |> select(-treatment_process)

# create from delivered_to
waste_treatment_process.19 <- waste_treatment_process.19 |>
  mutate(
    waste_recovered_and_given_away_to_collector_RS = case_when(
      delivered_to == "other collector in RS" ~ waste_recovered_and_given_away,
      TRUE ~ 0
    ),
    waste_recovered_and_given_away_to_processing_operator_RS = case_when(
      delivered_to == "processing operator in RS" ~ waste_recovered_and_given_away,
      TRUE ~ 0
    ),
    waste_recovered_and_given_away_to_other_EU_country = case_when(
      delivered_to == "other EU country" ~ waste_recovered_and_given_away,
      TRUE ~ 0
    ),
    waste_recovered_and_given_away_to_other_country_outside_EU = case_when(
      delivered_to == "other country outside EU" ~ waste_recovered_and_given_away,
      TRUE ~ 0
    )
  )

waste_treatment_process.19 <- waste_treatment_process.19 |>
  group_by(statistical_region, type_of_waste) |>
  summarise(
    waste_recovered_and_given_away = sum(waste_recovered_and_given_away) / 1000,
    waste_recovered_and_given_away_to_collector_RS = sum(waste_recovered_and_given_away_to_collector_RS) / 1000,
    waste_recovered_and_given_away_to_processing_operator_RS = sum(waste_recovered_and_given_away_to_processing_operator_RS) / 1000,
    waste_recovered_and_given_away_to_other_EU_country = sum(waste_recovered_and_given_away_to_other_EU_country) / 1000,
    waste_recovered_and_given_away_to_other_country_outside_EU = sum(waste_recovered_and_given_away_to_other_country_outside_EU) / 1000
  ) |>
  ungroup() |>
  mutate(year = 2019)

waste_recovery_19.sheet4 <- waste_treatment_process.19 |> select(year, statistical_region, type_of_waste, waste_recovered_and_given_away, waste_recovered_and_given_away_to_collector_RS, waste_recovered_and_given_away_to_processing_operator_RS, waste_recovered_and_given_away_to_other_EU_country, waste_recovered_and_given_away_to_other_country_outside_EU)
```

```{r municipal_waste_treatment}
# MUNICIPAL WASTE RECEIVED FOR TREATMENT,
# SEPARATED BY MUNICIPALITY OF ORIGIN IN 2019

waste_recovery_19.sheet5 <- read_excel(waste_recovery_19.path, skip = 2, sheet = 5)

waste_recovery_19.by_codes5 <- waste_recovery_19.sheet5 |>
  rename(waste_code = `ŠT. ODPADKA`) |>
  filter(
    waste_code %in% codes |
      grepl("^03 01 [0-9]", waste_code, perl = TRUE) &
        !grepl("03 01 04", waste_code, perl = TRUE)
  )

municipal_waste_treatment.19 <- waste_recovery_19.by_codes5

municipal_waste_treatment.19 <- municipal_waste_treatment.19 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD) |>
  rename(
    waste_code = `waste_code`,
    name_of_company = `NAZIV`,
    total_waste_received = `SKUPNA KOLIČINA v kg`,
    name_of_municipality = `NAZIV OBČINE`
  )

# add type_of_waste column based on the waste_code
municipal_waste_treatment.19 <- municipal_waste_treatment.19 |> categorize_waste()

municipal_waste_treatment.19 <- municipal_waste_treatment.19 |>
  left_join(municipality_region_mapping, by = "name_of_municipality")

municipal_waste_treatment.19 <- municipal_waste_treatment.19 |>
  mutate(year = 2019)

municipal_waste_treatment.19 <- municipal_waste_treatment.19 |>
  group_by(year, statistical_region, name_of_municipality, type_of_waste) |>
  summarise(total_waste_received = sum(total_waste_received) / 1000) |>
  ungroup()

waste_recovery_19.sheet5 <- municipal_waste_treatment.19
```

```{r difference_waste_input_treatment_process}
# THE DIFFERENCE IN MASS BETWEEN THE WASTE INPUT AND
# THE TREATMENT PRODUCT VOLUMES DUE TO LOSSES DURING
# THE TREATMENT PROCESS IN 2019

waste_recovery_19.sheet6 <- read_excel(waste_recovery_19.path, skip = 2, sheet = 6)

waste_recovery_19.by_codes6 <- waste_recovery_19.sheet6 |>
  rename(waste_code = `ŠT. ODPADKA`) |>
  filter(
    waste_code %in% codes |
      grepl("^03 01 [0-9]", waste_code, perl = TRUE) &
        !grepl("03 01 04", waste_code, perl = TRUE)
  )

waste_difference.19 <- waste_recovery_19.by_codes6

waste_difference.19 <- waste_difference.19 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD) |>
  rename(
    name_of_company = `NAZIV`,
    waste_code = `waste_code`,
    lost_mass = `IZGUBLJENA KOLIČINA (kg)`
  )

# add type_of_waste column based on the waste_code
waste_difference.19 <- waste_difference.19 |> categorize_waste()

waste_difference.19 <- waste_difference.19 |>
  mutate(year = 2019)

waste_difference.19 <- waste_difference.19 |>
  mutate(
    lost_mass = lost_mass / 1000
  )

waste_recovery_19.sheet6 <- waste_difference.19 |> select(year, name_of_company, type_of_waste, lost_mass)
```

```{r landfill_capacity_EXCLUDED}
# LANDFILL CAPACITY AND STATUS IN 2019 - EXCLUDED
waste_recovery_19.sheet7 <- read_excel(waste_recovery_19.path, skip = 2, sheet = 7)

# no codes to filter by
```

```{r waste_volumes_management_landfill}
# TOTAL WASTE VOLUMES AND MANAGEMENT IN LANDFILL IN 2019
waste_recovery_19.sheet8 <- read_excel(waste_recovery_19.path, skip = 2, sheet = 8)

waste_recovery_19.by_codes8 <- waste_recovery_19.sheet8 |>
  rename(waste_code = `ŠT. ODPADKA`) |>
  filter(
    waste_code %in% codes |
      grepl("^03 01 [0-9]", waste_code, perl = TRUE) &
        !grepl("03 01 04", waste_code, perl = TRUE)
  )

waste_volumes_landfill.19 <- waste_recovery_19.by_codes8

waste_volumes_landfill.19 <- waste_volumes_landfill.19 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD) |>
  rename(
    name_of_company = `NAZIV`,
    landfill = `ODLAGALIŠČE`,
    waste_code = `waste_code`,
    inert_waste_received = `KOLIČINA PREJETIH INERTNIH ODPADKOV V ODLAGANJE Z OCENO (kg)`,
    non_hazardous_waste_received = `KOLIČINA PREJETIH NENEVARNIH ODPADKOV V ODLAGANJE Z OCENO (kg)`,
    hazardous_waste_received = `KOLIČINA PREJETIH NEVARNIH ODPADKOV V ODLAGANJE Z OCENO (kg)`,
    waste_received_without_estimate = `KOLIČINA PREJETIH ODPADKOV V ODLAGANJE BREZ OCENE (kg)`,
    waste_received_from_eu = `KOLIČINA PREJETIH ODPADKOV V ODLAGANJE IZ EU (kg)`,
    waste_received_from_third_countries = `KOLIČINA PREJETIH ODPADKOV V ODLAGANJE IZ TRETJIH DRŽAV (kg)`,
    disposed = `ODLOŽENO (kg)`,
    for_landfill_construction = `ZA GRADNJO OBJEKTOV ODLAGALIŠČA (kg)`,
    for_daily_covering = `ZA DNEVNO PREKRIVANJE (kg)`,
    stored_in_landfill = `SKLADIŠČENO NA ODLAGALIŠČU (kg)`,
    rejected = `ZAVRNJENO (kg)`
  )

# add type_of_waste column based on the waste_code
waste_volumes_landfill.19 <- waste_volumes_landfill.19 |> categorize_waste()

# If NA values in column, put 0
# waste_volumes_landfill.19[is.na(waste_volumes_landfill.19)] <- 0

## Drop columns containing NA values
waste_volumes_landfill.19 <- select_if(waste_volumes_landfill.19, ~ !all(is.na(.)))

waste_volumes_landfill.19 <- waste_volumes_landfill.19 |>
  group_by(landfill, type_of_waste) |>
  summarise(
    non_hazardous_waste_received = sum(non_hazardous_waste_received) / 1000,
    disposed = sum(disposed) / 1000
  ) |>
  ungroup() |>
  mutate(year = 2019)

waste_recovery_19.sheet8 <- waste_volumes_landfill.19 |> select(year, landfill, type_of_waste, non_hazardous_waste_received, disposed)
```

```{r municipal_waste_disposed_EXCLUDED}
# MUNICIPAL WASTE DISPOSED OF BY MUNICIPALITY IN 2019 - EXCLUDED
waste_recovery_19.sheet9 <- read_excel(waste_recovery_19.path, skip = 2, sheet = 9)

# no code to filter by for wood
```

```{r treatment_to_CSV_2019}
# sheet names
sheet_names <- c(
  "Waste Storage",
  "Waste Collected",
  "Treatment of Waste Received",
  "Waste Generated in Treatment Process",
  "Municipal Waste Received for Treatment",
  "Difference in Mass between Waste Input and Treatment Process",
  "Total Waste Volumes and Management in Landfill"
)

# List
waste_recovery.19 <- list(
  waste_recovery_19.sheet1,
  waste_recovery_19.sheet2,
  waste_recovery_19.sheet3,
  waste_recovery_19.sheet4,
  waste_recovery_19.sheet5,
  waste_recovery_19.sheet6,
  waste_recovery_19.sheet8
)

names(waste_recovery.19) <- sheet_names

for (sheet_name in sheet_names) {
  write_excel_csv(waste_recovery.19[[sheet_name]], paste0("2019 data\\2019 filtered\\treatment\\", tolower(gsub(" ", "_", sheet_name)), "_19.csv"))
}
```

# Year 2018

## 2018 - Data from the annual reports received on waste generation in manufacturing and service activities

### Code

```{r waste_generation_2018}
waste_generation_18.path <- "2018 data\\ODP_2018_objava21122020.xlsx"
```

```{r table_1_waste_generated_2018}
# TYPE, QUANTITY AND TREATMENT OF WASTE
# FROM MANUFACTURING AND SERVICE ACTIVITIES FOR 2018

data18.sheet1 <- read_excel(waste_generation_18.path, skip = 2, sheet = 1)

data18.sheet1 <- data18.sheet1 |>
  filter(`ŠT. ODPADKA` %in% codes | grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) & !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE))

data18.sheet1 <- data18.sheet1 |>
  select(-`MATIČNA ŠTEVILKA`) |>
  rename(
    name_of_company = NAZIV,
    statistical_region = colnames(data18.sheet1)[3],
    waste_code = `ŠT. ODPADKA`,
    waste_stored_start_year = `SKLADIŠČENA KOLIČINA  ODPADKOV NA DAN 01.01.2018 (kg)`,
    waste_generated = `KOLIČINA ODPADKOV, NASTALIH V LETU 2018 (kg)`,
    waste_stored_end_year = `SKLADIŠČENA KOLIČINA  ODPADKOV NA DAN 31.12.2018 (kg)`
  )

## add type_of_waste column based on the waste_code
data18.sheet1 <- data18.sheet1 |> categorize_waste()
## rename_region
data18.sheet1 <- rename_region(data18.sheet1)

## if NA, put 0
data18.sheet1[is.na(data18.sheet1)] <- 0

data18.sheet1 <- data18.sheet1 |> select(-`PRIDOBLJENI PODATKI                 ( 1-poročilo oddano,                    2-podatki ARSO)`)

data18.sheet1 <- data18.sheet1 |>
  group_by(statistical_region, type_of_waste) |>
  summarise(
    waste_stored_start_year = sum(waste_stored_start_year) / 1000,
    waste_generated = sum(waste_generated) / 1000,
    waste_stored_end_year = sum(waste_stored_end_year) / 1000
  ) |>
  ungroup()
```

```{r table_2_waste_management_2018}
data18.sheet2 <- read_excel(waste_generation_18.path, skip = 2, sheet = 2)

filtered_by_codes.sheet2 <- data18.sheet2 |>
  filter(`ŠT. ODPADKA` %in% codes | grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) & !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE))

data18.sheet2 <- filtered_by_codes.sheet2 |>
  select(-`MATIČNA ŠTEVILKA`, -`PRIDOBLJENI PODATKI                 ( 1-poročilo oddano,                    2-podatki ARSO)`) |>
  rename(
    name_of_company = NAZIV,
    statistical_region = colnames(filtered_by_codes.sheet2)[3],
    waste_code = `ŠT. ODPADKA`,
    treatment_process = `POSTOPEK OBDELAVE    (R ali D postopki ali drug postopek obdelave)`,
    total_waste_given_away = `KOLIČINA ODPADKOV ODDANA ALI POSLANA DRUGEMU PREVZEMNIKU (kg)`,
    delivered_to = `ŠIFRA_RAVNANJA                (1 - ODPADKE SO OBDELALI SAMI, 2 - ODPADKI ODDANI PREVZEMNIKU V RS , 3 - ODPADKI POSLANI V DRUGO DRŽAVO ČLANICO EU,               4 - ODPADKI POSLANI V TRETJO DRŽAVO IZVEN EU)`
  )

## add type_of_waste column based on the waste_code
data18.sheet2 <- data18.sheet2 |> categorize_waste()

## Rename delivered_to
data18.sheet2 <- data18.sheet2 |>
  mutate(
    delivered_to = case_when(
      delivered_to == "1" ~ "processed the waste themselves",
      delivered_to == "2" ~ "processing operator in RS",
      delivered_to == "3" ~ "other EU country",
      delivered_to == "4" ~ "other country outside EU"
    )
  )

## Rename region
data18.sheet2 <- rename_region(data18.sheet2)

data18.sheet2 <- data18.sheet2 |> select(-treatment_process)

## sum NA per column
colSums(is.na(data18.sheet2))

data18.sheet2 <- data18.sheet2 |>
  group_by(statistical_region, type_of_waste, delivered_to) |>
  summarise(
    total_waste_given_away = sum(total_waste_given_away) / 1000
  ) |>
  ungroup()
```

```{r generation_to_CSV_2018}
# sheet names
sheet_names <- c(
  "Waste Generation",
  "Waste Management"
)

# List
waste_generation.18 <- list(
  data18.sheet1,
  data18.sheet2
)

names(waste_generation.18) <- sheet_names

for (sheet_name in sheet_names) {
  write_excel_csv(waste_generation.18[[sheet_name]], paste0("2018 data\\2018 filtered\\generation\\", tolower(gsub(" ", "_", sheet_name)), "_18.csv"))
}
```

## 2018 - Data from the annual reports received on waste collection from manufacturing and service activities

### Code

```{r waste_collection_2018}
waste_collection_18.path <- "2018 data\\ODP_Z_2018_objava21122020.xlsx"
```

```{r waste_storage}
waste_collection_18.sheet1 <- read_excel(waste_collection_18.path, skip = 2, sheet = 1)

waste_collection_18.by_codes1 <- waste_collection_18.sheet1 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_collection_18.by_codes1 <- waste_collection_18.by_codes1 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD) |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `ŠT. ODPADKA`,
    type_of_waste = `NAZIV ODPADKA`,
    waste_stored_start_year = `SKLADIŠČENA KOLIČINA ODPADKOV NA DAN 1.1.2018 (kg)`,
    waste_stored_end_year = `SKLADIŠČENA KOLIČINA ODPADKOV NA DAN 31.12.2018 (kg)`
  )

## if NA
waste_collection_18.by_codes1[is.na(waste_collection_18.by_codes1)] <- 0

## Rename type_of_waste
waste_collection_18.by_codes1 <- rename_waste_names(waste_collection_18.by_codes1)

waste_collection_18.by_codes1 <- waste_collection_18.by_codes1 |>
  mutate(year = 2018)

waste_collection_18.by_codes1 <- waste_collection_18.by_codes1 |>
  group_by(year, statistical_region, type_of_waste) |>
  summarise(
    waste_stored_start_year = sum(waste_stored_start_year) / 1000,
    waste_stored_end_year = sum(waste_stored_end_year) / 1000
  ) |>
  ungroup()
```

```{r waste_collected}
waste_collection_18.sheet2 <- read_excel(waste_collection_18.path, skip = 2, sheet = 2)

waste_collection_18.by_codes2 <- waste_collection_18.sheet2 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_collection_18.by_codes2 <- waste_collection_18.by_codes2 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD) |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `ŠT. ODPADKA`,
    type_of_waste = `NAZIV ODPADKA`,
    total_waste_collected = `KOLIČINA ZBRANIH ODPADKOV (kg)`,
    collected_from = `ZBRANO OD`
  )

## sum NA per column
colSums(is.na(waste_collection_18.by_codes2))

## Distinct collected_from
waste_collection_18.by_codes2 |> distinct(collected_from)

# ASSUMING THIS IS THE SAME AS IN 2019

## Rename collected_from
waste_collection_18.by_codes2 <- waste_collection_18.by_codes2 |>
  mutate(
    collected_from = case_when(
      collected_from == "1-izvirni povzročitelj:prepuščeno" ~ "received from producers without a list",
      collected_from == "2-izvirni povzročitelj:oddano" ~ "received from producers with a list",
      collected_from == "3-drug zbiralec" ~ "received from other collectors",
      collected_from == "4-izvajalec obdelave" ~ "received from processing operators"
    )
  )

# define separate columns based on collected_from
waste_collection_18.by_codes2 <- waste_collection_18.by_codes2 |>
  mutate(
    waste_from_producers_no_record = case_when(
      collected_from == "received from producers without a list" ~ total_waste_collected,
      TRUE ~ 0
    ),
    waste_from_producers_with_record = case_when(
      collected_from == "received from producers with a list" ~ total_waste_collected,
      TRUE ~ 0
    ),
    waste_from_collectors_RS = case_when(
      collected_from == "received from other collectors" ~ total_waste_collected,
      TRUE ~ 0
    ),
    waste_from_processors_RS = case_when(
      collected_from == "received from processing operators" ~ total_waste_collected,
      TRUE ~ 0
    )
  )

## Rename type_of_waste
waste_collection_18.by_codes2 <- rename_waste_names(waste_collection_18.by_codes2)

waste_collection_18.by_codes2 <- waste_collection_18.by_codes2 |>
  mutate(year = 2018)

waste_collection_18.by_codes2 <- waste_collection_18.by_codes2 |>
  group_by(year, statistical_region, type_of_waste) |>
  summarise(
    total_waste_collected = sum(total_waste_collected) / 1000,
    waste_from_producers_no_record = sum(waste_from_producers_no_record) / 1000,
    waste_from_producers_with_record = sum(waste_from_producers_with_record) / 1000,
    waste_from_collectors_RS = sum(waste_from_collectors_RS) / 1000,
    waste_from_processors_RS = sum(waste_from_processors_RS) / 1000
  ) |>
  ungroup()
```

```{r municipal_waste_collected}
waste_collection_18.sheet3 <- read_excel(waste_collection_18.path, skip = 2, sheet = 3)

waste_collection_18.by_codes3 <- waste_collection_18.sheet3 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_collection_18.by_codes3 <- waste_collection_18.by_codes3 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD) |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    waste_code = `ŠT. ODPADKA`,
    type_of_waste = `NAZIV ODPADKA`,
    total_waste_collected = `KOLIČINA SKUPAJ (kg)`,
    collected_from_households = `KOLIČINA IZ GOSPODINJSTEV (kg)`,
    collected_from_activities = `KOLIČINA IZ DEJAVNOSTI (kg)`
  )

## Rename type_of_waste
waste_collection_18.by_codes3 <- rename_waste_names(waste_collection_18.by_codes3)

## If NA
waste_collection_18.by_codes3[is.na(waste_collection_18.by_codes3)] <- 0

waste_collection_18.by_codes3 <- waste_collection_18.by_codes3 |>
  mutate(year = 2018)

waste_collection_18.by_codes3 <- waste_collection_18.by_codes3 |>
  group_by(year, name_of_company, type_of_waste) |>
  summarise(
    total_waste_collected = sum(total_waste_collected) / 1000,
    collected_from_households = sum(collected_from_households) / 1000,
    collected_from_activities = sum(collected_from_activities) / 1000
  ) |>
  ungroup()
```

```{r mncplt_waste_collected_separated_by_mncplt_org}
waste_collection_18.sheet4 <- read_excel(waste_collection_18.path, skip = 2, sheet = 4)

waste_collection_18.by_codes4 <- waste_collection_18.sheet4 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_collection_18.by_codes4 <- waste_collection_18.by_codes4 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD) |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    waste_code = `ŠT. ODPADKA`,
    type_of_waste = `NAZIV ODPADKA`,
    total_waste_collected = `SKUPNA KOLIČINA (kg)`,
    name_of_municipality = `NAZIV OBČINE`
  )

## Rename type_of_waste
waste_collection_18.by_codes4 <- rename_waste_names(waste_collection_18.by_codes4)

waste_collection_18.by_codes4 <- waste_collection_18.by_codes4 |>
  left_join(municipality_region_mapping, by = "name_of_municipality")

## sum NA per column
colSums(is.na(waste_collection_18.by_codes4))

waste_collection_18.by_codes4 <- waste_collection_18.by_codes4 |>
  mutate(year = 2018)

waste_collection_18.by_codes4 <- waste_collection_18.by_codes4 |>
  group_by(year, name_of_company, statistical_region, name_of_municipality, type_of_waste) |>
  summarise(
    total_waste_collected = sum(total_waste_collected) / 1000
  ) |>
  ungroup()
```

```{r management_waste_collected}
waste_collection_18.sheet5 <- read_excel(waste_collection_18.path, skip = 2, sheet = 5)

waste_collection_18.by_codes5 <- waste_collection_18.sheet5 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_collection_18.by_codes5 <- waste_collection_18.by_codes5 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD) |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `ŠT. ODPADKA`,
    type_of_waste = `NAZIV ODPADKA`,
    total_waste_given_away = `ODDANA KOLIČINA ODPADKOV (kg)`,
    delivered_to = `ODDANO KOMU`,
    treatment_process = `POSTOPEK OBDELAVE, ČE SO BILI ODPADKI POSLANI V OBDELAVO V TUJINO(R in D postopki in PU-ponovna uporaba)`
  )

waste_collection_18.by_codes5 <- rename_waste_names(waste_collection_18.by_codes5)

## Distinct delivered_to
waste_collection_18.by_codes5 |> distinct(delivered_to)

## Rename delivered_to
waste_collection_18.by_codes5 <- waste_collection_18.by_codes5 |>
  mutate(
    delivered_to = case_when(
      delivered_to == "1-drug zbiralec v RS" ~ "other collector in RS",
      delivered_to == "2-drug izvajalec obdelave v RS" ~ "processing operator in RS",
      delivered_to == "3-druga država članica EU" ~ "other EU country"
    )
  )

# define separate columns based on delivered_to
waste_collection_18.by_codes5 <- waste_collection_18.by_codes5 |>
  mutate(
    delivered_to_collector = case_when(
      delivered_to == "other collector in RS" ~ total_waste_given_away,
      TRUE ~ 0
    ),
    delivered_to_processing_operator = case_when(
      delivered_to == "processing operator in RS" ~ total_waste_given_away,
      TRUE ~ 0
    ),
    delivered_to_other_eu_country = case_when(
      delivered_to == "other EU country" ~ total_waste_given_away,
      TRUE ~ 0
    )
  )

waste_collection_18.by_codes5 <- waste_collection_18.by_codes5 |> select(-treatment_process)

waste_collection_18.by_codes5 <- waste_collection_18.by_codes5 |>
  mutate(year = 2018)

waste_collection_18.by_codes5 <- waste_collection_18.by_codes5 |>
  group_by(year, statistical_region, type_of_waste) |>
  summarise(
    total_waste_given_away = sum(total_waste_given_away) / 1000,
    delivered_to_collector = sum(delivered_to_collector) / 1000,
    delivered_to_processing_operator = sum(delivered_to_processing_operator) / 1000,
    delivered_to_other_eu_country = sum(delivered_to_other_eu_country) / 1000
  ) |>
  ungroup()
```

```{r waste_collection_to_CSV_2018}
# sheet names
sheet_names <- c(
  "Waste Storage",
  "Waste Collected",
  "Municipal Waste Collected",
  "Municipal Waste Collected Separated by Municipality of Origin",
  "Waste Management"
)

# List
waste_collection.18 <- list(
  waste_collection_18.by_codes1,
  waste_collection_18.by_codes2,
  waste_collection_18.by_codes3,
  waste_collection_18.by_codes4,
  waste_collection_18.by_codes5
)

names(waste_collection.18) <- sheet_names

for (sheet_name in sheet_names) {
  write_excel_csv(waste_collection.18[[sheet_name]], paste0("2018 data\\2018 filtered\\collection\\", tolower(gsub(" ", "_", sheet_name)), "_18.csv"))
}
```

## 2018 - Data from the annual waste recovery/disposal reports received

### Code

```{r waste_recovery_disposal_2018}
waste_recovery_18.path <- "2018 data\\ODP_P_2018_objava21122020.xlsx"
```

```{r waste_recovery_disposal_storage}
waste_recovery_18.sheet1 <- read_excel(waste_recovery_18.path, skip = 2, sheet = 1)

waste_recovery_18.by_codes1 <- waste_recovery_18.sheet1 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_recovery_18.by_codes1 <- waste_recovery_18.by_codes1 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD) |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `ŠT. ODPADKA`,
    type_of_waste = `NAZIV ODPADKA`,
    waste_stored_start_year = `SKLADIŠČENA KOLIČINA NA DAN 1.1.2018 (kg)`,
    waste_stored_end_year = `SKLADIŠČENA KOLIČINA NA DAN 31.12.2018 (kg)`
  )

## Rename type_of_waste
waste_recovery_18.by_codes1 <- rename_waste_names(waste_recovery_18.by_codes1)

waste_recovery_18.by_codes1 <- waste_recovery_18.by_codes1 |>
  mutate(year = 2018)

waste_recovery_18.by_codes1 <- waste_recovery_18.by_codes1 |>
  group_by(year, statistical_region, type_of_waste) |>
  summarise(
    waste_stored_start_year = sum(waste_stored_start_year) / 1000,
    waste_stored_end_year = sum(waste_stored_end_year) / 1000
  ) |>
  ungroup()
```

```{r waste_recovery_disposal_collected}
waste_recovery_18.sheet2 <- read_excel(waste_recovery_18.path, skip = 2, sheet = 2)

waste_recovery_18.by_codes2 <- waste_recovery_18.sheet2 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_recovery_18.by_codes2 <- waste_recovery_18.by_codes2 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD, -`POSTOPEK OBDELAVE (R in D postopki in PU-ponovna uporaba)`) |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `ŠT. ODPADKA`,
    type_of_waste = `NAZIV ODPADKA`,
    total_waste_received = `PREVZETA KOLIČINA ODPADKA (kg)`,
    received_from = `PREVZETO OD`
  )

## Distinct received_from
waste_recovery_18.by_codes2 |> distinct(received_from)

## Rename received_from
waste_recovery_18.by_codes2 <- waste_recovery_18.by_codes2 |>
  mutate(
    received_from = case_when(
      received_from == "1-lastni odpadki, samo v primeru OVD za obdelavo lastnih odpadkov" ~ "own waste, 'OVD' case",
      received_from == "2-drug izvirni povzročitelj v RS" ~ "other original producer in RS",
      received_from == "3-drug zbiralec v RS" ~ "other collector in RS",
      received_from == "4-drug izvajalec obdelave v RS" ~ "other processing operator in RS",
      received_from == "5-druga država članica EU" ~ "other EU country",
      received_from == "6-tretja država (izven EU)" ~ "other country (outside EU)"
    )
  )

## Rename type_of_waste
waste_recovery_18.by_codes2 <- rename_waste_names(waste_recovery_18.by_codes2)

# define columns based on received_from
waste_recovery_18.by_codes2 <- waste_recovery_18.by_codes2 |>
  mutate(
    received_from_own_waste_OVD = case_when(
      received_from == "own waste, 'OVD' case" ~ total_waste_received,
      TRUE ~ 0
    ),
    received_from_other_producer_RS = case_when(
      received_from == "other original producer in RS" ~ total_waste_received,
      TRUE ~ 0
    ),
    received_from_other_collector_RS = case_when(
      received_from == "other collector in RS" ~ total_waste_received,
      TRUE ~ 0
    ),
    received_from_other_processing_operator_RS = case_when(
      received_from == "other processing operator in RS" ~ total_waste_received,
      TRUE ~ 0
    ),
    received_from_other_EU_country = case_when(
      received_from == "other EU country" ~ total_waste_received,
      TRUE ~ 0
    ),
    received_from_other_country_outside_EU = case_when(
      received_from == "other country (outside EU)" ~ total_waste_received,
      TRUE ~ 0
    )
  )

waste_recovery_18.by_codes2 <- waste_recovery_18.by_codes2 |>
  mutate(year = 2018)

waste_recovery_18.by_codes2 <- waste_recovery_18.by_codes2 |>
  group_by(year, statistical_region, type_of_waste) |>
  summarise(
    total_waste_received = sum(total_waste_received) / 1000,
    received_from_own_waste_OVD = sum(received_from_own_waste_OVD) / 1000,
    received_from_other_producer_RS = sum(received_from_other_producer_RS) / 1000,
    received_from_other_collector_RS = sum(received_from_other_collector_RS) / 1000,
    received_from_other_processing_operator_RS = sum(received_from_other_processing_operator_RS) / 1000,
    received_from_other_EU_country = sum(received_from_other_EU_country) / 1000,
    received_from_other_country_outside_EU = sum(received_from_other_country_outside_EU) / 1000
  ) |>
  ungroup()
```

```{r treatment_of_waste}
waste_recovery_18.sheet3 <- read_excel(waste_recovery_18.path, skip = 2, sheet = 3)

waste_recovery_18.by_codes3 <- waste_recovery_18.sheet3 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_recovery_18.by_codes3 <- waste_recovery_18.by_codes3 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD, -`POSTOPEK OBDELAVE (R in D postopki obdelave, PU-ponovna uporaba, BO-brez obdelave)`, -`OBDELAVA PO 8.ČLENU UREDBE O ODPADKIH`) |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `ŠT. ODPADKA`,
    type_of_waste = `NAZIV ODPADKA`,
    total_waste_given_away = `KOLIČINA ODPADKOV, DANIH V OBDELAVO (kg)`
  )

## Rename type_of_waste
waste_recovery_18.by_codes3 <- rename_waste_names(waste_recovery_18.by_codes3)

waste_recovery_18.by_codes3 <- waste_recovery_18.by_codes3 |>
  mutate(year = 2018)

waste_recovery_18.by_codes3 <- waste_recovery_18.by_codes3 |>
  group_by(year, statistical_region, type_of_waste) |>
  summarise(
    total_waste_given_away = sum(total_waste_given_away) / 1000
  ) |>
  ungroup()
```

```{r waste_generated}
# WASTE GENERATED IN THE TREATMENT PROCESS AND
# UNTREATED WASTE DELIVERED TO OTHERS IN 2018
waste_recovery_18.sheet4 <- read_excel(waste_recovery_18.path, skip = 2, sheet = 4)

waste_recovery_18.by_codes4 <- waste_recovery_18.sheet4 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_recovery_18.by_codes4 <- waste_recovery_18.by_codes4 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD, -`POSTOPEK OBDELAVE, ČE SO ODPADKI POSLANI V OBDELAVO V TUJINO`) |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `ŠT. ODPADKA`,
    type_of_waste = `NAZIV ODPADKA`,
    total_waste_generated = `PO OBDELAVI NASTALI ODPADKI IN ODPADKI ODDANI DRUGIM BREZ OBDELAVE  (kg)`,
    delivered_to = `ODDANO KOMU`
  )

## Distinct delivered_to
waste_recovery_18.by_codes4 |> distinct(delivered_to)

## Rename delivered_to
waste_recovery_18.by_codes4 <- waste_recovery_18.by_codes4 |>
  mutate(
    delivered_to = case_when(
      delivered_to == "1-drug zbiralec v RS" ~ "other collector in RS",
      delivered_to == "2-drug izvajalec obdelave v RS" ~ "other processing operator in RS",
      delivered_to == "3-druga država članica EU" ~ "other EU country",
      delivered_to == "4-tretja država (izven EU)" ~ "other country (outside EU)"
    )
  )

# define columns based on delivered_to
waste_recovery_18.by_codes4 <- waste_recovery_18.by_codes4 |>
  mutate(
    delivered_to_collector_RS = case_when(
      delivered_to == "other collector in RS" ~ total_waste_generated,
      TRUE ~ 0
    ),
    delivered_to_processing_operator_RS = case_when(
      delivered_to == "other processing operator in RS" ~ total_waste_generated,
      TRUE ~ 0
    ),
    delivered_to_other_EU_country = case_when(
      delivered_to == "other EU country" ~ total_waste_generated,
      TRUE ~ 0
    ),
    delivered_to_other_country_outside_EU = case_when(
      delivered_to == "other country (outside EU)" ~ total_waste_generated,
      TRUE ~ 0
    )
  )

## Rename type_of_waste
waste_recovery_18.by_codes4 <- rename_waste_names(waste_recovery_18.by_codes4)

waste_recovery_18.by_codes4 <- waste_recovery_18.by_codes4 |>
  mutate(year = 2018)

waste_recovery_18.by_codes4 <- waste_recovery_18.by_codes4 |>
  group_by(year, statistical_region, type_of_waste) |>
  summarise(
    total_waste_generated = sum(total_waste_generated) / 1000,
    delivered_to_collector_RS = sum(delivered_to_collector_RS) / 1000,
    delivered_to_processing_operator_RS = sum(delivered_to_processing_operator_RS) / 1000,
    delivered_to_other_EU_country = sum(delivered_to_other_EU_country) / 1000,
    delivered_to_other_country_outside_EU = sum(delivered_to_other_country_outside_EU) / 1000
  ) |>
  ungroup()
```

```{r municipal_waste_received}
# MUNICIPAL WASTE RECEIVED FOR TREATMENT,
# SEPARATED BY MUNICIPALITY OF ORIGIN IN 2018
waste_recovery_18.sheet5 <- read_excel(waste_recovery_18.path, skip = 2, sheet = 5)

waste_recovery_18.by_codes5 <- waste_recovery_18.sheet5 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_recovery_18.by_codes5 <- waste_recovery_18.by_codes5 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD) |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    waste_code = `ŠT. ODPADKA`,
    type_of_waste = `NAZIV ODPADKA`,
    total_waste_received = `SKUPNA KOLIČINA v kg`,
    name_of_municipality = `NAZIV OBČINE`
  )

## Rename type_of_waste
waste_recovery_18.by_codes5 <- rename_waste_names(waste_recovery_18.by_codes5)

waste_recovery_18.by_codes5 <- waste_recovery_18.by_codes5 |>
  left_join(municipality_region_mapping, by = "name_of_municipality")

waste_recovery_18.by_codes5 <- waste_recovery_18.by_codes5 |>
  mutate(year = 2018)

waste_recovery_18.by_codes5 <- waste_recovery_18.by_codes5 |>
  group_by(year, name_of_company, statistical_region, name_of_municipality, type_of_waste) |>
  summarise(
    total_waste_received = sum(total_waste_received) / 1000
  ) |>
  ungroup()
```

```{r difference_waste_input_treatment_process}
# MASS DIFFERENCE BETWEEN WASTE INPUT AND
# TREATMENT PRODUCT VOLUMES DUE TO LOSSES
# DURING THE TREATMENT PROCESS IN 2018

waste_recovery_18.sheet6 <- read_excel(waste_recovery_18.path, skip = 2, sheet = 6)

waste_recovery_18.by_codes6 <- waste_recovery_18.sheet6 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_recovery_18.by_codes6 <- waste_recovery_18.by_codes6 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD) |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    waste_code = `ŠT. ODPADKA`,
    type_of_waste = `NAZIV ODPADKA`,
    lost_mass = `IZGUBLJENA KOLIČINA (kg)`
  )

## Rename type_of_waste
waste_recovery_18.by_codes6 <- rename_waste_names(waste_recovery_18.by_codes6)

waste_recovery_18.by_codes6 <- waste_recovery_18.by_codes6 |>
  mutate(year = 2018)

waste_recovery_18.by_codes6 <- waste_recovery_18.by_codes6 |>
  group_by(year, name_of_company, type_of_waste) |>
  summarise(
    lost_mass = sum(lost_mass) / 1000
  ) |>
  ungroup()
```

```{r landfill_capacity}
# LANDFILL CAPACITY AND STATUS IN 2018

waste_recovery_18.sheet7 <- read_excel(waste_recovery_18.path, skip = 2, sheet = 7)

# cannot filter by codes
# should try by company names?

waste_recovery_18.sheet7 <- waste_recovery_18.sheet7 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD) |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    landfill = `ODLAGALIŠČE`,
    filled_volume_start_year = `ZAPOLNJEN VOLUMEN NA DAN 1.1. (m3)`,
    filled_area_start_year = `ZAPOLNJENA POVRŠINA NA DAN 1.1. (m2)`,
    free_volume_end_year = `VOLUMEN PROSTE KAPACITETE ODLAGALIŠČA NA DAN 31.12.  (m3)`,
    free_area_end_year = `POVRŠINA PROSTE KAPACITETE ODLAGALIŠČA NA DAN 31.12.  (m2)`,
    total_capacity = `CELOTNA ZMOGLIVOST ODLAGANJA (t)`,
    remaining_capacity = `PREOSTALA ZMOGLIVOST ODLAGANJA (t)`,
    start_date = `DATUM ZAČETKA ODLAGANAJA`,
    end_date = `PREDVIDENO PRENEHANJE ODLAGANJA`
  )

waste_recovery_18.sheet7 <- waste_recovery_18.sheet7 |>
  mutate(year = 2018)

waste_recovery_18.sheet7 <- waste_recovery_18.sheet7 |>
  select(year, name_of_company, landfill, filled_volume_start_year, filled_area_start_year, free_volume_end_year, free_area_end_year, total_capacity, remaining_capacity, start_date, end_date)
```

```{r landfill_quantities_management}
# TOTAL QUANTITIES AND MANAGEMENT OF WASTE IN LANDFILL IN 2018

waste_recovery_18.sheet8 <- read_excel(waste_recovery_18.path, skip = 2, sheet = 8)

waste_recovery_18.by_codes8 <- waste_recovery_18.sheet8 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_recovery_18.by_codes8 <- waste_recovery_18.by_codes8 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD) |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    landfill = `ODLAGALIŠČE`,
    waste_code = `ŠT. ODPADKA`,
    type_of_waste = `NAZIV ODPADKA`,
    total_inert_waste_received = `KOLIČINA PREJETIH INERTNIH ODPADKOV V ODLAGANJE Z OCENO (kg)`,
    total_non_hazardous_waste_received = `KOLIČINA PREJETIH NENEVARNIH ODPADKOV V ODLAGANJE Z OCENO (kg)`,
    total_hazardous_waste_received = `KOLIČINA PREJETIH NEVARNIH ODPADKOV V ODLAGANJE Z OCENO (kg)`,
    total_waste_received_without_estimate = `KOLIČINA PREJETIH ODPADKOV V ODLAGANJE BREZ OCENE (kg)`,
    total_waste_received_from_EU = `KOLIČINA PREJETIH ODPADKOV V ODLAGANJE IZ EU (kg)`,
    total_waste_received_from_third_countries = `KOLIČINA PREJETIH ODPADKOV V ODLAGANJE IZ TRETJIH DRŽAV (kg)`,
    disposed = `ODLOŽENO (kg)`,
    for_construction_of_landfill_facilities = `ZA GRADNJO OBJEKTOV ODLAGALIŠČA (kg)`,
    for_daily_covering = `ZA DNEVNO PREKRIVANJE (kg)`,
    stored_on_landfill = `SKLADIŠČENO NA ODLAGALIŠČU (kg)`,
    rejected = `ZAVRNJENO (kg)`
  )

## Drop columns containing NA values
waste_recovery_18.by_codes8 <- select_if(waste_recovery_18.by_codes8, ~ !all(is.na(.)))

waste_recovery_18.by_codes8 <- rename_waste_names(waste_recovery_18.by_codes8)

waste_recovery_18.by_codes8 <- waste_recovery_18.by_codes8 |>
  mutate(year = 2018)

waste_recovery_18.by_codes8 <- waste_recovery_18.by_codes8 |>
  group_by(year, name_of_company, landfill, type_of_waste) |>
  summarise(
    total_non_hazardous_waste_received = sum(total_non_hazardous_waste_received) / 1000,
    disposed = sum(disposed) / 1000
  ) |>
  ungroup()
```

```{r municipal_waste_disposed}
# MUNICIPAL WASTE DISPOSED BY MUNICIPALITY IN 2018 - EXCLUDED

waste_recovery_18.sheet9 <- read_excel(waste_recovery_18.path, skip = 2, sheet = 9)

# no code to filter by for wood

waste_recovery_18.sheet9 <- waste_recovery_18.sheet9 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD) |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    landfill = `ODLAGALIŠČE`,
    name_of_municipality = `NAZIV OBČINE`,
    waste_code = `ŠT. ODPADKA`,
    type_of_waste = `NAZIV ODPADKA`,
    total_waste_disposed = `SKUPNA KOLIČINA v kg`
  )

## Distinct type_of_waste
waste_recovery_18.sheet9 |> distinct(type_of_waste)

waste_recovery_18.sheet9 <- waste_recovery_18.sheet9 |>
  left_join(municipality_region_mapping, by = "name_of_municipality")
```

```{r waste_recovery_disposal_to_CSV_2018}
# sheet names
sheet_names <- c(
  "Waste Storage",
  "Waste Collected",
  "Treatment of Waste",
  "Waste Generated",
  "Municipal Waste Received",
  "Difference in Waste Input and Treatment Process",
  "Landfill Capacity",
  "Landfill Quantities Management" # ,
  # "Municipal Waste Disposed"
)

# List
waste_recovery.18 <- list(
  waste_recovery_18.by_codes1,
  waste_recovery_18.by_codes2,
  waste_recovery_18.by_codes3,
  waste_recovery_18.by_codes4,
  waste_recovery_18.by_codes5,
  waste_recovery_18.by_codes6,
  waste_recovery_18.sheet7,
  waste_recovery_18.by_codes8 # ,
  # waste_recovery_18.sheet9
)

names(waste_recovery.18) <- sheet_names

for (sheet_name in sheet_names) {
  write_excel_csv(waste_recovery.18[[sheet_name]], paste0("2018 data\\2018 filtered\\treatment\\", tolower(gsub(" ", "_", sheet_name)), "_18.csv"))
}
```

# Year 2017

## 2017 - Data from the annual reports received on waste generation in manufacturing and service activities

### Code

```{r table_1_waste_generated_2017}
waste_generation_17.path <- "2017 data\\2017_generation.xlsx"

waste_generation_17.sheet1 <- read_excel(waste_generation_17.path, skip = 2, sheet = 1)

waste_generation_17.by_codes1 <- waste_generation_17.sheet1 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_generation_17.by_codes1 <- waste_generation_17.by_codes1 |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `ŠT. ODPADKA`,
    total_waste_2017_kg = `SKUPAJ: NASTALI ODPADKI v 2017 in SKLADIŠČENI ODPADKI NA DAN  01.01.2017 (kg)`,
    waste_stored_start_year = `SKLADIŠČENA KOLIČINA  ODPADKOV NA DAN 01.01.2017 (kg)`,
    total_waste_generated = `KOLIČINA ODPADKOV, NASTALIH V LETU 2017 (kg)`,
    waste_stored_end_year = `SKLADIŠČENA KOLIČINA  ODPADKOV NA DAN 31.12.2017 (kg)`
  )

# Based on the waste_code add type_of_waste
waste_generation_17.by_codes1 <- waste_generation_17.by_codes1 |> categorize_waste()

## If column have NA values, put zero instead
waste_generation_17.by_codes1[is.na(waste_generation_17.by_codes1)] <- 0

## to csv
write_excel_csv(waste_generation_17.by_codes1, "2017 data\\2017 filtered\\generation\\test_waste_generation_17.csv")

waste_generation_17.by_codes1 <- waste_generation_17.by_codes1 |>
  select(-SKD, -`MATIČNA ŠTEVILKA`)

waste_generation_17.by_codes1 <- waste_generation_17.by_codes1 |>
  group_by(name_of_company, statistical_region, type_of_waste) |>
  summarise(
    total_waste_2017_kg = sum(total_waste_2017_kg),
    waste_stored_start_year = sum(waste_stored_start_year),
    total_waste_generated = sum(total_waste_generated),
    waste_stored_end_year = sum(waste_stored_end_year)
  ) |>
  ungroup() |>
  mutate(year = 2017)

waste_generation_17.by_codes1 <- waste_generation_17.by_codes1 |>
  mutate(
    total_waste_2017 = total_waste_2017_kg / 1000, # for tons
    waste_stored_start_year = waste_stored_start_year / 1000,
    total_waste_generated = total_waste_generated / 1000,
    waste_stored_end_year = waste_stored_end_year / 1000
  ) |>
  select(-total_waste_2017_kg)

waste_generation_17.by_codes1 <- waste_generation_17.by_codes1 |>
  group_by(statistical_region, type_of_waste) |>
  summarise(
    total_waste_2017 = sum(total_waste_2017),
    waste_stored_start_year = sum(waste_stored_start_year),
    total_waste_generated = sum(total_waste_generated),
    waste_stored_end_year = sum(waste_stored_end_year)
  ) |>
  ungroup()
```

```{r table_2_waste_management_2017}
waste_generation_17.sheet2 <- read_excel(waste_generation_17.path, skip = 2, sheet = 2)

waste_generation_17.by_codes2 <- waste_generation_17.sheet2 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_generation_17.by_codes2 <- waste_generation_17.by_codes2 |>
  select(-SKD, -`MATIČNA ŠTEVILKA`)

waste_generation_17.by_codes2 <- waste_generation_17.by_codes2 |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `ŠT. ODPADKA`,
    total_waste_given_away = `KOLIČINA ODPADKOV ODDANA ALI POSLANA DRUGEMU PREVZEMNIKU (kg)`,
    management = `RAVNANJE`,
    treatment_process = `POSTOPEK OBDELAVE (R00 ali D00 ali R99 drug postopek obdelave)`
  )

waste_generation_17.by_codes2 <- waste_generation_17.by_codes2 |> categorize_waste()

waste_generation_17.by_codes2 <- waste_generation_17.by_codes2 |>
  select(-treatment_process)

## get distinct management
waste_generation_17.by_codes2 |> distinct(management)

## Rename management
waste_generation_17.by_codes2 <- waste_generation_17.by_codes2 |>
  mutate(
    management = case_when(
      management == "1-lastna obdelava (OVD za obdelavo lastnih odpadkov)" ~ "own processing (OVD for processing own waste)",
      management == "2-oddano drugemu prevzemniku v RS" ~ "given to another collector in RS",
      management == "3-poslano v drugo državo članico EU" ~ "sent to another EU country"
    )
  )

waste_generation_17.by_codes2 <- waste_generation_17.by_codes2 |>
  group_by(statistical_region, type_of_waste, management) |>
  summarise(
    total_waste_given_away = sum(total_waste_given_away) / 1000 # for tons
  ) |>
  ungroup() |>
  mutate(year = 2017)
```

```{r generatio_to_CSV_2017}
# sheet names
sheet_names <- c(
  "Waste Generation",
  "Waste Management"
)

# List
waste_generation.17 <- list(
  waste_generation_17.by_codes1,
  waste_generation_17.by_codes2
)

names(waste_generation.17) <- sheet_names

for (sheet_name in sheet_names) {
  write_excel_csv(waste_generation.17[[sheet_name]], paste0("2017 data\\2017 filtered\\generation\\", tolower(gsub(" ", "_", sheet_name)), "_17.csv"))
}
```

## 2017 - Data from the annual reports received on waste collection from manufacturing and service activities

### Code

```{r waste_collection_2017}
waste_collection_17.path <- "2017 data\\2017_collection.xlsx"
```

```{r waste_storage}
# Waste storage in 2017
waste_collection_17.sheet1 <- read_excel(waste_collection_17.path, skip = 1, sheet = 1)

waste_collection_17.by_codes1 <- waste_collection_17.sheet1 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_collection_17.by_codes1 <- waste_collection_17.by_codes1 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD)

waste_collection_17.by_codes1 <- waste_collection_17.by_codes1 |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `ŠT. ODPADKA`,
    type_of_waste = `NAZIV ODPADKA`,
    waste_stored_start_year = `SKLADIŠČENA KOLIČINA ODPADKOV NA DAN 1.1.2017 (kg)`,
    waste_stored_end_year = `SKLADIŠČENA KOLIČINA ODPADKOV NA DAN 31.12.2017 (kg)`
  )

## Rename type_of_waste
waste_collection_17.by_codes1 <- rename_waste_names(waste_collection_17.by_codes1)

## if NA
waste_collection_17.by_codes1[is.na(waste_collection_17.by_codes1)] <- 0

waste_collection_17.by_codes1 <- waste_collection_17.by_codes1 |>
  group_by(statistical_region, type_of_waste) |>
  summarise(
    waste_stored_start_year = sum(waste_stored_start_year) / 1000,
    waste_stored_end_year = sum(waste_stored_end_year) / 1000
  ) |>
  ungroup() |>
  mutate(year = 2017)

waste_collection_17.by_codes1 <- waste_collection_17.by_codes1 |>
  select(year, statistical_region, type_of_waste, waste_stored_start_year, waste_stored_end_year)
```

```{r waste_collected}
# Waste collected in 2017
waste_collection_17.sheet2 <- read_excel(waste_collection_17.path, skip = 1, sheet = 2)

waste_collection_17.by_codes2 <- waste_collection_17.sheet2 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_collection_17.by_codes2 <- waste_collection_17.by_codes2 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD)

waste_collection_17.by_codes2 <- waste_collection_17.by_codes2 |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `ŠT. ODPADKA`,
    type_of_waste = `NAZIV ODPADKA`,
    total_waste_collected = `ZBRANO OD`,
    collected_from = `KOLIČINA ZBRANIH ODPADKOV (kg)`
  )

## Rename type_of_waste
waste_collection_17.by_codes2 <- rename_waste_names(waste_collection_17.by_codes2)

## Distinct collected_from
waste_collection_17.by_codes2 |> distinct(collected_from)

## Rename collected_from
waste_collection_17.by_codes2 <- waste_collection_17.by_codes2 |>
  mutate(
    collected_from = case_when(
      collected_from == "1-izvirni povzročitelj:prepuščeno" ~ "received from producers without a list",
      collected_from == "2-izvirni povzročitelj:oddano" ~ "received from producers with a list",
      collected_from == "3-drug zbiralec" ~ "received from other collectors",
      collected_from == "4-izvajalec obdelave" ~ "received from processing operators"
    )
  )

waste_collection_17.by_codes2 <- waste_collection_17.by_codes2 |>
  group_by(statistical_region, type_of_waste, collected_from) |>
  summarise(
    total_waste_collected = sum(total_waste_collected) / 1000 # for tons
  ) |>
  ungroup() |>
  mutate(year = 2017)

waste_collection_17.by_codes2 <- waste_collection_17.by_codes2 |>
  mutate(
    waste_from_producers_no_record = case_when(
      collected_from == "received from producers without a list" ~ total_waste_collected,
      TRUE ~ 0
    ),
    waste_from_producers_with_record = case_when(
      collected_from == "received from producers with a list" ~ total_waste_collected,
      TRUE ~ 0
    ),
    waste_from_collectors_RS = case_when(
      collected_from == "received from other collectors" ~ total_waste_collected,
      TRUE ~ 0
    ),
    waste_from_processors_RS = case_when(
      collected_from == "received from processing operators" ~ total_waste_collected,
      TRUE ~ 0
    )
  )

waste_collection_17.by_codes2 <- waste_collection_17.by_codes2 |>
  group_by(year, statistical_region, type_of_waste) |>
  summarise(
    total_waste_collected = sum(total_waste_collected),
    waste_from_producers_no_record = sum(waste_from_producers_no_record),
    waste_from_producers_with_record = sum(waste_from_producers_with_record),
    waste_from_collectors_RS = sum(waste_from_collectors_RS),
    waste_from_processors_RS = sum(waste_from_processors_RS)
  ) |>
  ungroup()
```

```{r management_waste_collected}
# Management of waste collected in 2017
waste_collection_17.sheet3 <- read_excel(waste_collection_17.path, skip = 1, sheet = 3)

waste_collection_17.by_codes3 <- waste_collection_17.sheet3 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_collection_17.by_codes3 <- waste_collection_17.by_codes3 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD)

waste_collection_17.by_codes3 <- waste_collection_17.by_codes3 |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `ŠT. ODPADKA`,
    type_of_waste = `NAZIV ODPADKA`,
    total_waste_given_away = `ODDANA KOLIČINA ODPADKOV (kg)`,
    given_to = `ODDANO KOMU`,
    treatment_process = `POSTOPEK OBDELAVE, ČE SO BILI ODPADKI POSLANI V OBDELAVO V TUJINO (R_00 in D_00-drugi postopki obdelave, PU-ponovna uporaba)`
  )

## Rename type_of_waste
waste_collection_17.by_codes3 <- rename_waste_names(waste_collection_17.by_codes3)

## Distinct given_to
waste_collection_17.by_codes3 |> distinct(given_to)

## Rename given_to
waste_collection_17.by_codes3 <- waste_collection_17.by_codes3 |>
  mutate(
    given_to = case_when(
      given_to == "1-drug zbiralec v RS" ~ "other collector in RS",
      given_to == "2-drug izvajalec obdelave v RS" ~ "other processing operator in RS",
      given_to == "3-druga država članica EU" ~ "other EU country",
      given_to == "4-tretja država (izven EU)" ~ "other country (outside EU)"
    )
  )

waste_collection_17.by_codes3 <- waste_collection_17.by_codes3 |>
  group_by(statistical_region, type_of_waste, given_to) |>
  summarise(
    total_waste_given_away = sum(total_waste_given_away) / 1000 # for tons
  ) |>
  ungroup() |>
  mutate(year = 2017)

waste_collection_17.by_codes3 <- waste_collection_17.by_codes3 |>
  mutate(
    waste_given_to_collector_RS = case_when(
      given_to == "other collector in RS" ~ total_waste_given_away,
      TRUE ~ 0
    ),
    waste_given_to_processing_operator_RS = case_when(
      given_to == "other processing operator in RS" ~ total_waste_given_away,
      TRUE ~ 0
    ),
    waste_given_to_other_EU_country = case_when(
      given_to == "other EU country" ~ total_waste_given_away,
      TRUE ~ 0
    ),
    waste_given_to_other_country_outside_EU = case_when(
      given_to == "other country (outside EU)" ~ total_waste_given_away,
      TRUE ~ 0
    )
  )

waste_collection_17.by_codes3 <- waste_collection_17.by_codes3 |>
  group_by(year, statistical_region, type_of_waste) |>
  summarise(
    total_waste_given_away = sum(total_waste_given_away),
    waste_given_to_collector_RS = sum(waste_given_to_collector_RS),
    waste_given_to_processing_operator_RS = sum(waste_given_to_processing_operator_RS),
    waste_given_to_other_EU_country = sum(waste_given_to_other_EU_country),
    waste_given_to_other_country_outside_EU = sum(waste_given_to_other_country_outside_EU)
  ) |>
  ungroup()
```

```{r waste_collection_to_CSV_2017}
# sheet names
sheet_names <- c(
  "Waste Storage",
  "Waste Collected",
  "Management of Waste Collected"
)

# List
waste_collection.17 <- list(
  waste_collection_17.by_codes1,
  waste_collection_17.by_codes2,
  waste_collection_17.by_codes3
)

names(waste_collection.17) <- sheet_names

for (sheet_name in sheet_names) {
  write_excel_csv(waste_collection.17[[sheet_name]], paste0("2017 data\\2017 filtered\\collection\\", tolower(gsub(" ", "_", sheet_name)), "_17.csv"))
}
```

## 2017 - Data from the annual waste recovery/disposal reports received

### Code

```{r waste_recovery_disposal_2017}
waste_recovery_disposal_17.path <- "2017 data\\2017_recovery_disposal.xlsx"
```

```{r waste_recovery_disposal_storage}
waste_recovery_disposal_17.sheet1 <- read_excel(waste_recovery_disposal_17.path, skip = 1, sheet = 1)

waste_recovery_disposal_17.by_codes1 <- waste_recovery_disposal_17.sheet1 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_recovery_disposal_17.by_codes1 <- waste_recovery_disposal_17.by_codes1 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD)

waste_recovery_disposal_17.by_codes1 <- waste_recovery_disposal_17.by_codes1 |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `ŠT. ODPADKA`,
    type_of_waste = `NAZIV ODPADKA`,
    waste_stored_start_year = `SKLADIŠČENA KOLIČINA NA DAN 1.1.2017 (kg)`,
    waste_stored_end_year = `SKLADIŠČENA KOLIČINA NA DAN 31.12.2017 (kg)`
  )

## Rename type_of_waste
waste_recovery_disposal_17.by_codes1 <- rename_waste_names(waste_recovery_disposal_17.by_codes1)

## if NA
waste_recovery_disposal_17.by_codes1[is.na(waste_recovery_disposal_17.by_codes1)] <- 0

waste_recovery_disposal_17.by_codes1 <- waste_recovery_disposal_17.by_codes1 |>
  group_by(statistical_region, type_of_waste) |>
  summarise(
    waste_stored_start_year = sum(waste_stored_start_year) / 1000,
    waste_stored_end_year = sum(waste_stored_end_year) / 1000
  ) |>
  ungroup() |>
  mutate(year = 2017)

waste_recovery_disposal_17.by_codes1 <- waste_recovery_disposal_17.by_codes1 |>
  select(year, statistical_region, type_of_waste, waste_stored_start_year, waste_stored_end_year)
```

```{r waste_recovery_disposal_collected}
waste_recovery_disposal_17.sheet2 <- read_excel(waste_recovery_disposal_17.path, skip = 1, sheet = 2)

waste_recovery_disposal_17.by_codes2 <- waste_recovery_disposal_17.sheet2 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_recovery_disposal_17.by_codes2 <- waste_recovery_disposal_17.by_codes2 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD)

waste_recovery_disposal_17.by_codes2 <- waste_recovery_disposal_17.by_codes2 |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `ŠT. ODPADKA`,
    type_of_waste = `NAZIV ODPADKA`,
    total_waste_received = `PREVZETA KOLIČINA ODPADKA (kg)`,
    received_from = `PREVZETO OD`,
    treatment_process = `POSTOPEK OBDELAVE (R00 in D00-drugi postopki obdelave, PU-ponovna uporaba, BO-brez obdelave)`
  )

## Rename type_of_waste
waste_recovery_disposal_17.by_codes2 <- rename_waste_names(waste_recovery_disposal_17.by_codes2)

## Distinct received_from
waste_recovery_disposal_17.by_codes2 |> distinct(received_from)

## Rename received_from
waste_recovery_disposal_17.by_codes2 <- waste_recovery_disposal_17.by_codes2 |>
  mutate(
    received_from = case_when(
      received_from == "1-lastni odpadki, samo v primeru OVD za obdelavo lastnih odpadkov" ~ "own waste, 'OVD' case",
      received_from == "2-drug izvirni povzročitelj v RS" ~ "other original producer in RS",
      received_from == "3-drug zbiralec v RS" ~ "other collector in RS",
      received_from == "4-drug izvajalec obdelave v RS" ~ "other processing operator in RS",
      received_from == "5-druga država članica EU" ~ "other EU country",
      received_from == "6-tretja država (izven EU)" ~ "other country (outside EU)"
    )
  )

waste_recovery_disposal_17.by_codes2 <- waste_recovery_disposal_17.by_codes2 |>
  mutate(
    waste_received_own_waste = case_when(
      received_from == "own waste, 'OVD' case" ~ total_waste_received,
      TRUE ~ 0
    ),
    waste_received_other_producer_RS = case_when(
      received_from == "other original producer in RS" ~ total_waste_received,
      TRUE ~ 0
    ),
    waste_received_collector_RS = case_when(
      received_from == "other collector in RS" ~ total_waste_received,
      TRUE ~ 0
    ),
    waste_received_processing_operator_RS = case_when(
      received_from == "other processing operator in RS" ~ total_waste_received,
      TRUE ~ 0
    ),
    waste_received_other_EU_country = case_when(
      received_from == "other EU country" ~ total_waste_received,
      TRUE ~ 0
    ),
    waste_received_other_country_outside_EU = case_when(
      received_from == "other country (outside EU)" ~ total_waste_received,
      TRUE ~ 0
    )
  )

waste_recovery_disposal_17.by_codes2 <- waste_recovery_disposal_17.by_codes2 |>
  group_by(statistical_region, type_of_waste) |>
  summarise(
    total_waste_received = sum(total_waste_received) / 1000, # for tons
    waste_received_own_waste = sum(waste_received_own_waste) / 1000,
    waste_received_other_producer_RS = sum(waste_received_other_producer_RS) / 1000,
    waste_received_collector_RS = sum(waste_received_collector_RS) / 1000,
    waste_received_processing_operator_RS = sum(waste_received_processing_operator_RS) / 1000,
    waste_received_other_EU_country = sum(waste_received_other_EU_country) / 1000,
    waste_received_other_country_outside_EU = sum(waste_received_other_country_outside_EU) / 1000
  ) |>
  ungroup() |>
  mutate(year = 2017)

waste_recovery_disposal_17.by_codes2 <- waste_recovery_disposal_17.by_codes2 |>
  select(year, statistical_region, type_of_waste, total_waste_received, waste_received_own_waste, waste_received_other_producer_RS, waste_received_collector_RS, waste_received_processing_operator_RS, waste_received_other_EU_country, waste_received_other_country_outside_EU)
```

```{r treatment_of_waste}
waste_recovery_disposal_17.sheet3 <- read_excel(waste_recovery_disposal_17.path, skip = 1, sheet = 3)

waste_recovery_disposal_17.by_codes3 <- waste_recovery_disposal_17.sheet3 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_recovery_disposal_17.by_codes3 <- waste_recovery_disposal_17.by_codes3 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD)

waste_recovery_disposal_17.by_codes3 <- waste_recovery_disposal_17.by_codes3 |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `ŠT. ODPADKA`,
    type_of_waste = `NAZIV ODPADKA`,
    total_waste_given_away = `KOLIČINA ODPADKOV, DANIH V OBDELAVO (kg)`,
    treatment_process = `POSTOPEK OBDELAVE (R00 in D00-drugi postopki obdelave, PU-ponovna uporaba, BO-brez obdelave)`,
    treatment_according_to_8th_article = `OBDELAVA PO 8.ČLENU UREDBE O ODPADKIH`
  )

## Rename type_of_waste
waste_recovery_disposal_17.by_codes3 <- rename_waste_names(waste_recovery_disposal_17.by_codes3)

## Distinct treatment_process
waste_recovery_disposal_17.by_codes3 |> distinct(treatment_process)

waste_recovery_disposal_17.by_codes3 <- waste_recovery_disposal_17.by_codes3 |>
  group_by(statistical_region, type_of_waste, treatment_process, treatment_according_to_8th_article) |>
  summarise(
    total_waste_given_away = sum(total_waste_given_away) / 1000 # for tons
  ) |>
  ungroup() |>
  mutate(year = 2017)

waste_recovery_disposal_17.by_codes3 <- waste_recovery_disposal_17.by_codes3 |>
  select(-treatment_process, -treatment_according_to_8th_article) |>
  group_by(year, statistical_region, type_of_waste) |>
  summarise(
    total_waste_given_away = sum(total_waste_given_away)
  ) |>
  ungroup()
```

Waste Generated in the Treatment Process and Waste Untreated and Handed Over to Others in 2017

```{r waste_recovery_disposal_generated_untreated_2017}
waste_recovery_disposal_17.sheet4 <- read_excel(waste_recovery_disposal_17.path, skip = 1, sheet = 4)

waste_recovery_disposal_17.by_codes4 <- waste_recovery_disposal_17.sheet4 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_recovery_disposal_17.by_codes4 <- waste_recovery_disposal_17.by_codes4 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD)

waste_recovery_disposal_17.by_codes4 <- waste_recovery_disposal_17.by_codes4 |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `ŠT. ODPADKA`,
    type_of_waste = `NAZIV ODPADKA`,
    total_waste_generated = `PO OBDELAVI NASTALI ODPADKI IN ODPADKI ODDANI DRUGIM BREZ OBDELAVE  (kg)`,
    given_to = `ODDANO KOMU`,
    treatment_process = `POSTOPEK OBDELAVE, ČE SO ODPADKI POSLANI V OBDELAVO V TUJINO`
  )

## Rename type_of_waste
waste_recovery_disposal_17.by_codes4 <- rename_waste_names(waste_recovery_disposal_17.by_codes4)

## Distinct given_to
waste_recovery_disposal_17.by_codes4 |> distinct(given_to)

## Rename given_to
waste_recovery_disposal_17.by_codes4 <- waste_recovery_disposal_17.by_codes4 |>
  mutate(
    given_to = case_when(
      given_to == "1-drug zbiralec v RS" ~ "other collector in RS",
      given_to == "2-drug izvajalec obdelave v RS" ~ "other processing operator in RS",
      given_to == "3-druga država članica EU" ~ "other EU country",
      given_to == "4-tretja država (izven EU)" ~ "other country (outside EU)"
    )
  )

waste_recovery_disposal_17.by_codes4 <- waste_recovery_disposal_17.by_codes4 |>
  group_by(statistical_region, type_of_waste, given_to) |>
  summarise(
    total_waste_generated = sum(total_waste_generated) / 1000 # for tons
  ) |>
  ungroup() |>
  mutate(year = 2017)

waste_recovery_disposal_17.by_codes4 <- waste_recovery_disposal_17.by_codes4 |>
  mutate(
    waste_generated_collector_RS = case_when(
      given_to == "other collector in RS" ~ total_waste_generated,
      TRUE ~ 0
    ),
    waste_generated_processing_operator_RS = case_when(
      given_to == "other processing operator in RS" ~ total_waste_generated,
      TRUE ~ 0
    ),
    waste_generated_other_EU_country = case_when(
      given_to == "other EU country" ~ total_waste_generated,
      TRUE ~ 0
    ),
    waste_generated_other_country_outside_EU = case_when(
      given_to == "other country (outside EU)" ~ total_waste_generated,
      TRUE ~ 0
    )
  )

waste_recovery_disposal_17.by_codes4 <- waste_recovery_disposal_17.by_codes4 |>
  group_by(year, statistical_region, type_of_waste) |>
  summarise(
    total_waste_generated = sum(total_waste_generated),
    waste_generated_collector_RS = sum(waste_generated_collector_RS),
    waste_generated_processing_operator_RS = sum(waste_generated_processing_operator_RS),
    waste_generated_other_EU_country = sum(waste_generated_other_EU_country),
    waste_generated_other_country_outside_EU = sum(waste_generated_other_country_outside_EU)
  ) |>
  ungroup()
```

The Difference in Mass Between the Waste Input and the Treatment Product Volumes Due to Losses During the Treatment Process in 2017

```{r waste_recovery_disposal_losses_2017}
waste_recovery_disposal_17.sheet5 <- read_excel(waste_recovery_disposal_17.path, skip = 1, sheet = 5)

waste_recovery_disposal_17.by_codes5 <- waste_recovery_disposal_17.sheet5 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_recovery_disposal_17.by_codes5 <- waste_recovery_disposal_17.by_codes5 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD)

waste_recovery_disposal_17.by_codes5 <- waste_recovery_disposal_17.by_codes5 |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    waste_code = `ŠT. ODPADKA`,
    type_of_waste = `NAZIV ODPADKA`,
    lost_mass = `IZGUBLJENA KOLIČINA (kg)`
  )

## Rename type_of_waste
waste_recovery_disposal_17.by_codes5 <- rename_waste_names(waste_recovery_disposal_17.by_codes5)

waste_recovery_disposal_17.by_codes5 <- waste_recovery_disposal_17.by_codes5 |>
  group_by(name_of_company, type_of_waste) |>
  summarise(
    lost_mass = sum(lost_mass) / 1000 # for tons
  ) |>
  ungroup() |>
  mutate(year = 2017)

waste_recovery_disposal_17.by_codes5 <- waste_recovery_disposal_17.by_codes5 |>
  select(year, name_of_company, type_of_waste, lost_mass)
```

The Capacity and Condition of the Landfill in 2017

```{r waste_recovery_disposal_landfill_2017}
waste_recovery_disposal_17.sheet6 <- read_excel(waste_recovery_disposal_17.path, skip = 1, sheet = 6)

waste_recovery_disposal_17 <- waste_recovery_disposal_17.sheet6 |>
  select(-`MATIČNA ŠTEVILKA`)

waste_recovery_disposal_17 <- waste_recovery_disposal_17 |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    landfill = ODLAGALIŠČE,
    volume_filled_start_year = `ZAPOLNJEN VOLUMEN NA DAN 1.1. (m3)`,
    area_filled_start_year = `ZAPOLNJENA POVRŠINA NA DAN 1.1. (m2)`,
    free_capacity_volume_end_year = `VOLUMEN PROSTE KAPACITETE ODLAGALIŠČA NA DAN 31.12.  (m3)`,
    free_capacity_area_end_year = `POVRŠINA PROSTE KAPACITETE ODLAGALIŠČA NA DAN 31.12.  (m2)`,
    total_capacity = `CELOTNA ZMOGLIVOST ODLAGANJA (t)`,
    remaining_capacity = `PREOSTALA ZMOGLIVOST ODLAGANJA (t)`,
    start_date = `DATUM ZAČETKA ODLAGANAJA`,
    end_date = `PREDVIDENO PRENEHANJE ODLAGANJA`
  )
```

Total Quantities and Management of Waste in Landfill in 2017

```{r waste_recovery_disposal_total_2017}
waste_recovery_disposal_17.sheet7 <- read_excel(waste_recovery_disposal_17.path, skip = 1, sheet = 7)

waste_recovery_disposal_17.by_codes7 <- waste_recovery_disposal_17.sheet7 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_recovery_disposal_17.by_codes7 <- waste_recovery_disposal_17.by_codes7 |>
  select(-`MATIČNA ŠTEVILKA`)

waste_recovery_disposal_17.by_codes7 <- waste_recovery_disposal_17.by_codes7 |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    landfill = `ODLAGALIŠČE`,
    waste_code = `ŠT. ODPADKA`,
    type_of_waste = `NAZIV ODPADKA`,
    total_inert_waste_received = `KOLIČINA PREJETIH INERTNIH ODPADKOV V ODLAGANJE Z OCENO (kg)`,
    total_non_hazardous_waste_received = `KOLIČINA PREJETIH NENEVARNIH ODPADKOV V ODLAGANJE Z OCENO (kg)`,
    total_hazardous_waste_received = `KOLIČINA PREJETIH NEVARNIH ODPADKOV V ODLAGANJE Z OCENO (kg)`,
    total_waste_received_no_estimate = `KOLIČINA PREJETIH ODPADKOV V ODLAGANJE BREZ OCENE (kg)`,
    total_waste_received_EU = `KOLIČINA PREJETIH ODPADKOV V ODLAGANJE IZ EU (kg)`,
    total_waste_received_outside_EU = `KOLIČINA PREJETIH ODPADKOV V ODLAGANJE IZ TRETJIH DRŽAV (kg)`,
    total_deposited = `ODLOŽENO (kg)`,
    for_construction = `ZA GRADNJO OBJEKTOV ODLAGALIŠČA (kg)`,
    for_daily_covering = `ZA DNEVNO PREKRIVANJE (kg)`,
    stored_on_landfill = `SKLADIŠČENO NA ODLAGALIŠČU (kg)`,
    rejected = `ZAVRNJENO (kg)`
  )

## Rename type_of_waste
waste_recovery_disposal_17.by_codes7 <- rename_waste_names(waste_recovery_disposal_17.by_codes7)

## if NA
waste_recovery_disposal_17.by_codes7[is.na(waste_recovery_disposal_17.by_codes7)] <- 0

waste_recovery_disposal_17.by_codes7 <- waste_recovery_disposal_17.by_codes7 |>
  select(where(~ !all(. == 0)))

waste_recovery_disposal_17.by_codes7 <- waste_recovery_disposal_17.by_codes7 |>
  group_by(name_of_company, landfill, waste_code, type_of_waste) |>
  summarise(
    total_non_hazardous_waste_received = sum(total_non_hazardous_waste_received) / 1000, # for tons
    total_deposited = sum(total_deposited) / 1000,
  ) |>
  ungroup()
```

```{r waste_recovery_disposal_to_CSV_2017}
# sheet names
sheet_names <- c(
  "Waste Storage",
  "Waste Collected",
  "Treatment of Waste",
  "Waste Generated and Untreated",
  "Waste Losses",
  "Landfill",
  "Total Waste in Landfill"
)

# List
waste_recovery_disposal.17 <- list(
  waste_recovery_disposal_17.by_codes1,
  waste_recovery_disposal_17.by_codes2,
  waste_recovery_disposal_17.by_codes3,
  waste_recovery_disposal_17.by_codes4,
  waste_recovery_disposal_17.by_codes5,
  waste_recovery_disposal_17,
  waste_recovery_disposal_17.by_codes7
)

names(waste_recovery_disposal.17) <- sheet_names

for (sheet_name in sheet_names) {
  write_excel_csv(waste_recovery_disposal.17[[sheet_name]], paste0("2017 data\\2017 filtered\\treatment\\", tolower(gsub(" ", "_", sheet_name)), "_17.csv"))
}
```

# Year 2016

## 2016 - Data from the annual reports received on waste generation in manufacturing and service activities

### Code

```{r table_1_waste_generated_2016}
waste_generation_16.path <- "2016 data\\2016_generation.xls"

waste_generation_16.sheet1 <- read_excel(waste_generation_16.path, skip = 2, sheet = 1)

waste_generation_16.by_codes1 <- waste_generation_16.sheet1 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_generation_16.by_codes1 <- waste_generation_16.by_codes1 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD)

waste_generation_16.by_codes1 <- waste_generation_16.by_codes1 |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `ŠT. ODPADKA`,
    total_waste_generated = `SKUPAJ: NASTALI ODPADKI v 2016 in SKLADIŠČENI ODPADKI NA DAN  01.01.2016 (kg)`,
    waste_stored_start_year = `SKLADIŠČENA KOLIČINA  ODPADKOV NA DAN 01.01.2016 (kg)`,
    waste_generated = `KOLIČINA ODPADKOV, NASTALIH V LETU 2016 (kg)`,
    waste_stored_end_year = `SKLADIŠČENA KOLIČINA  ODPADKOV NA DAN 31.12.2016 (kg)`
  )

## Add type_of_waste
waste_generation_16.by_codes1 <- waste_generation_16.by_codes1 |> categorize_waste()

## if NA
waste_generation_16.by_codes1[is.na(waste_generation_16.by_codes1)] <- 0

waste_generation_16.by_codes1 <- waste_generation_16.by_codes1 |>
  group_by(statistical_region, waste_code, type_of_waste) |>
  summarise(
    total_waste_generated = sum(total_waste_generated) / 1000,
    waste_stored_start_year = sum(waste_stored_start_year) / 1000,
    waste_generated = sum(waste_generated) / 1000,
    waste_stored_end_year = sum(waste_stored_end_year) / 1000
  ) |>
  ungroup() |>
  mutate(year = 2016)

## Remove numbers from the names of statistical regions
waste_generation_16.by_codes1 <- waste_generation_16.by_codes1 |>
  mutate(statistical_region = gsub("[0-9]", "", statistical_region))

waste_generation_16.by_codes1 <- waste_generation_16.by_codes1 |>
  mutate(statistical_region = gsub(" ", "", statistical_region, fixed = TRUE))

waste_generation_16.by_codes1 <- waste_generation_16.by_codes1 |>
  select(year, statistical_region, waste_code, type_of_waste, total_waste_generated, waste_stored_start_year, waste_generated, waste_stored_end_year)
```

#### New codes

```{r}

# Create a named color vector for each waste code
code_colors <- setNames(
  waste_palette[1:length(codes)],  # Assign colors sequentially
  codes                            # To the waste codes
)

# Create a named color vector for each statistical_region
region_colors <- setNames(
  waste_palette[1:length(unique(waste_generation_16.by_codes1$statistical_region))],  # Assign colors sequentially
  unique(waste_generation_16.by_codes1$statistical_region)                            # To the regions
)

# total_waste_generated + statistical_region ----------------------------------------------------

waste_plot_data <- waste_generation_16.by_codes1 |>
  group_by(statistical_region) |> # can be changed to type_of_waste or statistical_region
  summarise(total_generated = sum(total_waste_generated, na.rm = TRUE)) |>
  mutate(
    percentage = total_generated/sum(total_generated),
    display_label = paste0(comma(total_generated), " (", percent(percentage, accuracy = 0.01), ")")
  ) |> 
  # Arrange by total_generated first
  arrange(total_generated) |>
  # THEN set factor levels in this order
  mutate(statistical_region = factor(statistical_region, levels = statistical_region)) # can be changed to type_of_waste or statistical_region

# Create the plot with fixed color mapping
ggplot(waste_plot_data, 
       aes(x = total_generated, 
           y = statistical_region,
           fill = statistical_region)) +
  geom_col(width = 0.8, alpha = 0.9) +
  geom_text(
    aes(label = display_label),
    hjust = -0.1, 
    size = 3.5, 
    color = "gray30",
    fontface = "bold"
  ) +
  # Use our fixed color mapping
  scale_fill_manual(values = region_colors) +
  scale_x_continuous(
    expand = expansion(mult = c(0, 0.2)),
    labels = comma_format()
  ) +
  labs(
    title = "WASTE GENERATION BY TYPE (2016)", # title = "WASTE GENERATION BY REGION (2016)",
    subtitle = "Total quantities with percentage contribution",
    x = NULL,
    y = NULL
  ) +
  theme_minimal(base_size = 13) +
  theme(
    legend.position = "none",
    panel.grid.major.y = element_blank(),
    panel.grid.minor = element_blank(),
    plot.title = element_text(
      face = "bold", 
      size = 18, 
      color = "#2c3e50",
      margin = margin(b = 10)
    ),
    plot.subtitle = element_text(
      size = 13, 
      color = "#7f8c8d", 
      margin = margin(b = 20)
    ),
    axis.text.y = element_text(
      color = "#34495e", 
      size = 12,
      hjust = 0
    ),
    # axis.text.x = element_blank(),
    plot.margin = margin(25, 45, 25, 25)
  )

# total_waste_generated + waste_code ----------------------------------------------------

waste_plot_data <- waste_generation_16.by_codes1 |>
  group_by(waste_code) |> # can be changed to type_of_waste or statistical_region
  summarise(total_generated = sum(total_waste_generated, na.rm = TRUE)) |>
  mutate(
    percentage = total_generated/sum(total_generated),
    display_label = paste0(comma(total_generated), " (", percent(percentage, accuracy = 0.01), ")")
  ) |> 
  # Arrange by total_generated first
  arrange(total_generated) |>
  # THEN set factor levels in this order
  mutate(waste_code = factor(waste_code, levels = waste_code)) # can be changed to type_of_waste or statistical_region

# Create the plot with fixed color mapping
ggplot(waste_plot_data, 
       aes(x = total_generated, 
           y = waste_code,
           fill = waste_code)) +
  geom_col(width = 0.8, alpha = 0.9) +
  geom_text(
    aes(label = display_label),
    hjust = -0.1, 
    size = 3.5, 
    color = "gray30",
    fontface = "bold"
  ) +
  # Use our fixed color mapping
  scale_fill_manual(values = code_colors) +
  scale_x_continuous(
    expand = expansion(mult = c(0, 0.2)),
    labels = comma_format()
  ) +
  labs(
    title = "WASTE GENERATION BY TYPE (2016)", # title = "WASTE GENERATION BY REGION (2016)",
    subtitle = "Total quantities with percentage contribution",
    x = NULL,
    y = NULL
  ) +
  theme_minimal(base_size = 13) +
  theme(
    legend.position = "none",
    panel.grid.major.y = element_blank(),
    panel.grid.minor = element_blank(),
    plot.title = element_text(
      face = "bold", 
      size = 18, 
      color = "#2c3e50",
      margin = margin(b = 10)
    ),
    plot.subtitle = element_text(
      size = 13, 
      color = "#7f8c8d", 
      margin = margin(b = 20)
    ),
    axis.text.y = element_text(
      color = "#34495e", 
      size = 12,
      hjust = 0
    ),
    # axis.text.x = element_blank(),
    plot.margin = margin(25, 45, 25, 25)
  )

```

```{r table_2_waste_management_2016}
waste_generation_16.sheet2 <- read_excel(waste_generation_16.path, skip = 2, sheet = 2)

waste_generation_16.by_codes2 <- waste_generation_16.sheet2 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_generation_16.by_codes2 <- waste_generation_16.by_codes2 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD)

waste_generation_16.by_codes2 <- waste_generation_16.by_codes2 |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `ŠT. ODPADKA`,
    total_waste_given_away = `KOLIČINA ODPADKOV ODDANA ALI POSLANA DRUGEMU PREVZEMNIKU (kg)`,
    management = `RAVNANJE`,
    treatment_process = `POSTOPEK OBDELAVE (R00 ali D00 ali R99 drug postopek obdelave)`
  )

## Add type_of_waste
waste_generation_16.by_codes2 <- waste_generation_16.by_codes2 |> categorize_waste()

## get distinct management
waste_generation_16.by_codes2 |> distinct(management)

## Rename management
waste_generation_16.by_codes2 <- waste_generation_16.by_codes2 |>
  mutate(
    management = case_when(
      management == "1 - odpadke so obdelali sami" ~ "own processing (OVD for processing own waste)", # disclaimer this was name was taken from the 2017 data
      management == "2 - odpadke so oddali prevzemniku (drugi osebi) v RS" ~ "given to another collector in RS",
      management == "3 - odpadke so poslali v drugo državo članico EU" ~ "sent to another EU country"
    )
  )

waste_generation_16.by_codes2 <- waste_generation_16.by_codes2 |>
  group_by(statistical_region, type_of_waste, management) |>
  summarise(
    total_waste_given_away = sum(total_waste_given_away) / 1000 # for tons
  ) |>
  ungroup() |>
  mutate(year = 2016)

## Remove numbers from the names of statistical regions
waste_generation_16.by_codes2 <- waste_generation_16.by_codes2 |>
  mutate(statistical_region = gsub("[0-9]", "", statistical_region))

waste_generation_16.by_codes2 <- waste_generation_16.by_codes2 |>
  mutate(statistical_region = gsub(" ", "", statistical_region, fixed = TRUE))


waste_generation_16.by_codes2 <- waste_generation_16.by_codes2 |>
  select(year, statistical_region, type_of_waste, total_waste_given_away, management)
```

```{r generatio_to_CSV_2016}
# sheet names
sheet_names <- c(
  "Waste Generation",
  "Waste Management"
)

# List
waste_generation.16 <- list(
  waste_generation_16.by_codes1,
  waste_generation_16.by_codes2
)

names(waste_generation.16) <- sheet_names

for (sheet_name in sheet_names) {
  write_excel_csv(waste_generation.16[[sheet_name]], paste0("2016 data\\2016 filtered\\generation\\", tolower(gsub(" ", "_", sheet_name)), "_16.csv"))
}
```

## 2016 - Data from the annual reports received on waste collection from manufacturing and service activities

### Code

```{r waste_collection_2016}
waste_collection_16.path <- "2016 data\\2016_collection.xls"
```

```{r waste_storage}
waste_collection_16.sheet1 <- read_excel(waste_collection_16.path, skip = 1, sheet = 1)

waste_collection_16.by_codes1 <- waste_collection_16.sheet1 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_collection_16.by_codes1 <- waste_collection_16.by_codes1 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD)

waste_collection_16.by_codes1 <- waste_collection_16.by_codes1 |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `ŠT. ODPADKA`,
    waste_stored_start_year = `SKLADIŠČENA KOLIČINA ODPADKOV NA DAN 1.1.2016 (kg)`,
    waste_stored_end_year = `SKLADIŠČENA KOLIČINA ODPADKOV NA DAN 31.12.2016 (kg)`
  )

## Add type_of_waste
waste_collection_16.by_codes1 <- waste_collection_16.by_codes1 |> categorize_waste()

## if statistical region is NA, excluded it from the data
waste_collection_16.by_codes1 <- waste_collection_16.by_codes1 |>
  filter(!is.na(statistical_region))

## if NA
waste_collection_16.by_codes1[is.na(waste_collection_16.by_codes1)] <- 0

waste_collection_16.by_codes1 <- waste_collection_16.by_codes1 |>
  group_by(statistical_region, type_of_waste) |>
  summarise(
    waste_stored_start_year = sum(waste_stored_start_year) / 1000,
    waste_stored_end_year = sum(waste_stored_end_year) / 1000
  ) |>
  ungroup() |>
  mutate(year = 2016)


waste_collection_16.by_codes1 <- waste_collection_16.by_codes1 |>
  select(year, statistical_region, type_of_waste, waste_stored_start_year, waste_stored_end_year)
```

```{r waste_collected}
waste_collection_16.sheet2 <- read_excel(waste_collection_16.path, skip = 1, sheet = 2)

waste_collection_16.by_codes2 <- waste_collection_16.sheet2 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_collection_16.by_codes2 <- waste_collection_16.by_codes2 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD)

waste_collection_16.by_codes2 <- waste_collection_16.by_codes2 |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `ŠT. ODPADKA`,
    total_waste_collected = `KOLIČINA ZBRANIH ODPADKOV (kg)`,
    collected_from = `ZBRANO OD`
  )

## Add type_of_waste
waste_collection_16.by_codes2 <- waste_collection_16.by_codes2 |> categorize_waste()

## get distinct collected_from
waste_collection_16.by_codes2 |> distinct(collected_from)

## Rename collected_from
waste_collection_16.by_codes2 <- waste_collection_16.by_codes2 |>
  mutate(
    collected_from = case_when(
      collected_from == "izvirnega povzročitelja: prepuščeno" ~ "received from producers without a list",
      collected_from == "izvirnega povzročitelja: oddano" ~ "received from producers with a list",
      collected_from == "drugega zbiralca" ~ "received from other collectors",
      collected_from == "izvajalca obdelave" ~ "received from processing operators"
    )
  )

waste_collection_16.by_codes2 <- waste_collection_16.by_codes2 |>
  group_by(statistical_region, type_of_waste, collected_from) |>
  summarise(
    total_waste_collected = sum(total_waste_collected) / 1000 # for tons
  ) |>
  ungroup() |>
  mutate(year = 2016)

waste_collection_16.by_codes2 <- waste_collection_16.by_codes2 |>
  select(year, statistical_region, type_of_waste, total_waste_collected, collected_from)

# create from collected_from column
waste_collection_16.by_codes2 <- waste_collection_16.by_codes2 |>
  mutate(
    waste_from_producers_no_record = case_when(
      collected_from == "received from producers without a list" ~ total_waste_collected,
      TRUE ~ 0
    ),
    waste_from_producers_with_record = case_when(
      collected_from == "received from producers with a list" ~ total_waste_collected,
      TRUE ~ 0
    ),
    waste_from_collectors_RS = case_when(
      collected_from == "received from other collectors" ~ total_waste_collected,
      TRUE ~ 0
    ),
    waste_from_processors_RS = case_when(
      collected_from == "received from processing operators" ~ total_waste_collected,
      TRUE ~ 0
    )
  )

waste_collection_16.by_codes2 <- waste_collection_16.by_codes2 |>
  group_by(year, statistical_region, type_of_waste) |>
  summarise(
    total_waste_collected = sum(total_waste_collected),
    waste_from_producers_no_record = sum(waste_from_producers_no_record),
    waste_from_producers_with_record = sum(waste_from_producers_with_record),
    waste_from_collectors_RS = sum(waste_from_collectors_RS),
    waste_from_processors_RS = sum(waste_from_processors_RS)
  ) |>
  ungroup()
```

```{r management_waste_collected}
waste_collection_16.sheet3 <- read_excel(waste_collection_16.path, skip = 1, sheet = 3)

waste_collection_16.by_codes3 <- waste_collection_16.sheet3 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_collection_16.by_codes3 <- waste_collection_16.by_codes3 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD)

waste_collection_16.by_codes3 <- waste_collection_16.by_codes3 |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `ŠT. ODPADKA`,
    total_waste_given_away = `ODDANA KOLIČINA ODPADKOV (kg)`,
    given_to = `ODDANO KOMU`,
    treatment_process = `POSTOPEK OBDELAVE, ČE SO BILI ODPADKI POSLANI V OBDELAVO V TUJINO (R00 in D00-drugi postopki obdelave, PU-ponovna uporaba)`
  )

## Add type_of_waste
waste_collection_16.by_codes3 <- waste_collection_16.by_codes3 |> categorize_waste()

## get distinct given_to
waste_collection_16.by_codes3 |> distinct(given_to)
## Rename given_to
waste_collection_16.by_codes3 <- waste_collection_16.by_codes3 |>
  mutate(
    given_to = case_when(
      given_to == "izvajalec obdelave v RS" ~ "processing operator in RS",
      given_to == "drug zbiralec v RS" ~ "other collector in RS",
      given_to == "druga država članica EU" ~ "other EU country"
    )
  )

waste_collection_16.by_codes3 <- waste_collection_16.by_codes3 |>
  group_by(statistical_region, type_of_waste, given_to) |>
  summarise(
    total_waste_given_away = sum(total_waste_given_away) / 1000 # for tons
  ) |>
  ungroup() |>
  mutate(year = 2016)

waste_collection_16.by_codes3 <- waste_collection_16.by_codes3 |>
  select(year, statistical_region, type_of_waste, total_waste_given_away, given_to)

# create from given_to column
waste_collection_16.by_codes3 <- waste_collection_16.by_codes3 |>
  mutate(
    waste_given_to_processing_operator_RS = case_when(
      given_to == "processing operator in RS" ~ total_waste_given_away,
      TRUE ~ 0
    ),
    waste_given_to_other_collector_RS = case_when(
      given_to == "other collector in RS" ~ total_waste_given_away,
      TRUE ~ 0
    ),
    waste_given_to_other_EU_country = case_when(
      given_to == "other EU country" ~ total_waste_given_away,
      TRUE ~ 0
    )
  )

waste_collection_16.by_codes3 <- waste_collection_16.by_codes3 |>
  group_by(year, statistical_region, type_of_waste) |>
  summarise(
    total_waste_given_away = sum(total_waste_given_away),
    waste_given_to_processing_operator_RS = sum(waste_given_to_processing_operator_RS),
    waste_given_to_other_collector_RS = sum(waste_given_to_other_collector_RS),
    waste_given_to_other_EU_country = sum(waste_given_to_other_EU_country)
  ) |>
  ungroup()

# if statistical region is NA, write "NEOPREDELJENO"
waste_collection_16.by_codes3 <- waste_collection_16.by_codes3 |>
  mutate(statistical_region = ifelse(is.na(statistical_region), "NEOPREDELJENO", statistical_region))
```

```{r waste_collection_to_CSV_2016}
# sheet names
sheet_names <- c(
  "Waste Storage",
  "Waste Collected",
  "Management of Waste Collected"
)

# List
waste_collection.16 <- list(
  waste_collection_16.by_codes1,
  waste_collection_16.by_codes2,
  waste_collection_16.by_codes3
)

names(waste_collection.16) <- sheet_names

for (sheet_name in sheet_names) {
  write_excel_csv(waste_collection.16[[sheet_name]], paste0("2016 data\\2016 filtered\\collection\\", tolower(gsub(" ", "_", sheet_name)), "_16.csv"))
}
```

## 2016 - Data from the annual waste recovery/disposal reports received

### Code

```{r waste_recovery_disposal_2016}
waste_recovery_disposal_16.path <- "2016 data\\2016_recovery_disposal.xls"
```

```{r waste_storage}
waste_recovery_disposal_16.sheet1 <- read_excel(waste_recovery_disposal_16.path, skip = 1, sheet = 1)

waste_recovery_disposal_16.by_codes1 <- waste_recovery_disposal_16.sheet1 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_recovery_disposal_16.by_codes1 <- waste_recovery_disposal_16.by_codes1 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD)

waste_recovery_disposal_16.by_codes1 <- waste_recovery_disposal_16.by_codes1 |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `ŠT. ODPADKA`,
    waste_stored_start_year = `SKLADIŠČENA KOLIČINA NA DAN 1.1.2016 (kg)`,
    waste_stored_end_year = `SKLADIŠČENA KOLIČINA NA DAN 31.12.2016 (kg)`
  )

## Add type_of_waste
waste_recovery_disposal_16.by_codes1 <- waste_recovery_disposal_16.by_codes1 |> categorize_waste()

## if statistical region is NA, excluded it from the data
waste_recovery_disposal_16.by_codes1 <- waste_recovery_disposal_16.by_codes1 |>
  filter(!is.na(statistical_region))

## if NA
waste_recovery_disposal_16.by_codes1[is.na(waste_recovery_disposal_16.by_codes1)] <- 0

waste_recovery_disposal_16.by_codes1 <- waste_recovery_disposal_16.by_codes1 |>
  group_by(statistical_region, type_of_waste) |>
  summarise(
    waste_stored_start_year = sum(waste_stored_start_year) / 1000,
    waste_stored_end_year = sum(waste_stored_end_year) / 1000
  ) |>
  ungroup() |>
  mutate(year = 2016)

waste_recovery_disposal_16.by_codes1 <- waste_recovery_disposal_16.by_codes1 |>
  select(year, statistical_region, type_of_waste, waste_stored_start_year, waste_stored_end_year)
```

```{r waste_collected}
waste_recovery_disposal_16.sheet2 <- read_excel(waste_recovery_disposal_16.path, skip = 1, sheet = 2)

waste_recovery_disposal_16.by_codes2 <- waste_recovery_disposal_16.sheet2 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_recovery_disposal_16.by_codes2 <- waste_recovery_disposal_16.by_codes2 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD)

waste_recovery_disposal_16.by_codes2 <- waste_recovery_disposal_16.by_codes2 |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `ŠT. ODPADKA`,
    total_waste_collected = `PREVZETA KOLIČINA ODPADKA (kg)`,
    collected_from = `PREVZETO OD`,
    treatment_process = `POSTOPEK OBDELAVE (R00 in D00-drugi postopki obdelave, PU-ponovna uporaba, BO-brez obdelave)`
  )

## Add type_of_waste
waste_recovery_disposal_16.by_codes2 <- waste_recovery_disposal_16.by_codes2 |> categorize_waste() 

## get distinct collected_from
waste_recovery_disposal_16.by_codes2 |> distinct(collected_from)
## Rename collected_from
waste_recovery_disposal_16.by_codes2 <- waste_recovery_disposal_16.by_codes2 |>
  mutate(
    collected_from = case_when(
      collected_from == "zbiralec v RS" ~ "collector in RS",
      collected_from == "drug izvirni povzročitelj v RS" ~ "other original producer in RS",
      collected_from == "drug izvajalec obdelave v RS" ~ "other processing operator in RS",
      collected_from == "druga država članica EU" ~ "other EU country",
      collected_from == "lastni odpadki" ~ "own waste",
      collected_from == "tretja država izven EU" ~ "other country (outside EU)"
    )
  )

waste_recovery_disposal_16.by_codes2 <- waste_recovery_disposal_16.by_codes2 |>
  group_by(statistical_region, type_of_waste, collected_from) |>
  summarise(
    total_waste_collected = sum(total_waste_collected) / 1000 # for tons
  ) |>
  ungroup() |>
  mutate(year = 2016)

waste_recovery_disposal_16.by_codes2 <- waste_recovery_disposal_16.by_codes2 |>
  select(year, statistical_region, type_of_waste, total_waste_collected, collected_from)

# create from collected_from column
waste_recovery_disposal_16.by_codes2 <- waste_recovery_disposal_16.by_codes2 |>
  mutate(
    waste_collected_from_collector_RS = case_when(
      collected_from == "collector in RS" ~ total_waste_collected,
      TRUE ~ 0
    ),
    waste_collected_from_other_original_producer_RS = case_when(
      collected_from == "other original producer in RS" ~ total_waste_collected,
      TRUE ~ 0
    ),
    waste_collected_from_other_processing_operator_RS = case_when(
      collected_from == "other processing operator in RS" ~ total_waste_collected,
      TRUE ~ 0
    ),
    waste_collected_from_other_EU_country = case_when(
      collected_from == "other EU country" ~ total_waste_collected,
      TRUE ~ 0
    ),
    waste_collected_from_own_waste = case_when(
      collected_from == "own waste" ~ total_waste_collected,
      TRUE ~ 0
    ),
    waste_collected_from_other_country_outside_EU = case_when(
      collected_from == "other country (outside EU)" ~ total_waste_collected,
      TRUE ~ 0
    )
  )

waste_recovery_disposal_16.by_codes2 <- waste_recovery_disposal_16.by_codes2 |>
  group_by(year, statistical_region, type_of_waste) |>
  summarise(
    total_waste_collected = sum(total_waste_collected),
    waste_collected_from_collector_RS = sum(waste_collected_from_collector_RS),
    waste_collected_from_other_original_producer_RS = sum(waste_collected_from_other_original_producer_RS),
    waste_collected_from_other_processing_operator_RS = sum(waste_collected_from_other_processing_operator_RS),
    waste_collected_from_other_EU_country = sum(waste_collected_from_other_EU_country),
    waste_collected_from_own_waste = sum(waste_collected_from_own_waste),
    waste_collected_from_other_country_outside_EU = sum(waste_collected_from_other_country_outside_EU)
  ) |>
  ungroup()
```

```{r treatment_waste_collected}
waste_recovery_disposal_16.sheet3 <- read_excel(waste_recovery_disposal_16.path, skip = 1, sheet = 3)

waste_recovery_disposal_16.by_codes3 <- waste_recovery_disposal_16.sheet3 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_recovery_disposal_16.by_codes3 <- waste_recovery_disposal_16.by_codes3 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD)

waste_recovery_disposal_16.by_codes3 <- waste_recovery_disposal_16.by_codes3 |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `ŠT. ODPADKA`,
    total_waste_given_away = `KOLIČINA ODPADKOV, DANIH V OBDELAVO (kg)`,
    treatment_process = `POSTOPEK OBDELAVE (R00 in D00-drugi postopki obdelave, PU-ponovna uporaba, BO-brez obdelave)`,
    treatment_according_to_8th_article = `OBDELAVA PO 8.ČLENU UREDBE O ODPADKIH`
  )

## Add type_of_waste
waste_recovery_disposal_16.by_codes3 <- waste_recovery_disposal_16.by_codes3 |> categorize_waste()

waste_recovery_disposal_16.by_codes3 <- waste_recovery_disposal_16.by_codes3 |>
  group_by(statistical_region, type_of_waste, treatment_process) |>
  summarise(
    total_waste_given_away = sum(total_waste_given_away) / 1000 # for tons
  ) |>
  ungroup() |>
  mutate(year = 2016)

waste_recovery_disposal_16.by_codes3 <- waste_recovery_disposal_16.by_codes3 |>
  select(-treatment_process) |>
  group_by(year, statistical_region, type_of_waste) |>
  summarise(
    total_waste_given_away = sum(total_waste_given_away)
  ) |>
  ungroup()
```

```{r waste_recovery_disposal_generated_untreated_2016}
waste_recovery_disposal_16.sheet4 <- read_excel(waste_recovery_disposal_16.path, skip = 1, sheet = 4)

waste_recovery_disposal_16.by_codes4 <- waste_recovery_disposal_16.sheet4 |>
  filter(
    `ŠT. ODPADKA` %in% codes |
      grepl("^03 01 [0-9]", `ŠT. ODPADKA`, perl = TRUE) &
        !grepl("03 01 04", `ŠT. ODPADKA`, perl = TRUE)
  )

waste_recovery_disposal_16.by_codes4 <- waste_recovery_disposal_16.by_codes4 |>
  select(-`MATIČNA ŠTEVILKA`, -SKD)

waste_recovery_disposal_16.by_codes4 <- waste_recovery_disposal_16.by_codes4 |>
  rename(
    name_of_company = `NAZIV IN NASLOV`,
    statistical_region = `STATISTIČNA REGIJA`,
    waste_code = `ŠT. ODPADKA`,
    total_waste_generated_untreated = `PO OBDELAVI NASTALI ODPADKI IN ODPADKI ODDANI DRUGIM BREZ OBDELAVE  (kg)`,
    given_to = `ODDANO KOMU`,
    treatment_process = `POSTOPEK OBDELAVE, ČE SO ODPADKI POSLANI V OBDELAVO V TUJINO`
  )

## Add type_of_waste
waste_recovery_disposal_16.by_codes4 <- waste_recovery_disposal_16.by_codes4 |> categorize_waste()

## get distinct given_to
waste_recovery_disposal_16.by_codes4 |> distinct(given_to)
## Rename given_to
waste_recovery_disposal_16.by_codes4 <- waste_recovery_disposal_16.by_codes4 |>
  mutate(
    given_to = case_when(
      given_to == "drug izvajalec obdelave v RS" ~ "processing operator in RS",
      given_to == "drug zbiralec v RS" ~ "other collector in RS",
      given_to == "druga država članica EU" ~ "other EU country",
      given_to == "tretja država (izven EU)" ~ "other country (outside EU)"
    )
  )

waste_recovery_disposal_16.by_codes4 <- waste_recovery_disposal_16.by_codes4 |>
  group_by(statistical_region, type_of_waste, given_to) |>
  summarise(
    total_waste_generated_untreated = sum(total_waste_generated_untreated) / 1000 # for tons
  ) |>
  ungroup() |>
  mutate(year = 2016)

waste_recovery_disposal_16.by_codes4 <- waste_recovery_disposal_16.by_codes4 |>
  select(year, statistical_region, type_of_waste, total_waste_generated_untreated, given_to)

# create from given_to column
waste_recovery_disposal_16.by_codes4 <- waste_recovery_disposal_16.by_codes4 |>
  mutate(
    waste_generated_to_processing_operator_RS = case_when(
      given_to == "processing operator in RS" ~ total_waste_generated_untreated,
      TRUE ~ 0
    ),
    waste_generated_to_other_collector_RS = case_when(
      given_to == "other collector in RS" ~ total_waste_generated_untreated,
      TRUE ~ 0
    ),
    waste_generated_to_other_EU_country = case_when(
      given_to == "other EU country" ~ total_waste_generated_untreated,
      TRUE ~ 0
    ),
    waste_generated_to_other_country_outside_EU = case_when(
      given_to == "other country (outside EU)" ~ total_waste_generated_untreated,
      TRUE ~ 0
    )
  )

waste_recovery_disposal_16.by_codes4 <- waste_recovery_disposal_16.by_codes4 |>
  group_by(year, statistical_region, type_of_waste) |>
  summarise(
    total_waste_generated_untreated = sum(total_waste_generated_untreated),
    waste_generated_to_processing_operator_RS = sum(waste_generated_to_processing_operator_RS),
    waste_generated_to_other_collector_RS = sum(waste_generated_to_other_collector_RS),
    waste_generated_to_other_EU_country = sum(waste_generated_to_other_EU_country),
    waste_generated_to_other_country_outside_EU = sum(waste_generated_to_other_country_outside_EU)
  ) |>
  ungroup()
```

```{r waste_recovery_disposal_to_CSV_2016}
# sheet names
sheet_names <- c(
  "Waste Storage",
  "Waste Collected",
  "Treatment of Waste",
  "Waste Generated and Untreated"
)

# List
waste_recovery_disposal.16 <- list(
  waste_recovery_disposal_16.by_codes1,
  waste_recovery_disposal_16.by_codes2,
  waste_recovery_disposal_16.by_codes3,
  waste_recovery_disposal_16.by_codes4
)

names(waste_recovery_disposal.16) <- sheet_names

for (sheet_name in sheet_names) {
  write_excel_csv(waste_recovery_disposal.16[[sheet_name]], paste0("2016 data\\2016 filtered\\treatment\\", tolower(gsub(" ", "_", sheet_name)), "_16.csv"))
}
```
